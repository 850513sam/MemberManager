{"version":3,"sources":["../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/Page/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/Page/AnimatedPage.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Extensions/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Extensions/Animation.extension.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Data/Config/file:/D:/Hilo/Hilo_Client/assets/scripts/Data/Config/app.config.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Application/file:/D:/Hilo/Hilo_Client/assets/scripts/Application/AppConfigLoader.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Application/file:/D:/Hilo/Hilo_Client/assets/scripts/Application/Application.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/AssetCache.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/Config/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/Config/assetPath.config.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Config/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Config/audio.config.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/AudioManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Helper/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Helper/AvatarLoader.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Data/DTO/file:/D:/Hilo/Hilo_Client/assets/scripts/Data/DTO/Bet.dto.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/Bet/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/Bet/BetStatus.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/BindRotation.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/ButtonSoundEffect.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Helper/LoadingTask/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Helper/LoadingTask/CompositeLoadingTask.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Application/Network/file:/D:/Hilo/Hilo_Client/assets/scripts/Application/Network/Connection.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/CourtInfoManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Application/Network/file:/D:/Hilo/Hilo_Client/assets/scripts/Application/Network/Cryptor.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/CustomButton.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/Data.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Data/DTO/file:/D:/Hilo/Hilo_Client/assets/scripts/Data/DTO/Debug.dto.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Utils/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Utils/Delay.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Helper/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Helper/DenomConverter.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/Page/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/Page/Dialog.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Application/Network/file:/D:/Hilo/Hilo_Client/assets/scripts/Application/Network/EnhancedWebSocket.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/ErrorHandler/Config/file:/D:/Hilo/Hilo_Client/assets/scripts/ErrorHandler/Config/error.config.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/ErrorHandler/file:/D:/Hilo/Hilo_Client/assets/scripts/ErrorHandler/ErrorHandler.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/Config/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/Config/fallback.config.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Application/file:/D:/Hilo/Hilo_Client/assets/scripts/Application/FullScreenController.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Config/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Config/game.config.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Data/DTO/file:/D:/Hilo/Hilo_Client/assets/scripts/Data/DTO/Game.dto.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/GradientLabel.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/BetSetting/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/BetSetting/HiloBetSettingItem.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/BetSetting/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/BetSetting/HiloBetSettingManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/UI/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/UI/HiloButtonManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/HiloGameConnection.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/HiloGameData.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/HiloGameLogic.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/HiloGameView.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/UI/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/UI/HiloOddsInfoManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/RoadMap/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/RoadMap/HiloPlayerOperateTypeItem.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/HiloPokerTool.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/UI/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/UI/HiloProbabilityInfoManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/UI/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/UI/HiloResultManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/RoadMap/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/RoadMap/HiloRoadMapItem.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/RoadMap/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/RoadMap/HiloRoadMapManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/UI/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Hilo/UI/HiloScoreManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/HSLSprite.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/Humburger.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/I18n.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/I18n.type.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/I18nLoader.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Extensions/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Extensions/Label.extension.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/LabelPropertyAdjustor.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/LanguageItem.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/LanguageSetting.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Helper/LoadingTask/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Helper/LoadingTask/LoadingTask.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/LocalizedAsset.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/LocalizedComponent.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/LocalizedFontSize.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/LocalizedLabel.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/LocalizedPosition.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/LocalizedSkeleton.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/LocalizedComponent/LocalizedSprite.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/MainUI.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/MatchManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/MessageDialog.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/MessageManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Application/file:/D:/Hilo/Hilo_Client/assets/scripts/Application/NoSleepController.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/NumberFormatter.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/Page/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/Page/Page.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Utils/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Utils/Parameter.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Data/Config/file:/D:/Hilo/Hilo_Client/assets/scripts/Data/Config/path.config.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/Bet/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/Bet/PlayerBetInfo.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/PlayerCashoutItem.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/PlayerInfo.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/PlayerInfoManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/PlayerItem.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/PlayerListManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/PreloadManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Components/Processor.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Helper/LoadingTask/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Helper/LoadingTask/ProgressOffsetCounter.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/Provability.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Utils/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Utils/Random.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/StartUp.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Helper/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/Helper/StorageHelper.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/Config/file:/D:/Hilo/Hilo_Client/assets/scripts/I18n/Config/support.config.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Data/DTO/file:/D:/Hilo/Hilo_Client/assets/scripts/Data/DTO/Table.dto.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/file:/D:/Hilo/Hilo_Client/assets/scripts/MemberManager/TipsManager.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Extensions/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Extensions/Tween.extension.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/UserWebview.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Utils/file:/D:/Hilo/Hilo_Client/assets/scripts/Toolkit/Utils/Utility.ts","../../file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/file:/D:/Hilo/Hilo_Client/assets/scripts/Game/GameObject/VolumeSetting.ts"],"names":["ccclass","_decorator","property","UITransform","onLoad","_Page","playOpenAnimation","isFreezing","tween","this","mask","getComponent","UIOpacity","set","opacity","to","start","_context","view","position","Vec3","referenceBackground","contentSize","height","ZERO","easing","promisifyStart","playCloseAnimation","_context2","Page","Animation","prototype","waitForFinished","animationName","animationState","getState","Error","isPlaying","Promise","resolve","_this","once","EventType","FINISHED","Object","assign","GameName","GameVersion","PlatformsID","WalletTypesID","Lauguage","GameDomain","settings","querySettings","NeedEncrypt","Debug","generateDummyUserToken","length","characterSet","result","i","charAt","Math","trunc","random","AppConfigLoader","gameName","Parameter","get","defaultAppConfig","gameVersion","gameDomain","token","platformID","walletTypeID","needEncrypt","language","homeURL","useIFrame","hideExit","debug","_config","_connection","_i18n","initI18nModule","initNetworkModule","cryptor","Cryptor","config","webSocket","EnhancedWebSocket","joinURL","Connection","load","instance","Application","assetCache","Map","type","key","asset","has","CacheableAssetTypeName","json","JsonAsset","errorMessage","text","nodeSetting","SoundEffect","Music","Voice","VoiceLanguage","SupportLanguage","EN","English","SCH","Chinsese","TCH","VI","Vietnamese","JA","Japanese","audioSourcePool","NodePool","_audioSourceRoot","musicAudioSource","audioClipMap","_loadingTask","_isContextRunning","_isStartPlaying","_deferredPlaylist","_effectVolume","_musicVolume","_effectMute","_musicMute","originMusicVolume","originEffectVolume","game","on","Game","EVENT_SHOW","musicVolume","effectVolume","EVENT_HIDE","preload","applyLocalSetting","CompositeLoadingTask","loadAudioClip","stopEffects","exceptionList","playingEffects","filter","effect","includes","clip","name","forEach","_this2","recycleAudioSource","audioSource","Tween","stopAllByTarget","stop","loop","put","node","getAudioSource","needRecycle","newNode","Node","addComponent","AudioSource","playOnAwake","ENDED","_this3","audioSourceRoot","addChild","playMusic","isLoop","playing","volume","_tryToPlay","playEffect","startAt","getDuration","_doPlay","push","_this4","STARTED","play","currentTime","updateEffectVolume","effectMute","updateMusicVolume","musicMute","loadingTask","addTask","resources","loadDir","AudioClip","progress","bind","error","assets","finish","audioClip","_this5","waitForFinish","localAudioSetting","StorageHelper","loadFromLocal","StoragePath","AudioSetting","value","mute","addPersistRootNode","getComponentsInChildren","_this6","AudioManager","cache","getAvatar","url","assetManager","loadRemote","ext","err","spriteFrame","SpriteFrame","createWithImage","AvatarLoader","ChipType","Wager","Bet","Denom","Balance","Card","Probability","Multiplier","Secret","Hash","NextHash","Prefab","args","_initializerDefineProperty","pool","enterTableInit","_inheritsLoose","_proto","onEnterTable","onNewEventReceived","PlayerInfo","getInstance","getEntryEvent","Event","onTableStateChanged","state","TableState","Waiting","recycleAll","event","Bets","bets","values","allNodes","countDifference","abs","slice","nodes","bet","index","playerBetInfo","PlayerBetInfo","player","getPlayers","find","p","ID","PlayerID","setInfo","Nickname","DenomConverter","valueToDollar","parentNode","getPlayerID","localPlayerContent","otherPlayerContent","parent","seperator","active","children","info","instantiate","playerBetInfoPrefab","poolNode","_createClass","Component","configurable","enumerable","writable","initializer","referencedNode","TRANSFORM_CHANGED","TransformBit","ROTATION","worldRotation","requireComponent","Button","button","audioClipKey","playOnTouchStart","TOUCH_START","interactable","Instance","playOnTouchEnd","CLICK","subTasks","waitForTaskAddedCallbacks","findTask","taskName","task","waitForTaskAdded","existTask","callbacks","addSimpleTask","taskPromise","subTask","data","LoadingTask","each","onSubTaskProgress","onSubTaskFinished","completeCount","callback","_LoadingTask","reduce","pre","cur","totalCount","every","isFinished","isSuccess","websocket","onDisconnectCallbacks","onDisconnected","setExceptedErrorMessages","PathName","CustomErrorName","INSUFFICIENT_BALANCE","listenForDisconnect","send","path","errorMsg","listenForPublishData","subscribe","stoplisteningForPublishData","unsubscribe","listenForError","subscribeError","stoplisteningForError","unsubscribeError","blockDisconnectionMessage","blockDisconnectedMessage","startConnecting","connect","login","Token","EntryTable","Login","cryptKey","then","keepAlive","getTableStatus","Refresh","onMoneyNotEnough","isNotEnoughMsgExist","EditBox","Label","editCourtIndex","editPlayerIndex","editBtnGroup","nextMatchPlayers","CourtInfoManager","close","courtInfoInit","addBtnEvent","init","courtInfo","CourtInfo","playerA1","playerA2","playerB1","playerB2","courtName","teamA","teamB","defaultTeamA","defaultTeamB","Data","courtInfoList","btnClose","onBtnClose","btnStart","onBtnStart","btnRefresh","onBtnRefresh","btnEnd","onBtnEnd","btnSet","onBtnSet","btnPlayer_a1","onBtnPlayer","btnPlayer_a2","btnPlayer_b1","btnPlayer_b2","btnClear_a1","onBtnClear","btnClear_a2","btnClear_b1","btnClear_b2","setEditBtnGroup","updatePlayerStatus","updateNextMatchInfo","MainUI","updateCourtInfo","MatchManager","getNextMatchPlayers","playerName","nextMatchInfo","string","enable","btn","completeMatchCount","setNewPlayer","PlayerListManager","open","defaultPlayer","playerInfo","playerName_a1","playerName_a2","playerName_b1","playerName_b2","courtIndex","setCoutInfo","isEditCourtMode","validKeyLength","_key","_backupKey","encrypt","plainText","CryptoJS","AES","enc","Utf8","parse","mode","ECB","padding","pad","Pkcs7","toString","decrypt","cipherText","getSHA256Hash","SHA256","rawKey","repeat","ceil","substring","CustomButtonStatus","hsl","scale","clone","ONE","equal","status","equals","lerp","out","from","ratio","tempStatus","override","visible","_hslSprite","_transitionFinished","_time","_pressed","_hovered","_fromStatus","_toStatus","update","dt","target","HSLSprite","_duration","applyButtonStatus","_applyTarget","_Button","_resetState","_interactable","_normalStatus","_disabledStatus","_applyTransition","_updateCustomTransition","getScale","setScale","_transition","_","_this$_normalStatus","_updateState","_pressedStatus","_hoverStatus","playerInfoList","playerAbility","DebugMode","Mode","Rank","Win","component","Delay","millisecond","resolveFunc","scheduleOnce","reason","rejectFunc","resolveValue","getDenom","DialogEventType","confirmButton","onConfirmButtonClick","cancelButton","onCancelButtonClick","waitForComfirm","Dialog","Confirm","waitForCancel","Cancel","emit","closeOnConfirm","closeOnCancel","messageDispatcher","messageBroadcaster","errorBoardcaster","expectedErrorMessages","previousDelays","errorMessages","connectSuccessfully","WebSocket","connectionPromise","onopen","log","onmessage","receiveData","JSON","decryptData","Path","Err","reject","_this$messageDispatch","shift","_this$messageDispatch2","_this$expectedErrorMe","_this$errorBoardcaste","notify","handleCustomError","onerror","onclose","showDisconnectMsg","informNetworkDisconnecting","postData","timeout","DEFAULT_TIMEOUT","readyState","OPEN","forever","encryptResult","stringify","race","TIMEOUT","sys","os","OS","IOS","OPERATE_TIMEOUT","CONNECTION_FAILED","subscriberQueue","handlerIndex","findIndex","subscriber","splice","requestTime","Date","now","_context3","Ack","undefined","averageDelay","KEEP_ALIVE_INTERVAL","arg","ErrorHandler","handle","CLOSED","CLOSING","DEFAULT_DELAY","ErrorUtils","errorList","code","FRONT_END_ERROR","LOADING_FAILED","GAME_PAUSE","ROUND_CANCEL","BET_LIMIT_EXCEED","TABLE_LIMIT_EXCEED","window","addEventListener","message","customError","findErrorBy","StartUp","showGameStateError","showHint","showFatalError","en","sch","tch","tha","cn","tw","Canvas","isMobile","TOUCH_END","screen","fullScreen","requestFullScreen","Cards","Wagers","Payouts","TotalBet","TotalWin","property1","property2","ttfAssembler","Color","_flushAssembler","assembler","Assembler","getAssembler","gradientAssembler","_assembler","destroyRenderData","_renderData","createData","material","_colors","labelAssembler","create","fillBuffers","comp","call","renderData","vData","chunk","vb","colorOffset","floatStride","color","colors","colorR","r","colorG","g","colorB","b","colorA","_uiProps","NumberFormatter","betValue","betIndex","onBtnBetValue","HiloBetSettingManager","closeBetSetting","HiloGameData","setCurrentBetValue","setBetIndex","HiloButtonManager","updateCurrentBetValue","btnBackDefault","setBetValue","valueTxt","betItemGroup","map","betItem","initBetSettingPage","betList","getBetList","addBetItem","betSettingItem","HiloBetSettingItem","setParent","itemGroup","getDefaultBetIndex","openBetSetting","SpriteAtlas","betBtnSpriteName","btnHigh","onBtnBet","btnLow","btnCashOut","onBtnCashOut","btnNextRound","onBtnNextRound","btnBet","onBtnStartBet","btnBetList","onBtnBetList","closeGame","setRefreshBtnLock","setBetLock","setCompareBtnLock","HiloGameConnection","sendSkip","betType","betInfo","BetRequestData","getBetIndexList","sendBet","gameData","getCurrentBetValue","money","getPlayerMoney","connection","setPlayerMoney","HiloGameLogic","setGameState","GameState","GAME_STATE_BET","setIsWin","sendCashOut","GAME_STATE_START","updateCompareBtnState","cardIndex","getCardIndex","cardValue","HiloPokerTool","getPokerValue","betIndexList","Array","highBetIndex","lowBetIndex","Sprite","betAtlas","getSpriteFrame","setBetIndexList","updateBetBtnState","isLose","gameState","getGameState","isStartState","isBetState","isResultState","GAME_STATE_RESULT","isFirstRound","getIsNewRound","currentBet","currentBetTxt","HiloScoreManager","updateScoreInfo","Skip","handleSkip","handleBet","Cashout","handleCashOut","getBetIndex","setIsNewRound","setCurrentOdds","setCardIndex","entries","setProbabilityList","operate","getPlayerOperateTypeFromWager","HiloGameView","getNewCard","setProveData","GAME_STATE_INIT","PlayerOperateType","SKIP","setNextHash","GameEventType","NEXT_HASH","getIsFirstIntoGame","provabilityData","ResultData","RESULT","setIsFirstIntoGame","currentBetValue","score","currentOdds","isNewRound","isFirstIntoGame","isWin","probabilityList","oddsList","nextHash","defaultBetIndex","setBetList","getScore","setScore","getCurrentOdds","getIsWin","getProbabilityList","Number","toFixed","getOddsList","setOddsList","getNextHash","setDefaultBetIndex","DEFAULT","addTestEvent","initOddsList","PayTable","Values","Default","payTableData","oddsList1","oddsList2","odds1","odds2","oddsKey1","oddsKey2","onGameStateChange","onGameInit","onGameStart","onGameBet","onGameResult","console","updateCurrentCardInfo","HiloRoadMapManager","refreshRecord","updateLossEffect","delay","HiloResultManager","openResultPage","document","location","href","history","back","wager","operateType","LOW","HIGH","isDebugWin","debugInfo","DebugRequestData","winOrLossStr","wagerStr","input","Input","KEY_UP","keyCode","KeyCode","SPACE","ARROW_UP","ARROW_DOWN","DIGIT_1","DIGIT_2","DIGIT_3","DIGIT_4","DIGIT_5","DIGIT_6","DIGIT_7","DIGIT_8","DIGIT_9","DIGIT_0","KEY_Q","KEY_W","KEY_E","KEY_Z","KEY_X","KEY_C","KEY_V","KEY_B","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","I18n","changeLanguage","PT","ES","KO","TH","checkGameSceneIsLoadFinish","updatePlayerMoney","lossEffect","betSettingManager","buttongManager","oddsInfoManager","HiloOddsInfoManager","probabilityInfoManager","HiloProbabilityInfoManager","roadMapManager","scoreManager","resultManager","isConnect","prepareStartGame","waitLoading","setPokeAtlas","pokerAtlas","setGameVersion","setTimeout","throwAbandonCard","turnCardOver","currentCard","updateProbabilityInfo","updateOddsInfo","initAbandonCard","abandonCard","getPoker","angle","MUCKED","abandonCardOpacity","addRecord","playerMoneyTxt","versionTxt","highOddsTxt","lowOddsTxt","pokerValue","isValueMaxOrMin","oddsIndex2","highOdds","lowOdds","duration","targetScale","highOddsOpacity","lowOddsOpacity","setSprite","pokerNode","spriteName","pokerSprite","convertCardIndexToSpriteName","convertCardIndexFormat","cardIndexStr","poker","FLIP","y","x","remainder","highProbabilityTxt","lowProbabilityTxt","highProbabilityOpacity","lowProbabilityOpacity","winHexColor","lossHexColor","isShowResultPage","closeResultPage","updateResultInfo","showPageEffect","fontHex","odds","resultInfoTxt","fromHEX","bg","winBg","lossBg","oddsTxt","resultMoneyTxt","LocalizedLabel","settleInfoTxt","isOpen","maskOpacity","pageOpacity","resultPage","startScale","maxScale","startOpacity","targetOpacity","delayTime","oddsGroup","moneyGroup","setOddsInfo","fontHexColor","ScrollView","lastCard","firstCard","cardList","operateIconList","screenMaxAmount","cardInterval","operateIconInterval","startX","posY","barInitPos","cardsGroupInitSize","Size","cardAniScale","isFirstCard","addCard","cardGroupTransform","cardGroup","width","setContentSize","moveRecord","posX","card","roadMapItem","cardPos","HiloRoadMapItem","addOperateIcon","currentCardPos","operateIcon","icon","highIcon","lowIcon","skipIcon","insertChild","HiloPlayerOperateTypeItem","extraCardAmount","lastRecordPos","targetPosX","roadMapScrollView","scrollToRight","_loop","targetPos","initRoadMap","bar","destroyAllChildren","isShowScore","scoreTxt","executeInEditMode","min","max","step","slide","_hsl","_onMaterialModified","idx","_Sprite","updateHSLProperty","updateHueProperty","updateSaturationProperty","updateLightnessProperty","getMaterialInstance","setProperty","z","onEnable","getAccountInfoUrl","historys","I18nEventType","caches","loader","I18nLoader","defaultLanguage","_currentLanguage","_loadLanguagePromise","isLoadingLanguage","targetLanguage","contains","getFallbackLanguage","handleTitleTranlation","AssetCache","loadLanguage","EVENT_TYPE","LanguageChanged","waitForLanguageLoaded","getNodeSetting","_this$cache$get","warn","getMessage","resultMessage","_this$cache$get2","split","a","resultSpriteFrame","spriteAtlas","getSkeletonData","resultSkeletonData","sp","SkeletonData","title","fallBackLanguage","fallbackLanguages","EventTarget","eng","ja","vi","pt","es","getData","all","assetPathConfig","assetTypeName","assetPathMap","assetType","cacheableAssetTypeMap","assetName","loadAsset","registerTextChangeCallback","textChangeCallbackList","unregisterTextChangeCallback","_this$textChangeCallb2","indexOf","originalDescriptor","getOwnPropertyDescriptor","originSetter","finalString","defineProperty","LabelPropertyConstraint","label","previousDigit","str","updateFontSize","constraints","sort","digit","currentDigit","getLocaleStringLength","replace","constraint","fontSize","lineHeight","Toggle","toggle","isChecked","setLanguageName","languageName","setLineActive","line","setColor","getToggle","itemHeight","whiteColor","HexColorCode","White","yellowColor","Yellow","supportLanguageNameList","languageItemList","isChoose","labelColor","_AnimatedPage","getSupportLanguageName","initOptionsPage","supportLanguageValue","count","keys","item","languageItem","content","getIsChoose","getLanguageNameColor","LanguageItem","changeState","getCurrentLanguageIndex","currentLanguage","chooseIndex","AnimatedPage","_name","_completeCount","_totalCount","_isFinished","_isSuccess","_error","waitForStart","_target","onLanguageChange","onKeyChange","getTarget","LocalizedComponent","executionOrder","onDestroy","targetOff","menu","fontSizeKey","reset","LocalizedAsset","_this$key$split","messageKey","messageArgs","fillTextArgument","positionData","positionX","positionY","positionKey","isNaN","Skeleton","skeletonData","tracks","track","trackIndex","trackTime","animation","setAnimation","btnAddPlayer","onBtnAddPlayer","btnPlayerList","onBtnPlayerList","btnSetCourt_1","onBtnSetCourt","btnSetCourt_2","PlayerInfoManager","court_1_name","court_1_a1","court_1_a2","court_1_b1","court_1_b2","court_2_name","court_2_a1","court_2_a2","court_2_b1","court_2_b2","restingPlayers","needToPlayList","nextPlayer","clearFakePlayer","updateRestingPlyers","updateNeedToPlayList","tryGetPlayer","removeIndex","randomRangeInt","getIsNeedToPlay","newRestingPlayer","playerIndex","totalMatchCount","closeButton","display","messageDialogPool","fatalErrorMessage","gameStateErrorMessage","attachMessageManager","getMessageDialog","MessageDialog","CLOSE","setSiblingIndex","messageDialogRoot","hideGameStateError","_context4","spawnMessageDialog","messageDialogPrefab","noSleep","Nosleep","isEnabled","_onTouchEnd","off","cc","tooltip","updateTextDisplay","enabled","format","displayDecimal","displayDecimalZero","displayLeadingZero","displayThousands","displayZero","maxIntegerLength","maxDecimalLength","prefixText","posfixText","formatOption","decimalPointNumber","precision","precisionValue","round","resultText","integerPart","match","texts","_value","PageEventType","closeCallBack","_isFreezing","openButton","closeOnBlur","isVisible","isForce","waitForOpen","waitForClose","flag","getParamSearch","param","URL","searchParams","paramKey","defaultValue","_wager","_ID","nickname","multiplier","id","background","cashoutFrame","Brown","Black","multiplierValue","betFrame","setCashout","setItem","isLocalPlayer","localUserIcon","userIcon","playerMoney","denom","entryEvent","nickName","playerID","accountInfoUrl","tableState","players","gameView","gameLogic","currentBetvalue","setDenom","setEntryEvent","getnickName","setnickName","setPlayerID","setAccountInfoUrl","getTableState","setTableState","setPlayers","tmpPlayerAbility","isAddPlayer","editIndex","btnSave","onBtnSave","btnDelete","onBtnDelete","playerAbility_1","onBtnAbility","playerAbility_2","playerAbility_3","playerAbility_4","playerAbility_5","ability","textLabel","addPlayerItem","deletePlayer","deleteIndex","isAdd","generateTestData","btnPlayer","setPlayerInfo","updateMatchCompleteCount","playerItemList","isHidePlayerMember","scroll","scrollToTop","playerItem","PlayerItem","isShow","playerItemRoot","removeChild","ProgressBar","preloadTask","preloadOnly","preLoadSceneTask","logoPromise","director","preloadScene","progressBar","reportStatus","startGame","reportProgress","iterator","iteratorResult","pausePromise","resumeResolve","stopResolve","finishResolve","finishPromise","onPause","onResume","run","process","stopPromise","_asyncToGenerator","next","done","Processor","stopSymbol","isRunning","isStopManually","pause","isPause","resume","isEndNaturely","Symbol","_offset","seconds","ButtonIconType","lastHash","msgTween","verifyButton","verify","hash","setNextResultHash","setResult","ON_ENTER_TABLE","copyHashNextGameButton","copyHashNextGame","copyHashLastGameButton","copyHashLastGame","copyJsonButton","copyJson","CCGame","buttonImageTransformation","CLASS","updateUI","hashNextGame","finalResult","successfulMessage","lastGameNode","hashLastGame","resultData","_nextHash","click","_lastHash","_json","NHASH","tickIcon","copyIcon","LHASH","copyToClipboard","msg","copiedMessagePrefab","setPosition","destroy","BUTTON_CLICK","navigator","clipboard","isSecureContext","writeText","textArea","createElement","body","appendChild","select","execCommand","remove","getBoolean","maximum","allowNegative","randomSign","floor","Random","messageManager","_state","gameIsHidden","addConnectEvent","onLogin","EnterTable","updateBalance","AccountInfoURL","ON_LOGIN","State","Players","postMessage","newState","Receiving","ROUND_START","TABLE_STATE_CHANGED","localStorage","getItem","PayType","TableType","EMsgCode","TipsManager","btnConfirm","onBtnConfirm","setMsg","msgCode","startTime","setTime","time","_finalAction","_firstTick","_elapsed","WebView","source","webview","nativeWebView","_this2$webview$native","contentWindow","parentElement","style","overflow","disableRecordWebView","openUserRecord","openWebview","currentLanguageForWebview","openUserStatistics","smallerValues","fill","originValue","assert","frame","fps","displayLength","replaceWith","char","join","RegExp","host","child","originWorldPosition","convertToWorldSpaceAR","convertToNodeSpaceAR","Slider","currentAudioSetting","handleVolumeSlider","soundMuteButton","switchSoundMute","BGMMuteButton","switchBGMMute","loadAndApplyAudioSetting","initUI","updateVolumeSlider","soundVolumeSlider","soundVolumeSliderFill","fillRange","BGMVolumeSlider","BGMVolumeSliderFill","saveAudioSetting","saveToLocal","VolumeSetting","defaultAudioSetting"],"mappings":"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","file":"all.js","sourcesContent":["import { tween, UITransform, Vec3 } from 'cc';\r\nimport { UIOpacity, _decorator } from 'cc';\r\nimport Page from './Page';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('AnimatedPage')\r\nexport default class AnimatedPage extends Page {\r\n\r\n    @property(UITransform)\r\n    private referenceBackground: UITransform = null;    // view 這個 node 的長寬目前是固定(100, 100)，因此需要透過 referenceBackground 來知道整個彈窗的長寬\r\n\r\n    protected onLoad() {\r\n        super.onLoad();\r\n    }\r\n\r\n    protected async playOpenAnimation(): Promise<void> {\r\n        this.isFreezing = true;\r\n        tween(this.mask.getComponent(UIOpacity))\r\n            .set({ opacity: 0 })\r\n            .to(0.3, { opacity: 255 })\r\n            .start();\r\n        await tween(this.view)\r\n            .set({ position: new Vec3(0, -this.referenceBackground.contentSize.height, 0) })\r\n            .to(0.3, { position: Vec3.ZERO }, { easing: 'smooth' })\r\n            .promisifyStart();\r\n        this.isFreezing = false;\r\n    }\r\n\r\n    protected async playCloseAnimation(): Promise<void> {\r\n        this.isFreezing = true;\r\n        tween(this.mask.getComponent(UIOpacity))\r\n            .to(0.3, { opacity: 0 })\r\n            .start();\r\n        await tween(this.view)\r\n            .to(0.3, { position: new Vec3(0, -this.referenceBackground.contentSize.height, 0) }, { easing: 'smooth' })\r\n            .promisifyStart();\r\n        this.isFreezing = false;\r\n    }\r\n}\r\n","import { Animation } from 'cc';\r\n\r\ndeclare module 'cc' {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    interface Animation {\r\n        waitForFinished(animationName?: string): Promise<void>;\r\n    }\r\n}\r\n\r\nAnimation.prototype.waitForFinished = function waitForFinished(this: Animation, animationName?: string) {\r\n    const animationState = this.getState(animationName);\r\n    if (animationName && !animationState) {\r\n        throw new Error(`Can't find the animation state: ${animationName}`);\r\n    }\r\n    if (!animationState.isPlaying) {\r\n        return Promise.resolve();\r\n    }\r\n    return new Promise((resolve) =>\r\n        this.once(Animation.EventType.FINISHED, () => {\r\n            if (animationState.isPlaying) {\r\n                return;\r\n            }\r\n            resolve();\r\n        })\r\n    );\r\n};\r\n","import { settings } from \"cc\";\r\nimport { DEV } from \"cc/env\";\r\n\r\nconst appConfig = {\r\n    GameName: 'hilo',\r\n    GameVersion: 'v1.0.16',\r\n    PlatformsID: 1,\r\n    WalletTypesID: 1,\r\n    Lauguage: 'en',\r\n}\r\n\r\nexport const defaultAppConfig = DEV ? Object.assign(appConfig, {\r\n    GameDomain: 'ws://192.168.127.152:9004/api/v1/games',\r\n    NeedEncrypt: false,\r\n    Debug: true,\r\n}): Object.assign(appConfig, {\r\n    GameDomain: settings.querySettings(\"settings\", \"ServerWebsocket\"),\r\n    NeedEncrypt: settings.querySettings(\"settings\", \"Encrypt\"),\r\n    Debug: settings.querySettings(\"settings\", \"Debug\"),\r\n});\r\n","import { defaultAppConfig } from '../Data/Config/app.config';\r\nimport Parameter from '../Toolkit/Utils/Parameter';\r\n\r\nexport type AppConfigData = {\r\n    gameName: string;\r\n    gameVersion: string;\r\n    gameDomain: string;\r\n    token: string;\r\n    platformID: number;\r\n    walletTypeID: number;\r\n    needEncrypt: boolean;\r\n    language: string;\r\n    homeURL: string;\r\n    useIFrame: string;\r\n    hideExit: boolean; // 隱藏離開按鈕\r\n    debug: boolean;\r\n};\r\n\r\nexport namespace AppConfigLoader {\r\n    export function load(): AppConfigData {\r\n        return {\r\n            gameName: Parameter.get('gameID', defaultAppConfig.GameName),\r\n            gameVersion: defaultAppConfig.GameVersion,\r\n            gameDomain: Parameter.get('gameDomain', defaultAppConfig.GameDomain),\r\n            token: Parameter.get('token') ?? generateDummyUserToken(36),\r\n            platformID: +(Parameter.get('platform') ?? defaultAppConfig.PlatformsID),\r\n            walletTypeID: +(Parameter.get('wt') ?? defaultAppConfig.WalletTypesID),\r\n            needEncrypt: defaultAppConfig.NeedEncrypt,\r\n            language: Parameter.get('lang', defaultAppConfig.Lauguage),\r\n            homeURL: Parameter.get('homeUrl'),\r\n            useIFrame: Parameter.get('useIFrame'),\r\n            hideExit: Parameter.get('hideExit') === 'true',\r\n            debug: defaultAppConfig.Debug,\r\n        };\r\n    }\r\n}\r\n\r\nfunction generateDummyUserToken(length: number) {\r\n    // generate random 36-digit string as dummy user token\r\n    const characterSet: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let result: string = '';\r\n    for (let i = 0; i < length; i++) {\r\n        result += characterSet.charAt(Math.trunc(Math.random() * characterSet.length));\r\n    }\r\n    return result;\r\n}\r\n","import Connection from './Network/Connection';\r\nimport Cryptor from './Network/Cryptor';\r\nimport EnhancedWebSocket from './Network/EnhancedWebSocket';\r\nimport { AppConfigData, AppConfigLoader } from './AppConfigLoader';\r\nimport { joinURL } from '../Toolkit/Utils/Utility';\r\n\r\nexport default class Application {\r\n    private static instance: Application = null;\r\n    private _config: AppConfigData = null;\r\n    private _connection: Connection = null;\r\n    private _i18n: any = null;\r\n\r\n    private constructor() {}\r\n\r\n    public static get Instance() {\r\n        if (!this.instance) {\r\n            this.instance = new Application();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    public get config() {\r\n        if (!this._config) {\r\n            this._config = AppConfigLoader.load();\r\n        }\r\n        return { ...this._config };\r\n    }\r\n\r\n    public get connection() {\r\n        if (!this._connection) {\r\n            this.initNetworkModule();\r\n        }\r\n        return this._connection;\r\n    }\r\n\r\n    public get i18n() {\r\n        if (!this._i18n) {\r\n            this.initI18nModule();\r\n        }\r\n        return this._i18n;\r\n    }\r\n\r\n    private async initI18nModule() {\r\n        // TODO i18n module\r\n        this._i18n = {};\r\n    }\r\n\r\n    private initNetworkModule() {\r\n        const cryptor = new Cryptor(this.config.gameName, 16);\r\n        const webSocket = new EnhancedWebSocket(joinURL(this.config.gameDomain, this.config.gameName), this.config.needEncrypt ? cryptor : null);\r\n        this._connection = new Connection(webSocket);\r\n    }\r\n}\r\n","import { Asset } from 'cc';\r\n\r\nexport default class AssetCache {\r\n    private assetCache: Map<typeof Asset, Record<string, Asset>> = new Map();\r\n\r\n    public set<T extends typeof Asset>(type: T, key: string, asset: InstanceType<T>) {\r\n        if (!this.assetCache.has(type)) {\r\n            this.assetCache.set(type, {});\r\n        }\r\n        const assetMap = this.assetCache.get(type);\r\n        assetMap[key] = asset;\r\n    }\r\n\r\n    public get<T extends typeof Asset>(type: T, key: string): InstanceType<T> {\r\n        if (!this.assetCache.has(type)) {\r\n            this.assetCache.set(type, {});\r\n        }\r\n        const assetMap = this.assetCache.get(type);\r\n        return assetMap[key] as InstanceType<T>;\r\n    }\r\n}\r\n","import { Asset, JsonAsset } from 'cc';\r\n\r\nexport enum CacheableAssetTypeName {\r\n    JSON = 'json',\r\n}\r\n\r\nexport const cacheableAssetTypeMap: Record<CacheableAssetTypeName, typeof Asset> = {\r\n    json: JsonAsset,\r\n};\r\n\r\nexport const assetPathConfig: Record<CacheableAssetTypeName, Record<string, string>> = {\r\n    json: {\r\n        errorMessage: 'errorMessage',\r\n        text: 'text',\r\n        nodeSetting: 'nodeSetting',\r\n    },\r\n};\r\n","import { SupportLanguage } from '../../I18n/Config/support.config';\r\n\r\nexport enum SoundEffect {\r\n    // button\r\n    // BUTTON_COMMON_01 = 'bt_common01',\r\n    BUTTON_CLICK = 'click',\r\n    EXPLOSION = 'explosion',\r\n    CASHOUT_WIN = 'cash_out_win',\r\n    ROCKET_FLY = 'rocket_fly',\r\n    ROUND_START = 'round_start',\r\n\r\n    MUCKED = 'hilo_flip',\r\n    FLIP = 'hilo_mucked',\r\n}\r\nexport enum Music {\r\n    BGM_01 = 'music_bg',\r\n}\r\n\r\nexport enum Voice {\r\n    START_BETTING = 'vc_bet01',\r\n}\r\n\r\nexport enum VoiceLanguage {\r\n    Chinsese = 'chinese',\r\n    English = 'english',\r\n    Vietnamese = 'vietnamese',\r\n    Japanese = 'japanese'\r\n}\r\n\r\nexport const supporLanguageToVoiceLanguage: { [value in SupportLanguage]: VoiceLanguage } = {\r\n    [SupportLanguage.EN]: VoiceLanguage.English,\r\n    [SupportLanguage.SCH]: VoiceLanguage.Chinsese,\r\n    [SupportLanguage.TCH]: VoiceLanguage.Chinsese,\r\n    [SupportLanguage.VI]: VoiceLanguage.Vietnamese,\r\n    [SupportLanguage.JA]: VoiceLanguage.Japanese,\r\n};\r\n","import { AudioClip, AudioSource, Tween, Game, game, Node, NodePool, resources } from 'cc';\r\nimport CompositeLoadingTask from '../Toolkit/Helper/LoadingTask/CompositeLoadingTask';\r\nimport StorageHelper, { StoragePath } from './Helper/StorageHelper';\r\nimport { Music, SoundEffect } from './Config/audio.config';\r\nimport { IAudioSetting } from './GameObject/VolumeSetting';\r\n\r\nexport default class AudioManager {\r\n    private static instance: AudioManager = null;\r\n\r\n    private audioSourcePool: NodePool = new NodePool();\r\n    private _audioSourceRoot: Node = null;\r\n    private musicAudioSource: AudioSource = null;\r\n    private audioClipMap: Record<string, AudioClip> = {};\r\n    private _loadingTask: CompositeLoadingTask = null;\r\n    private _isContextRunning = false;\r\n    private _isStartPlaying = false;\r\n    private _deferredPlaylist: (() => void)[] = [];\r\n\r\n    // 音量\r\n    private _effectVolume: number = 1;\r\n    private _musicVolume: number = 1;\r\n    // 靜音\r\n    private _effectMute: boolean = false;\r\n    private _musicMute: boolean = false;\r\n\r\n    private originMusicVolume = 1;\r\n    private originEffectVolume = 1;\r\n\r\n    private constructor() {\r\n        game.on(Game.EVENT_SHOW, () => {\r\n            this.musicVolume = this.originMusicVolume;\r\n            this.effectVolume = this.originEffectVolume;\r\n        });\r\n        game.on(Game.EVENT_HIDE, () => {\r\n            this.originEffectVolume = this.effectVolume;\r\n            this.originMusicVolume = this.musicVolume;\r\n            this.musicVolume = 0;\r\n            this.effectVolume = 0;\r\n        });\r\n    }\r\n\r\n    public static get Instance() {\r\n        if (!this.instance) {\r\n            this.instance = new AudioManager();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    public get loadingTask() {\r\n        return this._loadingTask;\r\n    }\r\n\r\n    public get effectVolume(): number {\r\n        return this.effectMute ? 0 : this._effectVolume;\r\n    }\r\n    public set effectVolume(value: number) {\r\n        this._effectVolume = value;\r\n        this.updateEffectVolume();\r\n    }\r\n\r\n    public get musicVolume(): number {\r\n        return this.musicMute ? 0 : this._musicVolume;\r\n    }\r\n    public set musicVolume(value: number) {\r\n        this._musicVolume = value;\r\n        this.updateMusicVolume();\r\n    }\r\n\r\n    public get effectMute(): boolean {\r\n        return this._effectMute;\r\n    }\r\n\r\n    public set effectMute(mute: boolean) {\r\n        this._effectMute = mute;\r\n        this.updateEffectVolume();\r\n    }\r\n\r\n    public get musicMute(): boolean {\r\n        return this._musicMute;\r\n    }\r\n\r\n    public set musicMute(mute: boolean) {\r\n        this._musicMute = mute;\r\n        this.updateMusicVolume();\r\n    }\r\n\r\n    private get audioSourceRoot() {\r\n        if (!this._audioSourceRoot) {\r\n            this._audioSourceRoot = new Node('AudioSourceRoot');\r\n            game.addPersistRootNode(this.audioSourceRoot);\r\n        }\r\n        return this._audioSourceRoot;\r\n    }\r\n\r\n    private get playingEffects() {\r\n        return this.audioSourceRoot.getComponentsInChildren(AudioSource).filter((audioSource) => audioSource !== this.musicAudioSource);\r\n    }\r\n\r\n    public async preload() {\r\n        this.applyLocalSetting();\r\n        this._loadingTask = new CompositeLoadingTask(`audio::preload`);\r\n        await this.loadAudioClip();\r\n    }\r\n\r\n    public stopEffects(exceptionList: string[] = []) {\r\n        this.playingEffects.filter((effect) => !exceptionList.includes(effect.clip.name)).forEach((effect) => this.recycleAudioSource(effect));\r\n    }\r\n\r\n    public recycleAudioSource(audioSource: AudioSource) {\r\n        Tween.stopAllByTarget(audioSource);\r\n        audioSource.stop();\r\n        audioSource.loop = false;\r\n        this.audioSourcePool.put(audioSource.node);\r\n    }\r\n\r\n    // 取得可使用的AudioSource\r\n    private getAudioSource(needRecycle = true): AudioSource {\r\n        const node =\r\n            this.audioSourcePool.get() ??\r\n            (() => {\r\n                const newNode = new Node();\r\n                const audioSource = newNode.addComponent(AudioSource);\r\n                audioSource.playOnAwake = false;\r\n                return newNode;\r\n            })();\r\n        if (needRecycle) {\r\n            // 監聽: 播放完畢後回收\r\n            node.once(AudioSource.EventType.ENDED, () => {\r\n                this.recycleAudioSource(node.getComponent(AudioSource));\r\n            });\r\n        }\r\n        this.audioSourceRoot.addChild(node);\r\n\r\n        return node.getComponent(AudioSource);\r\n    }\r\n\r\n    // 播放背景音樂\r\n    public playMusic(type: Music, isLoop = true): AudioSource {\r\n        const clip = this.audioClipMap[type];\r\n        const audioSource = this.musicAudioSource ?? (this.musicAudioSource = this.getAudioSource(false));\r\n        audioSource.node.name = 'Music';\r\n        if (audioSource.playing) {\r\n            audioSource.stop();\r\n        }\r\n        audioSource.volume = this.musicVolume;\r\n        audioSource.loop = isLoop;\r\n        this._tryToPlay(audioSource, clip);\r\n        return audioSource;\r\n    }\r\n\r\n    // 播放音效\r\n    public playEffect(type: SoundEffect, startAt = 0): AudioSource {\r\n        const clip = this.audioClipMap[type];\r\n        const audioSource = this.getAudioSource();\r\n        audioSource.node.name = 'Effect';\r\n        audioSource.volume = this.effectVolume;\r\n        if (startAt < clip.getDuration()) {\r\n            this._tryToPlay(audioSource, clip, startAt);\r\n        } else {\r\n            this.recycleAudioSource(audioSource);\r\n        }\r\n        return audioSource;\r\n    }\r\n\r\n    private _tryToPlay(audioSource: AudioSource, clip: AudioClip, startAt = 0) {\r\n        if (!this._isContextRunning) {\r\n            if (!this._isStartPlaying) {\r\n                // first play\r\n                this._isStartPlaying = true;\r\n                this._doPlay(audioSource, clip);\r\n                audioSource.node.once(AudioSource.EventType.STARTED, () => {\r\n                    this._isContextRunning = true;\r\n                    this._deferredPlaylist.forEach(play => play());\r\n                })\r\n            } else {\r\n                // wait for first play start\r\n                this._deferredPlaylist.push(() => this._doPlay(audioSource, clip, startAt));\r\n            }\r\n        } else {\r\n            this._doPlay(audioSource, clip, startAt);\r\n        }\r\n    }\r\n\r\n    private _doPlay(audioSource: AudioSource, clip: AudioClip, startAt = 0) {\r\n        audioSource.clip = clip;\r\n        audioSource.play();\r\n        if (startAt !== 0) {\r\n            audioSource.currentTime = startAt;\r\n        }\r\n    }\r\n\r\n    // 更新正在播放的音效音量\r\n    private updateEffectVolume(): void {\r\n        const volume = this.effectMute ? 0 : this.effectVolume;\r\n        this.playingEffects.forEach((audioSource) => {\r\n            audioSource.volume = volume;\r\n        });\r\n    }\r\n\r\n    // 更新正在播放的BGM音量\r\n    private updateMusicVolume(): void {\r\n        const volume = this.musicMute ? 0 : this._musicVolume;\r\n        if (this.musicAudioSource) {\r\n            this.musicAudioSource.volume = volume;\r\n        }\r\n    }\r\n\r\n    private async loadAudioClip() {\r\n        const loadingTask = this._loadingTask.addTask('audio::load-common');\r\n        resources.loadDir(`audioClip/common`, AudioClip, loadingTask.progress.bind(loadingTask), (error, assets) => {\r\n            loadingTask.finish(error);\r\n            if (assets) {\r\n                assets.forEach((audioClip) => {\r\n                    this.audioClipMap[audioClip.name] = audioClip;\r\n                });\r\n            }\r\n        });\r\n        return loadingTask.waitForFinish();\r\n    }\r\n\r\n    private applyLocalSetting() {\r\n        const localAudioSetting = StorageHelper.loadFromLocal(StoragePath.AudioSetting) as IAudioSetting;\r\n        if (localAudioSetting) {\r\n            const { effectMute, musicMute, effectVolume, musicVolume } = localAudioSetting;\r\n            this._effectMute = effectMute;\r\n            this._effectVolume = effectVolume;\r\n            this._musicMute = musicMute;\r\n            this._musicVolume = musicVolume;\r\n        }\r\n    }\r\n}\r\n","import { assetManager, error, ImageAsset, SpriteFrame } from 'cc';\r\n\r\nexport default class AvatarLoader {\r\n    private static instance: AvatarLoader = null;\r\n\r\n    public static get Instance() {\r\n        if (!this.instance) {\r\n            this.instance = new AvatarLoader();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private constructor() {}\r\n\r\n    private cache: { [key: string]: SpriteFrame } = {};\r\n\r\n    public async getAvatar(url: string) {\r\n        return (\r\n            this.cache[url] ??\r\n            new Promise<SpriteFrame>((resolve) => {\r\n                assetManager.loadRemote<ImageAsset>(url, { ext: '.png' }, (err, asset) => {\r\n                    if (err) {\r\n                        error(err);\r\n                        return;\r\n                    }\r\n                    const spriteFrame = SpriteFrame.createWithImage(asset);\r\n                    this.cache[url] = spriteFrame;\r\n                    resolve(spriteFrame);\r\n                });\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { DebugRequestData } from \"./Debug.dto\";\r\nimport { Probability } from \"./Game.dto\";\r\n\r\n/** [ bettingOptionIndex, chipIndex, chipCount ] */\r\nexport enum ChipType {\r\n    Denom5,\r\n    Denom10,\r\n    Denom20,\r\n    Denom50,\r\n    Denom100,\r\n    Denom200,\r\n    Denom500,\r\n    Denom1K,\r\n    Denom2K,\r\n    Denom5K,\r\n    Denom10K,\r\n    Denom20K,\r\n    /** generate by front-end, use to distinguish gray chip */\r\n    NoDenom,\r\n}\r\n\r\n// [Wager, ChipType, number]\r\nexport type BetData = [number, ChipType, number];\r\n\r\nexport class BetRequestData\r\n{\r\n    Wager: number;\r\n    Bet: number;\r\n    Denom: number;\r\n    Debug: DebugRequestData;\r\n};\r\n\r\nexport class BetResponseData\r\n{\r\n    Balance: number;\r\n    Card: number;\r\n    Probability: Probability\r\n    Multiplier: number;\r\n    Wager: number;\r\n    Secret: string;\r\n    Hash: string;\r\n    NextHash: string;\r\n};\r\n","\r\nimport { NodePool } from 'cc';\r\nimport { instantiate } from 'cc';\r\nimport { _decorator, Component, Node, Prefab } from 'cc';\r\nimport { EventResponseData } from '../../../Data/DTO/Event.dto';\r\nimport { StartUp, GameEventType } from '../../StartUp';\r\nimport DenomConverter from '../../Helper/DenomConverter';\r\nimport { PlayerBetInfo } from './PlayerBetInfo';\r\nimport { TableState } from '../../../Data/DTO/Table.dto';\r\nimport { PlayerInfo } from '../../PlayerInfo';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BetStatus')\r\nexport class BetStatus extends Component {\r\n    @property(Prefab)\r\n    private playerBetInfoPrefab: Prefab = null;\r\n    @property(Node)\r\n    private localPlayerContent: Node = null;\r\n    @property(Node)\r\n    private otherPlayerContent: Node = null;\r\n    @property(Node)\r\n    private seperator: Node = null;\r\n    @property(Node)\r\n    private poolNode: Node = null;\r\n\r\n    private pool: NodePool = new NodePool();\r\n\r\n    private enterTableInit: boolean = false;\r\n\r\n    protected onLoad() \r\n    {\r\n        // StartUp.getInstance().node.on(GameEventType.ON_ENTER_TABLE, this.onEnterTable.bind(this));\r\n        // StartUp.getInstance().node.on(GameEventType.NEW_EVENT_RECEIVED, (event) => this.onNewEventReceived(event), this);\r\n        // StartUp.getInstance().node.on(GameEventType.TABLE_STATE_CHANGED, (state) => this.onTableStateChanged(state), this);\r\n    }\r\n\r\n    protected start() {\r\n        // this.localPlayerContent.removeAllChildren();\r\n        // this.otherPlayerContent.removeAllChildren();\r\n        // this.seperator.active = false;\r\n        // if (!this.enterTableInit && PlayerInfo.getInstance().getEntryEvent()) {\r\n        //     this.onEnterTable();\r\n        // }\r\n    }\r\n\r\n    private onEnterTable() {\r\n        this.onNewEventReceived(PlayerInfo.getInstance().getEntryEvent().Event);\r\n        this.enterTableInit = true;\r\n    }\r\n\r\n    private onTableStateChanged(state: TableState) {\r\n        if (state === TableState.Waiting) {\r\n            this.recycleAll();\r\n        }\r\n    }\r\n\r\n    private onNewEventReceived(event: EventResponseData) {\r\n        if (!event)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (event.Bets) {\r\n            const bets = Object.values(event.Bets);\r\n            if (this.allNodes.length < bets.length) {\r\n                const countDifference = Math.abs(this.allNodes.length - bets.length);\r\n                for (let i = 0; i < countDifference; i++) {\r\n                    this.get();\r\n                }\r\n            }\r\n            else if (this.allNodes.length > bets.length) {\r\n                const countDifference = Math.abs(this.allNodes.length - bets.length);\r\n                for (let i = 0; i < countDifference; i++) {\r\n                    this.allNodes.slice(0, countDifference).forEach(node => this.put(node));\r\n                }\r\n            }\r\n            const nodes = [...this.allNodes];\r\n            bets.forEach((bet, index) => {\r\n                const playerBetInfo = nodes[index].getComponent(PlayerBetInfo);\r\n                const player = PlayerInfo.getInstance().getPlayers().find(p => p.ID === bet.PlayerID);\r\n                playerBetInfo.setInfo(player.Nickname, DenomConverter.valueToDollar(bet.Bet), bet.Multiplier ?? 0, bet.Wager, bet.PlayerID);\r\n                const parentNode = player.ID === PlayerInfo.getInstance().getPlayerID() ? this.localPlayerContent : this.otherPlayerContent;\r\n                playerBetInfo.node.parent = null;\r\n                parentNode.addChild(playerBetInfo.node);\r\n            });\r\n            this.seperator.active = this.localPlayerContent.children.length > 0;\r\n        }\r\n        else {\r\n            this.seperator.active = false;\r\n            this.recycleAll();\r\n        }\r\n    }\r\n\r\n    private get allNodes(): Node[] {\r\n        return [...this.localPlayerContent.children, ...this.otherPlayerContent.children, ...this.poolNode.children];\r\n    }\r\n\r\n    private get(): PlayerBetInfo {\r\n        const info = (this.pool.get() ?? instantiate(this.playerBetInfoPrefab));\r\n        this.poolNode.addChild(info);\r\n        info.active = true;\r\n        return info.getComponent(PlayerBetInfo);\r\n    }\r\n\r\n    private put(node: Node) {\r\n        node.active = false;\r\n        this.pool.put(node);\r\n    }\r\n\r\n    private recycleAll() {\r\n        [...this.localPlayerContent.children].forEach((node) => this.put(node));\r\n        [...this.otherPlayerContent.children].forEach((node) => this.put(node));\r\n    }\r\n}","import { _decorator, Component, Node, __private } from 'cc';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BindRotation')\r\nexport class BindRotation extends Component {\r\n    @property(Node)\r\n    private readonly referencedNode: Node = null;\r\n\r\n    onLoad() {\r\n        this.referencedNode.on(Node.EventType.TRANSFORM_CHANGED, (type: __private._cocos_core_scene_graph_node_enum__TransformBit) => {\r\n            if (type === Node.TransformBit.ROTATION) {\r\n                this.node.worldRotation = this.referencedNode.worldRotation;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Button, Component, Node, _decorator } from 'cc';\r\nimport AudioManager from '../../Game/AudioManager';\r\nimport { SoundEffect } from '../../Game/Config/audio.config';\r\n\r\nconst { ccclass, property, requireComponent } = _decorator;\r\n\r\n@ccclass('ButtonSoundEffect')\r\n@requireComponent(Button)\r\nexport default class ButtonSoundEffect extends Component {\r\n    @property\r\n    private audioClipKey = '';\r\n\r\n    @property\r\n    private playOnTouchEnd = true;\r\n    @property\r\n    private playOnTouchStart = false;\r\n\r\n    protected onLoad() {\r\n        const button = this.getComponent(Button);\r\n        if (!Object.values(SoundEffect).includes(this.audioClipKey as SoundEffect)) {\r\n            throw new Error(`Can't find audio clip ${this.audioClipKey}`);\r\n        }\r\n        if (this.playOnTouchStart) {\r\n            this.node.on(Node.EventType.TOUCH_START, () => {\r\n                if (button.interactable) {\r\n                    AudioManager.Instance.playEffect(this.audioClipKey as SoundEffect);\r\n                }\r\n            });\r\n        }\r\n        if (this.playOnTouchEnd) {\r\n            this.node.on(Button.EventType.CLICK, () => AudioManager.Instance.playEffect(this.audioClipKey as SoundEffect));\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable class-methods-use-this */\r\nimport LoadingTask from './LoadingTask';\r\n\r\nexport default class CompositeLoadingTask extends LoadingTask {\r\n    private subTasks: LoadingTask[] = [];\r\n    private waitForTaskAddedCallbacks: { [taskName: string]: ((task: LoadingTask) => void)[] } = {};\r\n\r\n    public findTask(taskName: string) {\r\n        return this.subTasks.find((task) => task.name === taskName);\r\n    }\r\n\r\n    public waitForTaskAdded(taskName: string): Promise<LoadingTask> {\r\n        const existTask = this.subTasks.find((task) => taskName === task.name);\r\n        if (existTask) {\r\n            return Promise.resolve(existTask);\r\n        }\r\n        const callbacks = this.waitForTaskAddedCallbacks[taskName] ?? (this.waitForTaskAddedCallbacks[taskName] = []);\r\n        return new Promise<LoadingTask>((resolve) => {\r\n            callbacks.push(resolve);\r\n        });\r\n    }\r\n\r\n    public async addSimpleTask<T>(task: string, taskPromise: Promise<T>): Promise<T> {\r\n        const subTask = this.addTask(task);\r\n        subTask.progress(0, 1);\r\n        try {\r\n            const data = await taskPromise;\r\n            subTask.progress(1, 1);\r\n            subTask.finish(null);\r\n            return data;\r\n        } catch (reason) {\r\n            if (reason instanceof Error) {\r\n                subTask.finish(reason);\r\n            } else if (typeof reason === 'string') {\r\n                subTask.finish(new Error(reason));\r\n            } else {\r\n                subTask.finish(new Error(`LoadingTask: ${subTask.name} Failed, reason: ${reason}`));\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public addTask(task: string | LoadingTask): LoadingTask {\r\n        const subTask = task instanceof LoadingTask ? task : new LoadingTask(task);\r\n        if (this.subTasks.find((each) => each.name === subTask.name)) {\r\n            throw new Error(`There is task named ${subTask.name} in the group already`);\r\n        }\r\n        subTask.on('onProgress', this.onSubTaskProgress, this);\r\n        subTask.on('onFinished', this.onSubTaskFinished, this);\r\n        if (subTask.completeCount) {\r\n            this.onSubTaskProgress();\r\n        }\r\n        this.subTasks.push(subTask);\r\n        this.waitForTaskAddedCallbacks[subTask.name]?.forEach((callback) => callback(subTask));\r\n        return subTask;\r\n    }\r\n\r\n    public progress(): void {\r\n        throw new Error('TaskGroup shoud not progress by itself');\r\n    }\r\n\r\n    public finish(): void {\r\n        throw new Error('TaskGroup shoud not finish by itself');\r\n    }\r\n\r\n    private onSubTaskProgress() {\r\n        super.progress(\r\n            this.subTasks.reduce((pre, cur) => pre + cur.completeCount, 0),\r\n            this.subTasks.reduce((pre, cur) => pre + cur.totalCount, 0)\r\n        );\r\n    }\r\n\r\n    private onSubTaskFinished() {\r\n        if (this.subTasks.every((task) => task.isFinished)) {\r\n            super.finish(\r\n                this.subTasks.every((task) => task.isSuccess)\r\n                    ? null\r\n                    : new Error(`Status: ${this.subTasks.filter((subTask) => !subTask.isSuccess).length}/${this.subTasks.length} Tasks failed`)\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { PathName, PublishDataType, RequestResponseDataType } from '../../Data/Config/path.config';\r\nimport EnhancedWebSocket from './EnhancedWebSocket';\r\nimport { CustomErrorName } from '../../ErrorHandler/Config/error.config';\r\nimport { DebugRequestData } from '../../Data/DTO/Debug.dto';\r\nimport { BetRequestData } from '../../Data/DTO/Bet.dto';\r\nimport { PlayerInfo } from '../../Game/PlayerInfo';\r\n\r\nexport default class Connection {\r\n    private webSocket: EnhancedWebSocket = null;\r\n\r\n    private onDisconnectCallbacks: Function[] = [];\r\n\r\n    constructor(websocket: EnhancedWebSocket) {\r\n        this.webSocket = websocket;\r\n        this.webSocket.onDisconnected = () => {\r\n            this.onDisconnectCallbacks.forEach((callback) => callback());\r\n        };\r\n        this.webSocket.setExceptedErrorMessages(PathName.Bet, [CustomErrorName.INSUFFICIENT_BALANCE]);\r\n    }\r\n\r\n    public listenForDisconnect(callback: () => void) {\r\n        this.onDisconnectCallbacks.push(callback);\r\n    }\r\n\r\n    public send<T extends keyof RequestResponseDataType>\r\n    (path: T, data: RequestResponseDataType[T][0], errorMsg: CustomErrorName[] = []): Promise<RequestResponseDataType[T][1]>\r\n    {\r\n        return this.webSocket.send(path, data, errorMsg);\r\n    }\r\n\r\n    public listenForPublishData<T extends keyof PublishDataType>(path: T, callback: (data: PublishDataType[T]) => void) \r\n    {\r\n        this.webSocket.subscribe(path, callback);\r\n    }\r\n\r\n    public stoplisteningForPublishData<T extends keyof PublishDataType>(path: T, callback: (data: PublishDataType[T]) => void) {\r\n        this.webSocket.unsubscribe(path, callback);\r\n    }\r\n\r\n    public listenForError<T extends keyof PublishDataType>(path: T, callback: (err: string) => boolean) {\r\n        this.webSocket.subscribeError(path, callback);\r\n    }\r\n\r\n    public stoplisteningForError<T extends keyof PublishDataType>(path: T, callback: (err: string) => boolean) {\r\n        this.webSocket.unsubscribeError(path, callback);\r\n    }\r\n\r\n    public blockDisconnectionMessage() {\r\n        this.webSocket.blockDisconnectedMessage = true;\r\n    }\r\n\r\n    public startConnecting() {\r\n        return this.webSocket.connect();\r\n    }\r\n\r\n    public async login(Token: string, PlatformsID: number, WalletTypesID: number, EntryTable: boolean) {\r\n        const result = this.webSocket.send(PathName.Login, {\r\n            Token,\r\n            PlatformsID,\r\n            WalletTypesID,\r\n            EntryTable,\r\n        });\r\n        this.webSocket.cryptKey = Token;\r\n        result.then(() => {\r\n            this.webSocket.keepAlive();\r\n        });\r\n        return result;\r\n    }\r\n\r\n    public getTableStatus() {\r\n        return this.webSocket.send(PathName.Refresh);\r\n    }\r\n\r\n\r\n    public onMoneyNotEnough()\r\n    {\r\n        if (!PlayerInfo.getInstance().isNotEnoughMsgExist)\r\n        {\r\n            this.webSocket.onMoneyNotEnough();\r\n        }\r\n    }\r\n}\r\n","import { _decorator, Component, Button, EditBox, Label } from 'cc';\r\nimport { CourtInfo, Data, PlayerInfo } from './Data';\r\nimport { MainUI } from './MainUI';\r\nimport { MatchManager } from './MatchManager';\r\nimport { PlayerListManager } from './PlayerListManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CourtInfoManager')\r\nexport class CourtInfoManager extends Component \r\n{\r\n    @property(Button)\r\n    private btnClose: Button = null;\r\n    @property(EditBox)\r\n    private courtName: EditBox = null;\r\n\r\n    @property(Button)\r\n    private btnPlayer_a1: Button = null;\r\n    @property(Button)\r\n    private btnPlayer_a2: Button = null;\r\n    @property(Button)\r\n    private btnPlayer_b1: Button = null;\r\n    @property(Button)\r\n    private btnPlayer_b2: Button = null;\r\n\r\n    @property(Label)\r\n    private playerName_a1: Label = null;\r\n    @property(Label)\r\n    private playerName_a2: Label = null;\r\n    @property(Label)\r\n    private playerName_b1: Label = null;\r\n    @property(Label)\r\n    private playerName_b2: Label = null;\r\n\r\n    @property(Button)\r\n    private btnClear_a1: Button = null;\r\n    @property(Button)\r\n    private btnClear_a2: Button = null;\r\n    @property(Button)\r\n    private btnClear_b1: Button = null;\r\n    @property(Button)\r\n    private btnClear_b2: Button = null;\r\n\r\n    @property(Button)\r\n    private btnStart: Button = null;\r\n    @property(Button)\r\n    private btnEnd: Button = null;\r\n    @property(Button)\r\n    private btnRefresh: Button = null;\r\n    @property(Button)\r\n    private btnSet: Button = null;\r\n    @property(Label)\r\n    private nextMatchInfo: Label = null;\r\n\r\n    private editCourtIndex: number = -1;\r\n    private editPlayerIndex: number = -1;\r\n    private editBtnGroup: Button[] = [];\r\n    private nextMatchPlayers: PlayerInfo[][] = [];\r\n\r\n    private static instance: CourtInfoManager = null;\r\n    public static getInstance(): CourtInfoManager\r\n    {\r\n        return CourtInfoManager.instance;\r\n    }\r\n    \r\n    protected start() \r\n    {\r\n        CourtInfoManager.instance = this;\r\n        this.close();\r\n        this.courtInfoInit();\r\n        this.addBtnEvent();\r\n        this.init();\r\n    }\r\n\r\n    private courtInfoInit()\r\n    {\r\n        for (let i = 0; i < 2; i++)\r\n        {\r\n            const courtInfo = new CourtInfo();\r\n            const playerA1 = new PlayerInfo();\r\n            const playerA2 = new PlayerInfo();\r\n            const playerB1 = new PlayerInfo();\r\n            const playerB2 = new PlayerInfo();\r\n\r\n            courtInfo.courtName = `1-${i + 1}`;\r\n            courtInfo.index = i;\r\n            courtInfo.teamA.push(playerA1);\r\n            courtInfo.teamA.push(playerA2);\r\n            courtInfo.teamB.push(playerB1);\r\n            courtInfo.teamB.push(playerB2);\r\n            courtInfo.teamA[0] = playerA1;\r\n            courtInfo.teamA[1] = playerA2;\r\n            courtInfo.teamB[0] = playerB1;\r\n            courtInfo.teamB[1] = playerB2;\r\n            courtInfo.defaultTeamA.push(playerA1);\r\n            courtInfo.defaultTeamA.push(playerA2);\r\n            courtInfo.defaultTeamB.push(playerB1);\r\n            courtInfo.defaultTeamB.push(playerB2);\r\n            courtInfo.defaultTeamA[0] = playerA1;\r\n            courtInfo.defaultTeamA[1] = playerA2;\r\n            courtInfo.defaultTeamB[0] = playerB1;\r\n            courtInfo.defaultTeamB[1] = playerB2;\r\n\r\n            Data.courtInfoList.push(courtInfo);\r\n        }\r\n    }\r\n\r\n    private addBtnEvent()\r\n    {\r\n        this.btnClose.node.on(Button.EventType.CLICK, this.onBtnClose.bind(this));\r\n        this.btnStart.node.on(Button.EventType.CLICK, this.onBtnStart.bind(this));\r\n        this.btnRefresh.node.on(Button.EventType.CLICK, this.onBtnRefresh.bind(this));\r\n        this.btnEnd.node.on(Button.EventType.CLICK, this.onBtnEnd.bind(this));\r\n        this.btnSet.node.on(Button.EventType.CLICK, this.onBtnSet.bind(this));\r\n        this.btnPlayer_a1.node.on(Button.EventType.CLICK, () => { this.onBtnPlayer(0); });\r\n        this.btnPlayer_a2.node.on(Button.EventType.CLICK, () => { this.onBtnPlayer(1); });\r\n        this.btnPlayer_b1.node.on(Button.EventType.CLICK, () => { this.onBtnPlayer(2); });\r\n        this.btnPlayer_b2.node.on(Button.EventType.CLICK, () => { this.onBtnPlayer(3); });\r\n        this.btnClear_a1.node.on(Button.EventType.CLICK, () => { this.onBtnClear(0); });\r\n        this.btnClear_a2.node.on(Button.EventType.CLICK, () => { this.onBtnClear(1); });\r\n        this.btnClear_b1.node.on(Button.EventType.CLICK, () => { this.onBtnClear(2); });\r\n        this.btnClear_b2.node.on(Button.EventType.CLICK, () => { this.onBtnClear(3); });\r\n    }\r\n\r\n    private onBtnClose()\r\n    {\r\n        this.close();\r\n    }\r\n\r\n    private onBtnStart()\r\n    {\r\n        this.btnStart.interactable = false;\r\n        this.btnEnd.interactable = true;\r\n        this.setEditBtnGroup(false);\r\n        this.updatePlayerStatus(true);\r\n        this.updateNextMatchInfo();\r\n        MainUI.getInstance().updateCourtInfo(this.editCourtIndex);\r\n        Data.courtInfoList[this.editCourtIndex].isPlaying = true;\r\n    }\r\n\r\n    private updateNextMatchInfo() \r\n    {\r\n        this.nextMatchPlayers = MatchManager.getInstance().getNextMatchPlayers();\r\n        const playerA1 = this.nextMatchPlayers[0][0].playerName;\r\n        const playerA2 = this.nextMatchPlayers[0][1].playerName;\r\n        const playerB1 = this.nextMatchPlayers[1][0].playerName;\r\n        const playerB2 = this.nextMatchPlayers[1][1].playerName;\r\n        this.nextMatchInfo.string = `${playerA1} + ${playerA2} vs ${playerB1} + ${playerB2}`;\r\n        Data.courtInfoList[this.editCourtIndex].nextMatchInfo = this.nextMatchInfo.string;\r\n    }\r\n\r\n    private updatePlayerStatus(isPlaying: boolean) \r\n    {\r\n        const courtInfo: CourtInfo = Data.courtInfoList[this.editCourtIndex];\r\n        courtInfo.teamA[0].isPlaying = isPlaying;\r\n        courtInfo.teamA[1].isPlaying = isPlaying;\r\n        courtInfo.teamB[0].isPlaying = isPlaying;\r\n        courtInfo.teamB[1].isPlaying = isPlaying;\r\n    }\r\n\r\n    private setEditBtnGroup(enable: boolean)\r\n    {\r\n        this.editBtnGroup.forEach((btn: Button) => \r\n        {\r\n            btn.interactable = enable;\r\n        });\r\n    }\r\n\r\n    private onBtnRefresh()\r\n    {\r\n        this.updateNextMatchInfo();\r\n    }\r\n\r\n    private onBtnEnd()\r\n    {\r\n        this.btnStart.interactable = true;\r\n        this.btnEnd.interactable = false;\r\n        this.setEditBtnGroup(true);\r\n        this.updatePlayerStatus(false);\r\n        Data.courtInfoList[this.editCourtIndex].isPlaying = false;\r\n        Data.courtInfoList[this.editCourtIndex].teamA[0].completeMatchCount++;\r\n        Data.courtInfoList[this.editCourtIndex].teamA[1].completeMatchCount++;\r\n        Data.courtInfoList[this.editCourtIndex].teamB[0].completeMatchCount++;\r\n        Data.courtInfoList[this.editCourtIndex].teamB[1].completeMatchCount++;\r\n        Data.courtInfoList[this.editCourtIndex].teamA = Data.courtInfoList[this.editCourtIndex].defaultTeamA;\r\n        Data.courtInfoList[this.editCourtIndex].teamB = Data.courtInfoList[this.editCourtIndex].defaultTeamB;\r\n        MainUI.getInstance().updateCourtInfo(this.editCourtIndex);\r\n        for (let i = 0; i < 4; i++)\r\n        {\r\n            this.onBtnClear(i);\r\n        }\r\n    }\r\n\r\n    private onBtnSet()\r\n    {\r\n        this.editPlayerIndex = 0;\r\n        this.setNewPlayer(this.nextMatchPlayers[0][0]);\r\n        this.editPlayerIndex = 1;\r\n        this.setNewPlayer(this.nextMatchPlayers[0][1]);\r\n        this.editPlayerIndex = 2;\r\n        this.setNewPlayer(this.nextMatchPlayers[1][0]);\r\n        this.editPlayerIndex = 3;\r\n        this.setNewPlayer(this.nextMatchPlayers[1][1]);\r\n    }\r\n\r\n    private onBtnPlayer(editPlayerIndex: number)\r\n    {\r\n        this.editPlayerIndex = editPlayerIndex;\r\n        PlayerListManager.getInstance().open(true);\r\n    }\r\n\r\n    private onBtnClear(editPlayerIndex: number)\r\n    {\r\n        this.editPlayerIndex = editPlayerIndex;\r\n        let defaultPlayer: PlayerInfo = null;\r\n        switch (editPlayerIndex) \r\n        {\r\n            case 0:\r\n                defaultPlayer = Data.courtInfoList[this.editCourtIndex].defaultTeamA[0];\r\n                break;\r\n            case 1:\r\n                defaultPlayer = Data.courtInfoList[this.editCourtIndex].defaultTeamA[1];\r\n                break;\r\n            case 2:\r\n                defaultPlayer = Data.courtInfoList[this.editCourtIndex].defaultTeamB[0];\r\n                break;\r\n            case 3:\r\n                defaultPlayer = Data.courtInfoList[this.editCourtIndex].defaultTeamB[1];\r\n                break;\r\n        }\r\n        this.setNewPlayer(defaultPlayer);\r\n    }\r\n\r\n    public setNewPlayer(playerInfo: PlayerInfo)\r\n    {\r\n        switch (this.editPlayerIndex)\r\n        {\r\n            case 0:\r\n                Data.courtInfoList[this.editCourtIndex].teamA[0].isPlaying = false;\r\n                Data.courtInfoList[this.editCourtIndex].teamA[0] = playerInfo;\r\n                this.playerName_a1.string = playerInfo.playerName;\r\n                break;\r\n            case 1:\r\n                Data.courtInfoList[this.editCourtIndex].teamA[1].isPlaying = false;\r\n                Data.courtInfoList[this.editCourtIndex].teamA[1] = playerInfo;\r\n                this.playerName_a2.string = playerInfo.playerName;\r\n                break;\r\n            case 2:\r\n                Data.courtInfoList[this.editCourtIndex].teamB[0].isPlaying = false;\r\n                Data.courtInfoList[this.editCourtIndex].teamB[0] = playerInfo;\r\n                this.playerName_b1.string = playerInfo.playerName;\r\n                break;\r\n            case 3:\r\n                Data.courtInfoList[this.editCourtIndex].teamB[1].isPlaying = false;\r\n                Data.courtInfoList[this.editCourtIndex].teamB[1] = playerInfo;\r\n                this.playerName_b2.string = playerInfo.playerName;\r\n                break;\r\n        }\r\n    }\r\n\r\n    private init()\r\n    {\r\n        this.btnEnd.interactable = false;\r\n        this.editBtnGroup.push(this.btnPlayer_a1);\r\n        this.editBtnGroup.push(this.btnPlayer_a2);\r\n        this.editBtnGroup.push(this.btnPlayer_b1);\r\n        this.editBtnGroup.push(this.btnPlayer_b2);\r\n        this.editBtnGroup.push(this.btnClear_a1);\r\n        this.editBtnGroup.push(this.btnClear_a2);\r\n        this.editBtnGroup.push(this.btnClear_b1);\r\n        this.editBtnGroup.push(this.btnClear_b2);\r\n        this.editBtnGroup.push(this.btnSet);\r\n        MainUI.getInstance().updateCourtInfo(0);\r\n        MainUI.getInstance().updateCourtInfo(1);\r\n        this.nextMatchInfo.string = \"\";\r\n    }\r\n\r\n    public open(courtIndex: number)\r\n    {\r\n        const isPlaying: boolean = Data.courtInfoList[courtIndex].isPlaying;\r\n        this.node.active = true;\r\n        this.editCourtIndex = courtIndex;\r\n        this.setCoutInfo(courtIndex);\r\n        this.setEditBtnGroup(!isPlaying);\r\n        this.btnStart.interactable = !isPlaying;\r\n        this.btnEnd.interactable = isPlaying;\r\n        PlayerListManager.getInstance().isEditCourtMode = true;\r\n    }\r\n\r\n    public close()\r\n    {\r\n        this.node.active = false;\r\n        if (PlayerListManager.getInstance())\r\n        {\r\n            PlayerListManager.getInstance().isEditCourtMode = false;\r\n        }\r\n    }\r\n\r\n    private setCoutInfo(courtIndex: number)\r\n    {\r\n        const courtInfo: CourtInfo = Data.courtInfoList[courtIndex];\r\n        this.courtName.string = courtInfo.courtName;\r\n        this.playerName_a1.string = courtInfo.teamA[0].playerName;\r\n        this.playerName_a2.string = courtInfo.teamA[1].playerName;\r\n        this.playerName_b1.string = courtInfo.teamB[0].playerName;\r\n        this.playerName_b2.string = courtInfo.teamB[1].playerName;\r\n        this.nextMatchInfo.string = Data.courtInfoList[this.editCourtIndex].nextMatchInfo;\r\n    }\r\n}\r\n","import { error } from 'cc';\r\nimport CryptoJS from 'crypto-js';\r\n\r\n/**\r\n * 加解密工具\r\n */\r\nexport default class Cryptor {\r\n    private _key: string = '';\r\n    private _backupKey: string = '';\r\n\r\n    public set key(rawKey: string) {\r\n        this._backupKey = this._key;\r\n        this._key = rawKey.repeat(Math.ceil(this.validKeyLength / rawKey.length)).substring(0, this.validKeyLength);\r\n    }\r\n\r\n    constructor(key: string, private validKeyLength: number) {\r\n        this.key = key;\r\n    }\r\n\r\n    public encrypt(plainText: string): string {\r\n        return CryptoJS.AES.encrypt(plainText, CryptoJS.enc.Utf8.parse(this._key), {\r\n            mode: CryptoJS.mode.ECB,\r\n            padding: CryptoJS.pad.Pkcs7,\r\n        }).toString();\r\n    }\r\n\r\n    public decrypt(cipherText: string): string {\r\n        let plainText: string = '';\r\n        try {\r\n            plainText = CryptoJS.AES.decrypt(cipherText, CryptoJS.enc.Utf8.parse(this._key), {\r\n                mode: CryptoJS.mode.ECB,\r\n                padding: CryptoJS.pad.Pkcs7,\r\n            }).toString(CryptoJS.enc.Utf8);\r\n        } catch (err: any) {\r\n            error(err);\r\n        }\r\n\r\n        // use backup key\r\n        if (plainText === '') {\r\n            plainText = CryptoJS.AES.decrypt(cipherText, CryptoJS.enc.Utf8.parse(this._backupKey), {\r\n                mode: CryptoJS.mode.ECB,\r\n                padding: CryptoJS.pad.Pkcs7,\r\n            }).toString(CryptoJS.enc.Utf8);\r\n        }\r\n        return plainText;\r\n    }\r\n\r\n    public getSHA256Hash(text: string): string {\r\n        return CryptoJS.SHA256(text).toString();\r\n    }\r\n}\r\n","// eslint-disable-next-line max-classes-per-file\r\nimport { Button, Vec3, _decorator, __private } from 'cc';\r\nimport { EDITOR } from 'cc/env';\r\nimport HSLSprite from './HSLSprite';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CustomButtonStatus')\r\nclass CustomButtonStatus {\r\n    @property(Vec3)\r\n    hsl = Vec3.ZERO.clone();\r\n    @property(Vec3)\r\n    scale = Vec3.ONE.clone();\r\n\r\n    constructor();\r\n    constructor(hsl?: Vec3, scale?: Vec3);\r\n    constructor(hsl?: Vec3, scale?: Vec3) {\r\n        this.hsl = hsl ?? Vec3.ZERO.clone();\r\n        this.scale = scale ?? Vec3.ONE.clone();\r\n    }\r\n\r\n    public equal(status: CustomButtonStatus) {\r\n        return this.hsl.equals(status.hsl) && this.scale.equals(status.scale);\r\n    }\r\n\r\n    public static lerp(out: CustomButtonStatus, from: CustomButtonStatus, to: CustomButtonStatus, ratio: number): void {\r\n        Vec3.lerp(out.hsl, from.hsl, to.hsl, ratio);\r\n        Vec3.lerp(out.scale, from.scale, to.scale, ratio);\r\n    }\r\n}\r\n\r\nconst tempStatus = new CustomButtonStatus();\r\n\r\n@ccclass('CustomButton')\r\nexport default class CustomButton extends Button {\r\n    @property(CustomButtonStatus)\r\n    private _normalStatus: CustomButtonStatus = new CustomButtonStatus();\r\n\r\n    @property(CustomButtonStatus)\r\n    private _pressedStatus: CustomButtonStatus = new CustomButtonStatus();\r\n\r\n    @property(CustomButtonStatus)\r\n    private _hoverStatus: CustomButtonStatus = new CustomButtonStatus();\r\n\r\n    @property(CustomButtonStatus)\r\n    private _disabledStatus: CustomButtonStatus = new CustomButtonStatus();\r\n\r\n    @property\r\n    get transitionDuration() {\r\n        return this._duration;\r\n    }\r\n    set transitionDuration(value) {\r\n        if (this._duration === value) {\r\n            return;\r\n        }\r\n        this._duration = value;\r\n    }\r\n\r\n    @property({ override: true, visible: false })\r\n    public set transition(_: __private._cocos_ui_button__Transition) {}\r\n    public get transition() {\r\n        return this._transition;\r\n    }\r\n\r\n    @property(CustomButtonStatus)\r\n    public get normalStatus() {\r\n        return this._normalStatus;\r\n    }\r\n    public set normalStatus(value: CustomButtonStatus) {\r\n        if (this._normalStatus?.equal(value)) {\r\n            return;\r\n        }\r\n        this._normalStatus = value;\r\n        this._updateState();\r\n    }\r\n\r\n    @property(CustomButtonStatus)\r\n    public get pressedStatus(): CustomButtonStatus {\r\n        return this._pressedStatus;\r\n    }\r\n    public set pressedStatus(value: CustomButtonStatus) {\r\n        if (this._pressedStatus.equal(value)) {\r\n            return;\r\n        }\r\n        this._pressedStatus = value;\r\n    }\r\n\r\n    @property(CustomButtonStatus)\r\n    public get hoverStatus(): CustomButtonStatus {\r\n        return this._hoverStatus;\r\n    }\r\n    public set hoverStatus(value: CustomButtonStatus) {\r\n        if (this._hoverStatus.equal(value)) {\r\n            return;\r\n        }\r\n        this._hoverStatus = value;\r\n    }\r\n\r\n    @property(CustomButtonStatus)\r\n    public get disabledStatus(): CustomButtonStatus {\r\n        return this._disabledStatus;\r\n    }\r\n    public set disabledStatus(value: CustomButtonStatus) {\r\n        if (this._disabledStatus.equal(value)) {\r\n            return;\r\n        }\r\n        this._disabledStatus = value;\r\n        this._updateState();\r\n    }\r\n\r\n    private _hslSprite: HSLSprite = null;\r\n\r\n    private _transitionFinished = true;\r\n    private _time = 0;\r\n    private _pressed = false;\r\n    private _hovered = false;\r\n    private _fromStatus: CustomButtonStatus = new CustomButtonStatus();\r\n    private _toStatus: CustomButtonStatus = new CustomButtonStatus();\r\n\r\n    get interactable() {\r\n        return this._interactable;\r\n    }\r\n\r\n    set interactable(value) {\r\n        this._interactable = value;\r\n        this._updateState();\r\n\r\n        if (!this._interactable) {\r\n            this._pressed = false;\r\n            this._hovered = false;\r\n        }\r\n    }\r\n\r\n    public update(dt: number) {\r\n        if (this._transitionFinished || !this.target || this._fromStatus.equal(this._toStatus)) {\r\n            return;\r\n        }\r\n        const hslAdjustor = this.target.getComponent(HSLSprite);\r\n        if (!hslAdjustor) {\r\n            return;\r\n        }\r\n\r\n        this._time += dt;\r\n        let ratio = 1.0;\r\n        if (this._duration > 0) {\r\n            ratio = this._time / this._duration;\r\n        }\r\n\r\n        if (ratio >= 1) {\r\n            ratio = 1;\r\n        }\r\n\r\n        CustomButtonStatus.lerp(tempStatus, this._fromStatus, this._toStatus, ratio);\r\n        this.applyButtonStatus(tempStatus);\r\n\r\n        if (ratio === 1) {\r\n            this._transitionFinished = true;\r\n        }\r\n    }\r\n\r\n    protected _applyTarget() {\r\n        if (this.target) {\r\n            super._applyTarget();\r\n            this._hslSprite = this.target.getComponent(HSLSprite);\r\n        }\r\n    }\r\n\r\n    protected _resetState() {\r\n        super._resetState();\r\n        this.applyButtonStatus(this._interactable ? this._normalStatus : this._disabledStatus);\r\n    }\r\n\r\n    protected _applyTransition(state: string) {\r\n        this._updateCustomTransition(state);\r\n    }\r\n\r\n    protected _updateCustomTransition(state: string) {\r\n        if (!this._hslSprite) {\r\n            return;\r\n        }\r\n\r\n        if (EDITOR) {\r\n            this.applyButtonStatus(this[`${state}Status`]);\r\n        } else {\r\n            this._fromStatus = new CustomButtonStatus(this._hslSprite.hsl, this.target.getScale());\r\n            this._toStatus = this[`${state}Status`];\r\n            this._time = 0;\r\n            this._transitionFinished = false;\r\n        }\r\n    }\r\n\r\n    private applyButtonStatus(status: CustomButtonStatus) {\r\n        if (!this.target) {\r\n            return;\r\n        }\r\n        if (!this._hslSprite) {\r\n            return;\r\n        }\r\n\r\n        // HSL\r\n        this._hslSprite.hsl = status.hsl;\r\n\r\n        // scale\r\n        this.target.setScale(status.scale);\r\n    }\r\n}\r\n","import { _decorator } from \"cc\";\r\n\r\nconst { ccclass } = _decorator;\r\n@ccclass('Data')\r\nexport class Data\r\n{\r\n    public static playerInfoList: PlayerInfo[] = [];\r\n    public static courtInfoList: CourtInfo[] = [];\r\n}\r\n\r\nexport class PlayerInfo\r\n{\r\n    public playerName: string = \"\";\r\n    public playerAbility: number = 1;\r\n    public isPlaying: boolean = false;\r\n    public completeMatchCount: number = 0;\r\n}\r\n\r\nexport class CourtInfo\r\n{\r\n    public index: number = 0;\r\n    public courtName: string = \"\";\r\n    public isPlaying: boolean = false;\r\n    public nextMatchInfo: string = \"\";\r\n    public teamA: PlayerInfo[] = [];\r\n    public teamB: PlayerInfo[] = [];\r\n    public defaultTeamA: PlayerInfo[] = [];\r\n    public defaultTeamB: PlayerInfo[] = [];\r\n}\r\n","export enum DebugMode \r\n{\r\n    None,\r\n    SpecifyWinOrLose,\r\n    SpecifyResult,\r\n}\r\n\r\nexport class DebugRequestData\r\n{\r\n    Mode: DebugMode;\r\n    Rank: number;\r\n    Win: boolean;\r\n};\r\n","import { Component } from 'cc';\r\n\r\nnamespace Delay {\r\n    const component = new Component();\r\n    /**\r\n     * 過了特定時間後，會 fullfill的 promise\r\n     * @param millisecond 指定時間\r\n     */\r\n    export function resolve(millisecond: number): Promise<void> {\r\n        return new Promise<void>((resolveFunc) => {\r\n            component.scheduleOnce(() => {\r\n                resolveFunc();\r\n            }, millisecond / 1000);\r\n        });\r\n    }\r\n    /**\r\n     * 過了特定時間後，會 reject並且回傳指定錯誤原因的 promise\r\n     * @param millisecond 指定時間\r\n     * @param reason 指定錯誤原因\r\n     * @returns\r\n     */\r\n    export function reject<T>(millisecond: number, reason: any): Promise<T> {\r\n        return new Promise<T>((_, rejectFunc) => {\r\n            component.scheduleOnce(() => rejectFunc(reason), millisecond / 1000);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 過了特定時間後，會 fullfill並且回傳指定值的 promise\r\n     * @param millisecond 指定時間\r\n     * @param resolveValue 指定回傳值\r\n     * @returns\r\n     */\r\n    export function value<T>(millisecond: number, resolveValue: T): Promise<T> {\r\n        return new Promise<T>((resolveFunc) => {\r\n            component.scheduleOnce(() => resolveFunc(resolveValue), millisecond / 1000);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 永遠不會 fullfill的 promise\r\n     */\r\n    export function forever(): Promise<never> {\r\n        return new Promise<never>(() => {});\r\n    }\r\n}\r\n\r\nexport default Delay;\r\n","import { StartUp } from \"../StartUp\";\r\nimport { PlayerInfo } from \"../PlayerInfo\";\r\n\r\nexport default class DenomConverter {\r\n    public static valueToDollar(value: number) {\r\n        return value / PlayerInfo.getInstance().getDenom();\r\n    }\r\n}\r\n","import { Button, _decorator } from 'cc';\r\nimport Page from './Page';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nenum DialogEventType {\r\n    Confirm = 'Confirm',\r\n    Cancel = 'Cancel',\r\n}\r\n\r\n@ccclass('Dialog')\r\nexport default class Dialog extends Page {\r\n    public static readonly EventType = Object.assign(DialogEventType, Page.EventType);\r\n\r\n    @property(Button)\r\n    public readonly confirmButton: Button = null;\r\n\r\n    @property(Button)\r\n    public readonly cancelButton: Button = null;\r\n\r\n    @property\r\n    private readonly closeOnConfirm = true;\r\n\r\n    @property\r\n    private readonly closeOnCancel = true;\r\n\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n        this.confirmButton.node.on(Button.EventType.CLICK, () => {\r\n            this.onConfirmButtonClick();\r\n        });\r\n        this.cancelButton?.node.on(Button.EventType.CLICK, () => {\r\n            this.onCancelButtonClick();\r\n        });\r\n    }\r\n\r\n    public waitForComfirm() {\r\n        return new Promise((resolve) => {\r\n            this.node.once(Dialog.EventType.Confirm, resolve);\r\n        });\r\n    }\r\n\r\n    public waitForCancel() {\r\n        return new Promise((resolve) => {\r\n            this.node.once(Dialog.EventType.Cancel, resolve);\r\n        });\r\n    }\r\n\r\n    protected onConfirmButtonClick() {\r\n        this.node.emit(Dialog.EventType.Confirm);\r\n        if (this.closeOnConfirm) {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    protected onCancelButtonClick() {\r\n        this.node.emit(Dialog.EventType.Cancel);\r\n        if (this.closeOnCancel) {\r\n            this.close();\r\n        }\r\n    }\r\n}\r\n","import { error, log, sys } from 'cc';\r\nimport Cryptor from './Cryptor';\r\nimport ErrorHandler from '../../ErrorHandler/ErrorHandler';\r\nimport { PathName, PublishDataType, RequestResponseDataType } from '../../Data/Config/path.config';\r\nimport { CustomErrorName } from '../../ErrorHandler/Config/error.config';\r\nimport Delay from '../../Toolkit/Utils/Delay';\r\n\r\n/** Native websocket with additional functionalities\r\n * 1. request/response simulation (with type)\r\n * 2. subscribe/unsubscribe to specific path\r\n * 3. auto reconnection\r\n * 4. timeout tracking\r\n * */\r\nexport default class EnhancedWebSocket {\r\n    public static readonly DEFAULT_TIMEOUT = 10000;\r\n    public static readonly DEFAULT_DELAY = 500;\r\n    private static readonly KEEP_ALIVE_INTERVAL = 1000;\r\n\r\n    private websocket: WebSocket = null;\r\n    private messageDispatcher: {\r\n        [path in keyof RequestResponseDataType]?: [(message: RequestResponseDataType[path][1]) => void, (reason?: any) => void][];\r\n    } = {};\r\n    private messageBroadcaster: {\r\n        [path in keyof PublishDataType]?: ((message: PublishDataType[path]) => void)[];\r\n    } = {};\r\n    private errorBoardcaster: {\r\n        [path in keyof PublishDataType]?: ((error: string) => boolean)[];\r\n    } = {};\r\n    private readonly needEncrypt: boolean = false;\r\n    private expectedErrorMessages: {\r\n        [path in keyof PublishDataType]?: string[];\r\n    } = {};\r\n\r\n    // callback\r\n    public onDisconnected: () => void = null;\r\n\r\n    private previousDelays: number[] = [];\r\n\r\n    public blockDisconnectedMessage: boolean = false;\r\n\r\n    public set cryptKey(key: string) {\r\n        if (!this.cryptor) {\r\n            return;\r\n        }\r\n        this.cryptor.key = key;\r\n    }\r\n\r\n    public get averageDelay() {\r\n        if (!this.previousDelays.length) {\r\n            return EnhancedWebSocket.DEFAULT_DELAY;\r\n        }\r\n        return this.previousDelays.reduce((pre, cur) => pre + cur, 0) / this.previousDelays.length;\r\n    }\r\n\r\n    constructor(private readonly url: string | URL, private readonly cryptor: Cryptor) {\r\n        this.needEncrypt = !!cryptor;\r\n    }\r\n\r\n    public setExceptedErrorMessages<T extends keyof PublishDataType>(path: T, errorMessages: string[]) {\r\n        this.expectedErrorMessages[path] = errorMessages;\r\n    }\r\n\r\n    public connect() {\r\n        let connectSuccessfully = false;\r\n        this.websocket = new WebSocket(this.url);\r\n        const connectionPromise = new Promise<void>((resolve) => {\r\n            this.websocket.onopen = () => {\r\n                connectSuccessfully = true;\r\n                log('Connection start successfully');\r\n                resolve();\r\n            };\r\n        });\r\n        this.websocket.onmessage = (event: MessageEvent) => {\r\n            const receiveData = JSON.parse(event.data);\r\n            const decryptData: {\r\n                Path: PathName;\r\n                Data: any;\r\n                Err: string;\r\n            } = receiveData instanceof Object ? receiveData : JSON.parse(this.cryptor.decrypt(receiveData));\r\n            const { Path, Data, Err } = decryptData;\r\n\r\n            if (Err) {\r\n                const reject: (reason?: any) => void = this.messageDispatcher[Path]?.shift()?.[1];\r\n                if (reject) {\r\n                    reject(Err);\r\n                } else if (this.expectedErrorMessages[Path]?.includes(Err)) {\r\n                    if (this.errorBoardcaster[Path]?.every((notify: (error: string) => boolean) => !notify(Err))) {\r\n                        this.handleCustomError(new Error(Err));\r\n                    }\r\n                } else {\r\n                    this.handleCustomError(new Error(Err));\r\n                }\r\n                return;\r\n            }\r\n            // response\r\n            this.messageDispatcher[Path]?.shift()?.[0](Data);\r\n            // boardcast\r\n            this.messageBroadcaster[Path]?.forEach((notify) => notify(Data));\r\n        };\r\n        this.websocket.onerror = error;\r\n        this.websocket.onclose = async () => {\r\n            if (!connectSuccessfully)\r\n            {\r\n                this.showDisconnectMsg();\r\n            }\r\n            this.informNetworkDisconnecting();\r\n            log('Connection closed');\r\n        };\r\n        return connectionPromise;\r\n    }\r\n\r\n    /**\r\n     * 發送請求並等待回傳資料\r\n     * @param path 路徑\r\n     * @param postData 指定路徑的附帶資訊\r\n     * @param expectedErrorMessages 預期會有的錯誤訊息\r\n     * @param timeout 等待server回應最大容忍時間, -1 表示不使用timeout機制\r\n     * @returns 指定路徑的回傳資料\r\n     */\r\n    public async send<T extends keyof RequestResponseDataType>(\r\n        path: T,\r\n        postData?: RequestResponseDataType[T][0],\r\n        expectedErrorMessages: CustomErrorName[] = [],\r\n        timeout = EnhancedWebSocket.DEFAULT_TIMEOUT\r\n    ): Promise<RequestResponseDataType[T][1]> {\r\n        if (timeout < 0 && timeout !== -1) {\r\n            throw new Error('Invalid timeout');\r\n        }\r\n        // 連線狀態為開啟才能傳送訊息\r\n        if (this.websocket.readyState !== WebSocket.OPEN) {\r\n            if (!this.blockDisconnectedMessage) \r\n            {\r\n                this.showDisconnectMsg();\r\n            }\r\n            return Delay.forever();\r\n        }\r\n        const result = Object.assign({ Path: path }, postData ? { Data: postData } : {});\r\n        const encryptResult = this.needEncrypt ? this.cryptor.encrypt(JSON.stringify(result)) : result;\r\n        this.websocket.send(JSON.stringify(encryptResult));\r\n\r\n        return Promise.race([\r\n            new Promise<RequestResponseDataType[T][1]>((resolve, reject) => {\r\n                const dispatcher = this.messageDispatcher[path] || (this.messageDispatcher[path] = []);\r\n                dispatcher.push([resolve, reject]);\r\n            }),\r\n            timeout === -1 ? Delay.forever() : Delay.reject<RequestResponseDataType[T][1]>(timeout, CustomErrorName.TIMEOUT),\r\n        ]).catch((reason) => {\r\n            if (expectedErrorMessages.includes(reason)) {\r\n                throw reason;\r\n            }\r\n            if (reason === CustomErrorName.TIMEOUT) {\r\n                error(`timeout at path ${path}`);\r\n                if (!this.blockDisconnectedMessage) \r\n                {\r\n                    this.showDisconnectMsg();\r\n                }\r\n            } else {\r\n                this.handleCustomError(reason);\r\n            }\r\n            return Delay.forever();\r\n        });\r\n    }\r\n\r\n    private showDisconnectMsg()\r\n    {\r\n        const isIos: boolean = sys.os == sys.OS.IOS;\r\n        const errorMsg: string = isIos ? CustomErrorName.OPERATE_TIMEOUT : CustomErrorName.CONNECTION_FAILED;\r\n        this.handleCustomError(errorMsg);\r\n    }\r\n\r\n    public onMoneyNotEnough()\r\n    {\r\n        this.handleCustomError(\"insufficient balance\");\r\n    }\r\n\r\n    /**\r\n     * 訂閱特定路徑的資料\r\n     * @param path 路徑\r\n     * @param notify 通知資料送達用的 callback\r\n     */\r\n    public subscribe<T extends keyof PublishDataType>(path: T, notify: (data: PublishDataType[T]) => void) {\r\n        let subscriberQueue = this.messageBroadcaster[path];\r\n        if (!subscriberQueue) {\r\n            subscriberQueue = [];\r\n            this.messageBroadcaster[path] = subscriberQueue;\r\n        }\r\n        subscriberQueue.push(notify);\r\n    }\r\n\r\n    /**\r\n     * 取消訂閱特定路徑的資料\r\n     * @param path 路徑\r\n     * @param notify 通知資料送達用的 callback\r\n     */\r\n    public unsubscribe<T extends keyof PublishDataType>(path: T, notify: (data: PublishDataType[T]) => void) {\r\n        let subscriberQueue = this.messageBroadcaster[path];\r\n        if (!subscriberQueue) {\r\n            subscriberQueue = [];\r\n            this.messageBroadcaster[path] = subscriberQueue;\r\n        }\r\n        const handlerIndex = subscriberQueue.findIndex((subscriber) => subscriber === notify);\r\n        if (handlerIndex !== -1) {\r\n            subscriberQueue.splice(handlerIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 訂閱特定路徑的資料\r\n     * @param path 路徑\r\n     * @param notify 通知資料送達用的 callback\r\n     */\r\n    public subscribeError<T extends keyof PublishDataType>(path: T, notify: (errorMessage: string) => boolean) {\r\n        let subscriberQueue = this.errorBoardcaster[path];\r\n        if (!subscriberQueue) {\r\n            subscriberQueue = [];\r\n            this.errorBoardcaster[path] = subscriberQueue;\r\n        }\r\n        subscriberQueue.push(notify);\r\n    }\r\n\r\n    /**\r\n     * 取消訂閱特定路徑的資料\r\n     * @param path 路徑\r\n     * @param notify 通知資料送達用的 callback\r\n     */\r\n    public unsubscribeError<T extends keyof PublishDataType>(path: T, notify: (errorMessage: string) => boolean) {\r\n        let subscriberQueue = this.errorBoardcaster[path];\r\n        if (!subscriberQueue) {\r\n            subscriberQueue = [];\r\n            this.errorBoardcaster[path] = subscriberQueue;\r\n        }\r\n        const handlerIndex = subscriberQueue.findIndex((subscriber) => subscriber === notify);\r\n        if (handlerIndex !== -1) {\r\n            subscriberQueue.splice(handlerIndex, 1);\r\n        }\r\n    }\r\n\r\n    public async keepAlive() {\r\n        const requestTime = Date.now();\r\n        await this.send(PathName.Ack, undefined, [], EnhancedWebSocket.DEFAULT_TIMEOUT + this.averageDelay);\r\n        this.previousDelays.push(Date.now() - requestTime);\r\n        if (this.previousDelays.length > 5) {\r\n            this.previousDelays.shift();\r\n        }\r\n        await Delay.resolve(EnhancedWebSocket.KEEP_ALIVE_INTERVAL);\r\n        this.keepAlive();\r\n    }\r\n\r\n    private informNetworkDisconnecting() {\r\n        this.onDisconnected?.();\r\n        this.onDisconnected = null;\r\n    }\r\n\r\n    /**\r\n     * try to handle error, if error is fatal then close the connection\r\n     * @param err error object\r\n     */\r\n    private handleCustomError(err: Error): void;\r\n    /**\r\n     * try to handle error, if error is fatal then close the connection\r\n     * @param message  error message\r\n     */\r\n    private handleCustomError(message: string): void;\r\n    private handleCustomError(arg: Error | string) {\r\n        if (arg instanceof Error && ErrorHandler.Instance.handle(arg)) {\r\n            return;\r\n        }\r\n        if (typeof arg === 'string' && ErrorHandler.Instance.handle(arg)) {\r\n            return;\r\n        }\r\n        if (this.websocket.readyState === WebSocket.CLOSED || this.websocket.readyState === WebSocket.CLOSING) {\r\n            return;\r\n        }\r\n        this.websocket.close();\r\n        // onclose event will not be triggered immediately so here informNetworkDisconnecting is invoked manually\r\n        this.informNetworkDisconnecting();\r\n    }\r\n}\r\n","export namespace ErrorUtils {\r\n    export function findErrorBy(name: string): ICustomError;\r\n    export function findErrorBy(code: number): ICustomError;\r\n    export function findErrorBy(arg: string | number): ICustomError {\r\n        if (typeof arg === 'number') {\r\n            return errorList.find((error) => error.code === arg);\r\n        }\r\n        return errorList.find((error) => error.name === arg);\r\n    }\r\n}\r\n\r\nexport enum CustomErrorName {\r\n    OPERATE_TIMEOUT = 'operate timeout',\r\n    CONNECTION_TIMEOUT = 'connection timeout',\r\n    FRONT_END_ERROR = 'front end error',\r\n    CONNECTION_FAILED = 'connection failed',\r\n    LOADING_FAILED = 'loading failed',\r\n    TIMEOUT = 'connection timeout',\r\n    GAME_PAUSE = '遊戲暫停',\r\n    ROUND_CANCEL = '該局取消',\r\n\r\n    BET_LIMIT_EXCEED = 'bet exceed bet limit',\r\n    TABLE_LIMIT_EXCEED = 'bet exceed table limit',\r\n    INSUFFICIENT_BALANCE = 'insufficient balance',\r\n    TABLE_IS_FULL = 'table is full',\r\n}\r\n\r\ntype ICustomError = {\r\n    name: string;\r\n    code: number;\r\n    type: 'GameState' | 'Fatal' | 'Hint' | 'Ignore';\r\n};\r\n\r\nconst errorList: ICustomError[] = [\r\n    // front end\r\n    {\r\n        name: CustomErrorName.FRONT_END_ERROR,\r\n        code: 1000,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: CustomErrorName.CONNECTION_FAILED,\r\n        code: 1001,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: CustomErrorName.LOADING_FAILED,\r\n        code: 1002,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: CustomErrorName.OPERATE_TIMEOUT,\r\n        code: 1003,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: CustomErrorName.GAME_PAUSE,\r\n        code: 1098,\r\n        type: 'GameState',\r\n    },\r\n    {\r\n        name: CustomErrorName.ROUND_CANCEL,\r\n        code: 1099,\r\n        type: 'Hint',\r\n    },\r\n    // common\r\n    {\r\n        name: 'authorization failed',\r\n        code: 2001,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'update betting failed',\r\n        code: 2002,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'no table found',\r\n        code: 2003,\r\n        type: 'Hint',\r\n    },\r\n    {\r\n        name: 'hall not found',\r\n        code: 2004,\r\n        type: 'Hint',\r\n    },\r\n    {\r\n        name: 'table is full',\r\n        code: 2005,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'client already exist',\r\n        code: 2006,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'table is not empty',\r\n        code: 2007,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'entry table failed',\r\n        code: 2008,\r\n        type: 'Hint',\r\n    },\r\n    {\r\n        name: 'player already in the table',\r\n        code: 2009,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'operate not allow',\r\n        code: 2010,\r\n        type: 'Ignore',\r\n    },\r\n    {\r\n        name: CustomErrorName.INSUFFICIENT_BALANCE,\r\n        code: 2011,\r\n        type: 'Hint',\r\n    },\r\n    {\r\n        name: 'client not exist',\r\n        code: 2012,\r\n        type: 'Ignore',\r\n    },\r\n    {\r\n        name: 'table is closed',\r\n        code: 2013,\r\n        type: 'Hint',\r\n    },\r\n    {\r\n        name: 'client is closing',\r\n        code: 2014,\r\n        type: 'Ignore',\r\n    },\r\n    {\r\n        name: 'client is closed',\r\n        code: 2015,\r\n        type: 'Ignore',\r\n    },\r\n    {\r\n        name: 'client message chan is full',\r\n        code: 2016,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'serialize data failed',\r\n        code: 2017,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'parse body failed',\r\n        code: 2018,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'validate body failed',\r\n        code: 2019,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'internal server error',\r\n        code: 2020,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'during game maintenance',\r\n        code: 2021,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'call backend error',\r\n        code: 2022,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'request should be encrypted',\r\n        code: 2023,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'wrong token, please login again',\r\n        code: 2024,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'game not found',\r\n        code: 2025,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'parse json error',\r\n        code: 2026,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'redis internal error',\r\n        code: 2027,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'operate not allow',\r\n        code: 2028,\r\n        type: 'Fatal',\r\n    },\r\n    // error code\r\n    {\r\n        name: '3000',\r\n        code: 3301,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: '3001',\r\n        code: 3302,\r\n        type: 'Hint',\r\n    },\r\n    {\r\n        name: '3002',\r\n        code: 3303,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: '3003',\r\n        code: 3304,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: '4000',\r\n        code: 3305,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: '4001',\r\n        code: 3306,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: '4002',\r\n        code: 3307,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: '4006',\r\n        code: 3308,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: '5000',\r\n        code: 3309,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: '5001',\r\n        code: 3310,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: '-1000',\r\n        code: 3311,\r\n        type: 'Ignore',\r\n    },\r\n    {\r\n        name: 'idle for too long',\r\n        code: null,\r\n        type: 'Fatal',\r\n    },\r\n    // sicbo\r\n    {\r\n        name: 'dice shaker operator error',\r\n        code: 2100,\r\n        type: 'GameState',\r\n    },\r\n    {\r\n        name: 'dice shaker query error',\r\n        code: 2101,\r\n        type: 'GameState',\r\n    },\r\n    {\r\n        name: 'config incompatible for game',\r\n        code: 2102,\r\n        type: 'Fatal',\r\n    },\r\n    {\r\n        name: 'banker not found in the queue',\r\n        code: 2103,\r\n        type: 'Hint',\r\n    },\r\n    {\r\n        name: 'dice results are not available',\r\n        code: 2108,\r\n        type: 'Hint',\r\n    },\r\n    {\r\n        name: 'game stopped',\r\n        code: 2109,\r\n        type: 'Hint',\r\n    },\r\n    {\r\n        name: CustomErrorName.BET_LIMIT_EXCEED,\r\n        code: 2110,\r\n        type: 'Hint',\r\n    },\r\n    {\r\n        name: CustomErrorName.TABLE_LIMIT_EXCEED,\r\n        code: 2111,\r\n        type: 'Hint',\r\n    },\r\n];\r\n","import { error } from 'cc';\r\nimport { StartUp } from '../Game/StartUp';\r\nimport { CustomErrorName, ErrorUtils } from './Config/error.config';\r\n\r\nexport default class ErrorHandler {\r\n    private static instance: ErrorHandler = null;\r\n\r\n    public static get Instance() {\r\n        if (!this.instance) {\r\n            this.instance = new ErrorHandler();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private constructor() {\r\n        window.addEventListener('error', (event) => {\r\n            error(event.message);\r\n            this.handle(CustomErrorName.FRONT_END_ERROR);\r\n        });\r\n    }\r\n\r\n    public handle(error: Error): boolean;\r\n    public handle(errorMessage: string): boolean;\r\n    public handle(arg: Error | string): boolean {\r\n        const message = arg instanceof Error ? arg.message : arg;\r\n        const customError = ErrorUtils.findErrorBy(message);\r\n        if (!customError) {\r\n            // Game.Instance.message.showFatalError(message);\r\n            error(`Unknown error: ${message}`);\r\n            return false;\r\n        }\r\n        switch (customError.type) {\r\n            case 'GameState':\r\n                StartUp.getInstance().message.showGameStateError(customError.name);\r\n                return true;\r\n            case 'Hint':\r\n                StartUp.getInstance().message.showHint(customError.name);\r\n                return true;\r\n            case 'Ignore':\r\n                return true;\r\n            default:\r\n                StartUp.getInstance().message.showFatalError(customError.name);\r\n                return false;\r\n        }\r\n    }\r\n}\r\n","import { SupportLanguage } from './support.config';\r\n\r\nexport const fallbackLanguages: { [language: string]: SupportLanguage } = {\r\n    en: SupportLanguage.EN,\r\n    'en-US': SupportLanguage.EN,\r\n    'en-EG': SupportLanguage.EN,\r\n    'en-AU': SupportLanguage.EN,\r\n    'en-GB': SupportLanguage.EN,\r\n    'en-CA': SupportLanguage.EN,\r\n    'en-NZ': SupportLanguage.EN,\r\n    'en-IE': SupportLanguage.EN,\r\n    'en-ZA': SupportLanguage.EN,\r\n    'en-JM': SupportLanguage.EN,\r\n    'en-BZ': SupportLanguage.EN,\r\n    'en-TT': SupportLanguage.EN,\r\n    sch: SupportLanguage.EN,\r\n    tch: SupportLanguage.EN,\r\n    tha: SupportLanguage.EN,\r\n    'zh-CN': SupportLanguage.SCH,\r\n    'zh-SG': SupportLanguage.SCH,\r\n    'zh-chs': SupportLanguage.SCH,\r\n    cn: SupportLanguage.SCH,\r\n    'zh-TW': SupportLanguage.TCH,\r\n    'zh-HK': SupportLanguage.TCH,\r\n    'zh-MO': SupportLanguage.TCH,\r\n    'zh-cht': SupportLanguage.TCH,\r\n    tw: SupportLanguage.TCH,\r\n};\r\n","import { _decorator, Component, Node, Canvas, screen, sys } from 'cc';\r\n\r\nconst { ccclass, requireComponent } = _decorator;\r\n\r\n@ccclass('FullScreenController')\r\n@requireComponent(Canvas)\r\nexport class FullScreenController extends Component {\r\n    protected onLoad() {\r\n        if (!sys.isMobile) {\r\n            return;\r\n        }\r\n        this.node.on(\r\n            Node.EventType.TOUCH_END,\r\n            () => {\r\n                if (!screen.fullScreen()) {\r\n                    screen.requestFullScreen();\r\n                }\r\n            },\r\n            this,\r\n            true\r\n        );\r\n    }\r\n}\r\n","export const HexColorCode = {\r\n    'Red': 'BB0000',\r\n    'Orange': 'FFA800',\r\n    'Yellow': 'FBCB14',\r\n    'White': 'FFFFFF',\r\n    'Brown': '705B12',\r\n    'Black': '000000',\r\n}","export class CashoutData\r\n{\r\n    Bet: number;\r\n    Multiplier: number;\r\n    PlayerID: number;\r\n    Wager: number;\r\n};\r\n\r\nexport class CashoutRequestData\r\n{\r\n    Wager: number;\r\n};\r\n\r\nexport class CashoutResponseData\r\n{\r\n    Multiplier: number;\r\n    Cards: Array<number>;\r\n    Wagers: Array<number>;\r\n    Payouts: Array<number>;\r\n    TotalBet: number;\r\n    TotalWin: number;\r\n    Balance: number;\r\n};\r\n\r\nexport class SkipRequestData\r\n{\r\n};\r\n\r\nexport class SkipResponseData\r\n{\r\n    Balance: number;\r\n    Card: number;\r\n    Probability: Probability;\r\n    Multiplier: number;\r\n    Secret: string;\r\n    Hash: string;\r\n    NextHash: string;\r\n};\r\n\r\nexport class Probability\r\n{\r\n    property1: number;\r\n    property2: number;\r\n};\r\n","import { Label, Color, labelAssembler, _decorator } from 'cc';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GradientLabel')\r\nexport class GradientLabel extends Label {\r\n    @property({ type: [Color] })\r\n    private _colors: Color[] = [];\r\n\r\n    @property({ type: [Color] })\r\n    public get colors(): Color[] {\r\n        return this._colors;\r\n    }\r\n    public set colors(value: Color[]) {\r\n        this._colors = value;\r\n    }\r\n\r\n    protected _flushAssembler() {\r\n        let assembler = Label.Assembler.getAssembler(this);\r\n\r\n        if (assembler === ttfAssembler) {\r\n            assembler = gradientAssembler;\r\n        }\r\n\r\n        if (this._assembler !== assembler) {\r\n            this.destroyRenderData();\r\n            this._assembler = assembler;\r\n        }\r\n\r\n        if (!this._renderData) {\r\n            if (this._assembler && this._assembler.createData) {\r\n                this._renderData = this._assembler.createData(this);\r\n                this._renderData!.material = this.material;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst ttfAssembler = labelAssembler.getAssembler(Label.prototype);\r\nconst gradientAssembler = Object.create(ttfAssembler);\r\ngradientAssembler.fillBuffers = function fillBuffers(comp: GradientLabel) {\r\n    ttfAssembler.fillBuffers.call(gradientAssembler, comp);\r\n    const { renderData } = comp;\r\n    const vData = renderData.chunk.vb;\r\n    for (let colorOffset = 5, i = 0; i < 4; i++, colorOffset += renderData.floatStride) {\r\n        const color = comp.colors[i] || comp.color;\r\n        const colorR = color.r / 255;\r\n        const colorG = color.g / 255;\r\n        const colorB = color.b / 255;\r\n        const colorA = comp.node._uiProps.opacity;\r\n        vData![colorOffset] = colorR;\r\n        vData![colorOffset + 1] = colorG;\r\n        vData![colorOffset + 2] = colorB;\r\n        vData![colorOffset + 3] = colorA;\r\n    }\r\n};\r\n","import { Button } from \"cc\";\r\nimport { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport { HiloBetSettingManager } from \"./HiloBetSettingManager\";\r\nimport { HiloGameData } from \"../HiloGameData\";\r\nimport NumberFormatter from \"../../../Toolkit/Components/NumberFormatter\";\r\nimport { HiloButtonManager } from \"../UI/HiloButtonManager\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass(\"HiloBetSettingItem\")\r\nexport class HiloBetSettingItem extends Component \r\n{\r\n    @property(NumberFormatter)\r\n    private valueTxt: NumberFormatter = null;\r\n    @property(Button)\r\n    private btn: Button = null;\r\n\r\n    private betValue: number = 0;\r\n    private betIndex: number = 0;\r\n\r\n    protected start() \r\n    {\r\n        this.btn.node.on(Button.EventType.CLICK, this.onBtnBetValue.bind(this));\r\n    }\r\n\r\n    private onBtnBetValue() \r\n    {\r\n        HiloBetSettingManager.getInstance().closeBetSetting();\r\n        HiloGameData.getInstance().setCurrentBetValue(this.betValue);\r\n        HiloGameData.getInstance().setBetIndex(this.betIndex);\r\n        HiloButtonManager.getInstance().updateCurrentBetValue();\r\n        HiloBetSettingManager.getInstance().btnBackDefault();\r\n        this.btn.interactable = false;\r\n    }\r\n\r\n    public setBetValue(index: number, value: number) \r\n    {\r\n        this.valueTxt.value = value;\r\n        this.betIndex = index;\r\n        this.betValue = value;\r\n    }\r\n}\r\n","import { Prefab } from \"cc\";\r\nimport { Button } from \"cc\";\r\nimport { instantiate } from \"cc\";\r\nimport { Node } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport { Component } from \"cc\";\r\nimport { HiloBetSettingItem } from \"./HiloBetSettingItem\";\r\nimport { HiloGameData } from \"../HiloGameData\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('HiloBetSettingManager')\r\nexport class HiloBetSettingManager extends Component \r\n{\r\n    @property(Prefab)\r\n    private betSettingItem: Prefab = null;\r\n    @property(Node)\r\n    private itemGroup: Node = null;\r\n    @property(Node)\r\n    private mask: Node = null;\r\n\r\n    private static instance: HiloBetSettingManager = null;\r\n    private betItemGroup:Node[] = [];\r\n\r\n    public btnBackDefault() \r\n    {\r\n        this.betItemGroup.map(betItem => \r\n        {\r\n            betItem.getComponent(Button).interactable = true;\r\n        });\r\n    }    \r\n        \r\n    public static getInstance(): HiloBetSettingManager \r\n    {\r\n        return HiloBetSettingManager.instance;\r\n    }\r\n    \r\n    protected start() \r\n    {\r\n        HiloBetSettingManager.instance = this;\r\n        this.node.active = false;\r\n        this.mask.on(Button.EventType.CLICK, this.closeBetSetting.bind(this));\r\n    }\r\n\r\n    public initBetSettingPage()\r\n    {\r\n        let betList: Array<number> = HiloGameData.getInstance().getBetList();\r\n        for (let i: number = 0; i < betList.length; i++)\r\n        {\r\n            this.addBetItem(i, betList[i]);\r\n        }\r\n    }\r\n\r\n    private addBetItem(index: number, value: number)\r\n    {\r\n        let betItem: Node = instantiate(this.betSettingItem);\r\n        betItem.getComponent(HiloBetSettingItem).setBetValue(index, value);\r\n        betItem.setParent(this.itemGroup);\r\n        if (index == HiloGameData.getInstance().getDefaultBetIndex()) \r\n        {\r\n            betItem.getComponent(Button).interactable = false;\r\n        }\r\n        this.betItemGroup.push(betItem);\r\n    }\r\n    \r\n    public openBetSetting()\r\n    {\r\n        this.node.active = true;\r\n    }\r\n\r\n    public closeBetSetting()\r\n    {\r\n        this.node.active = false;\r\n    }\r\n}\r\n","import { Button } from \"cc\";\r\nimport { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport { Sprite } from \"cc\";\r\nimport { SpriteAtlas } from \"cc\";\r\nimport { HiloScoreManager } from \"./HiloScoreManager\";\r\nimport NumberFormatter from \"../../../Toolkit/Components/NumberFormatter\";\r\nimport { StartUp } from \"../../StartUp\";\r\nimport { HiloGameConnection } from \"../HiloGameConnection\";\r\nimport { BetRequestData } from \"../../../Data/DTO/Bet.dto\";\r\nimport { HiloGameData } from \"../HiloGameData\";\r\nimport { PlayerInfo } from \"../../PlayerInfo\";\r\nimport { GameState, HiloGameLogic } from \"../HiloGameLogic\";\r\nimport { HiloBetSettingManager } from \"../BetSetting/HiloBetSettingManager\";\r\nimport { HiloPokerTool } from \"../HiloPokerTool\";\r\nimport Application from \"../../../Application/Application\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('HiloButtonManager')\r\nexport class HiloButtonManager extends Component \r\n{\r\n    //system btn\r\n    @property(Button)\r\n    private btnClose: Button = null;\r\n    //game btn\r\n    @property(Button)\r\n    private btnRefresh: Button = null;\r\n    @property(Button)\r\n    private btnHigh: Button = null;\r\n    @property(Button)\r\n    private btnLow: Button = null;\r\n    @property(Button)\r\n    private btnCashOut: Button = null;\r\n    @property(Button)\r\n    private btnNextRound: Button = null;\r\n    @property(Button)\r\n    private btnBet: Button = null;\r\n    @property(Button)\r\n    private btnBetList: Button = null;\r\n    @property(SpriteAtlas)\r\n    private betAtlas: SpriteAtlas = null;\r\n    @property(NumberFormatter)\r\n    private currentBetTxt: NumberFormatter = null;\r\n\r\n    private betBtnSpriteName: string[] = [\"btn_equal\", \"btn_largerthan\", \"btn_lessthan\", \"btn_equalandlargethan\", \"btn_equalandlessthan\"];\r\n\r\n    private static instance: HiloButtonManager = null;\r\n    public static getInstance(): HiloButtonManager \r\n    {\r\n        return HiloButtonManager.instance;\r\n    }\r\n   \r\n    public init()\r\n    {\r\n        this.addBtnEvent();\r\n        this.updateCurrentBetValue();\r\n    }\r\n    \r\n    protected start() \r\n    {\r\n        if (Application.Instance.config.hideExit) {\r\n            this.btnClose.node.active = false;\r\n        }\r\n        HiloButtonManager.instance = this;\r\n    }\r\n\r\n    private addBtnEvent()\r\n    {\r\n        this.btnRefresh.node.on(Button.EventType.CLICK, this.onBtnRefresh.bind(this));\r\n        this.btnHigh.node.on(Button.EventType.CLICK, () =>\r\n        {\r\n            this.onBtnBet(0);\r\n        });\r\n        this.btnLow.node.on(Button.EventType.CLICK, () =>\r\n        {\r\n            this.onBtnBet(1);\r\n        });\r\n        this.btnCashOut.node.on(Button.EventType.CLICK, this.onBtnCashOut.bind(this));\r\n        this.btnNextRound.node.on(Button.EventType.CLICK, this.onBtnNextRound.bind(this));\r\n        this.btnBet.node.on(Button.EventType.CLICK, this.onBtnStartBet.bind(this));\r\n        this.btnBetList.node.on(Button.EventType.CLICK, this.onBtnBetList.bind(this));\r\n        this.btnClose.node.on(Button.EventType.CLICK, this.onBtnClose.bind(this));\r\n    }\r\n\r\n    private onBtnClose()\r\n    {\r\n        StartUp.getInstance().closeGame();\r\n    }\r\n\r\n    private onBtnRefresh()\r\n    {\r\n        this.setRefreshBtnLock(false);\r\n        this.setBetLock(false);\r\n        this.setCompareBtnLock(false);\r\n        HiloGameConnection.getInstance().sendSkip();\r\n    }\r\n\r\n    private onBtnBet(betType: number)\r\n    {\r\n        this.setRefreshBtnLock(false);\r\n        this.setCompareBtnLock(false);\r\n        this.btnCashOut.interactable = false;\r\n        const betInfo: BetRequestData = new BetRequestData();\r\n        betInfo.Wager = HiloGameData.getInstance().getBetIndexList()[betType];\r\n        HiloGameConnection.getInstance().sendBet(betInfo);\r\n    }\r\n\r\n    private onBtnStartBet()\r\n    {\r\n        const gameData: HiloGameData = HiloGameData.getInstance();\r\n        const playerInfo: PlayerInfo = PlayerInfo.getInstance();\r\n        const betValue: number = gameData.getCurrentBetValue();\r\n        const tmpMoney: number = playerInfo.getPlayerMoney() - betValue;\r\n        const money: number = tmpMoney * playerInfo.getDenom();\r\n        if (money < 0)\r\n        {\r\n            Application.Instance.connection.onMoneyNotEnough();\r\n            return;\r\n        }\r\n        playerInfo.setPlayerMoney(money);\r\n        HiloGameLogic.getInstance().setGameState(GameState.GAME_STATE_BET);\r\n    }\r\n    \r\n    private onBtnCashOut()\r\n    {\r\n        this.setRefreshBtnLock(false);\r\n        this.setBetLock(false);\r\n        this.setCompareBtnLock(false);\r\n        HiloGameData.getInstance().setIsWin(true);\r\n        HiloGameConnection.getInstance().sendCashOut();\r\n    }\r\n    \r\n    private onBtnNextRound()\r\n    {\r\n        HiloGameLogic.getInstance().setGameState(GameState.GAME_STATE_START);\r\n    }\r\n    \r\n    private onBtnBetList()\r\n    {\r\n        HiloBetSettingManager.getInstance().openBetSetting();\r\n    }\r\n\r\n    public setBetLock(enable: boolean)\r\n    {\r\n        this.btnBet.interactable = enable;\r\n        this.btnCashOut.interactable = enable;\r\n        this.btnNextRound.interactable = enable;\r\n    }\r\n\r\n    public setCompareBtnLock(enable: boolean)\r\n    {\r\n        this.btnHigh.interactable = enable;\r\n        this.btnLow.interactable = enable;\r\n    }\r\n\r\n    public setRefreshBtnLock(enable: boolean)\r\n    {\r\n        this.btnRefresh.interactable = enable;\r\n    }\r\n\r\n    public updateCompareBtnState()\r\n    {\r\n        const cardIndex: number = HiloGameData.getInstance().getCardIndex();\r\n        const cardValue: number = HiloPokerTool.getInstance().getPokerValue(cardIndex);\r\n        const betIndexList: Array<number> = new Array<number>();\r\n        let highBetIndex: number = 0;\r\n        let lowBetIndex: number = 0;\r\n        switch (cardValue)\r\n        {\r\n            case 1:\r\n                this.btnHigh.node.getComponent(Sprite).spriteFrame = this.betAtlas.getSpriteFrame(this.betBtnSpriteName[1]);\r\n                this.btnLow.node.getComponent(Sprite).spriteFrame = this.betAtlas.getSpriteFrame(this.betBtnSpriteName[0]);                \r\n                highBetIndex = 5;\r\n                lowBetIndex = 3;\r\n                break;\r\n            case 13:\r\n                this.btnHigh.node.getComponent(Sprite).spriteFrame = this.betAtlas.getSpriteFrame(this.betBtnSpriteName[0]);\r\n                this.btnLow.node.getComponent(Sprite).spriteFrame = this.betAtlas.getSpriteFrame(this.betBtnSpriteName[2]);\r\n                highBetIndex = 3;\r\n                lowBetIndex = 1;\r\n                break;\r\n            default:\r\n                this.btnHigh.node.getComponent(Sprite).spriteFrame = this.betAtlas.getSpriteFrame(this.betBtnSpriteName[3]);\r\n                this.btnLow.node.getComponent(Sprite).spriteFrame = this.betAtlas.getSpriteFrame(this.betBtnSpriteName[4]);\r\n                highBetIndex = 4;\r\n                lowBetIndex = 2;\r\n                break;\r\n        }\r\n        betIndexList.push(highBetIndex);\r\n        betIndexList.push(lowBetIndex);\r\n        HiloGameData.getInstance().setBetIndexList(betIndexList);\r\n    }\r\n\r\n    public updateBetBtnState(isLose: boolean = false)\r\n    {\r\n        const gameState: GameState = HiloGameLogic.getInstance().getGameState();\r\n        const isStartState: boolean = gameState == GameState.GAME_STATE_START;\r\n        const isBetState: boolean = gameState == GameState.GAME_STATE_BET;\r\n        const isResultState: boolean = gameState == GameState.GAME_STATE_RESULT;\r\n        const isFirstRound: boolean = HiloGameData.getInstance().getIsNewRound();\r\n        this.btnBet.node.active = isStartState;\r\n        this.btnCashOut.node.active = isBetState && !isFirstRound;\r\n        this.btnNextRound.node.active = isResultState;\r\n        this.btnBetList.interactable = isStartState;\r\n        this.setCompareBtnLock(isBetState);\r\n        this.setBetLock(true);\r\n        this.setRefreshBtnLock(isStartState || isBetState);\r\n\r\n        //避免延遲過高導致ui狀態異常\r\n        if (isLose)\r\n        {\r\n            this.setCompareBtnLock(false);\r\n            this.setBetLock(false);\r\n            this.setRefreshBtnLock(false);\r\n        }\r\n    }\r\n\r\n    public updateCurrentBetValue()\r\n    {\r\n        const currentBet: number = HiloGameData.getInstance().getCurrentBetValue();\r\n        this.currentBetTxt.value = currentBet;\r\n        HiloScoreManager.getInstance().updateScoreInfo(false);\r\n    }\r\n}\r\n","import { _decorator } from \"cc\";\r\nimport Application from \"../../Application/Application\";\r\nimport { PathName } from \"../../Data/Config/path.config\";\r\nimport { BetRequestData, BetResponseData } from \"../../Data/DTO/Bet.dto\";\r\nimport { CashoutResponseData, SkipResponseData } from \"../../Data/DTO/Game.dto\";\r\nimport { HiloGameData } from \"./HiloGameData\";\r\nimport { HiloGameView } from \"./HiloGameView\";\r\nimport { GameState, HiloGameLogic, PlayerOperateType } from \"./HiloGameLogic\";\r\nimport { PlayerInfo } from \"../PlayerInfo\";\r\nimport { GameEventType, StartUp } from \"../StartUp\";\r\nimport { ResultData } from \"../GameObject/Provability\";\r\n\r\n\r\nconst { ccclass } = _decorator;\r\n@ccclass('HiloGameConnection')\r\nexport class HiloGameConnection\r\n{\r\n    private static instance: HiloGameConnection = null;\r\n    public static getInstance(): HiloGameConnection \r\n    {\r\n        if (!HiloGameConnection.instance)\r\n        {\r\n            HiloGameConnection.instance = new HiloGameConnection();\r\n        }\r\n        return HiloGameConnection.instance;\r\n    }\r\n\r\n    public init()\r\n    {\r\n        Application.Instance.connection.listenForPublishData(PathName.Skip, this.handleSkip.bind(this));\r\n        Application.Instance.connection.listenForPublishData(PathName.Bet, this.handleBet.bind(this));\r\n        Application.Instance.connection.listenForPublishData(PathName.Cashout, this.handleCashOut.bind(this));\r\n    }\r\n\r\n    public sendBet(betInfo: BetRequestData): Promise<BetResponseData>\r\n    {\r\n        // console.log(\"send bet\");\r\n        betInfo.Bet = HiloGameData.getInstance().getBetIndex();\r\n        return Application.Instance.connection.send(PathName.Bet, betInfo);\r\n    }\r\n\r\n    private handleBet(event: BetResponseData)\r\n    {\r\n        // console.log(\"handle bet\");\r\n        if (HiloGameData.getInstance().getIsNewRound())\r\n        {\r\n            HiloGameData.getInstance().setIsNewRound(false);\r\n        }\r\n        HiloGameData.getInstance().setCurrentOdds(event.Multiplier);\r\n        HiloGameData.getInstance().setCardIndex(event.Card);\r\n        const data: any = Object.entries(event.Probability);\r\n        HiloGameData.getInstance().setProbabilityList(data);\r\n        const operate: PlayerOperateType = HiloGameLogic.getInstance().getPlayerOperateTypeFromWager(event.Wager);\r\n        HiloGameView.getInstance().getNewCard(operate, event.Multiplier <= 0);\r\n        this.setProveData(event);\r\n    }\r\n\r\n    public sendSkip(): Promise<SkipResponseData>\r\n    {\r\n        // console.log(\"send skip\");\r\n        return Application.Instance.connection.send(PathName.Skip, null);\r\n    }\r\n\r\n    private handleSkip(event: SkipResponseData)\r\n    {\r\n        // console.log(\"handle skip\");\r\n        const data: any = Object.entries(event.Probability);\r\n        HiloGameData.getInstance().setProbabilityList(data);\r\n        HiloGameData.getInstance().setCardIndex(event.Card);\r\n        if (HiloGameLogic.getInstance().getGameState() != GameState.GAME_STATE_INIT)\r\n        {\r\n            HiloGameView.getInstance().getNewCard(PlayerOperateType.SKIP);\r\n        }\r\n        this.setProveData(event);\r\n    }\r\n\r\n    public sendCashOut(): Promise<CashoutResponseData>\r\n    {\r\n        // console.log(\"send cash out\");\r\n        return Application.Instance.connection.send(PathName.Cashout, null);\r\n    }\r\n\r\n    private handleCashOut(event: CashoutResponseData)\r\n    {\r\n        // console.log(\"handle cash out\");\r\n        HiloGameData.getInstance().setIsWin(event.TotalWin > 0);\r\n        PlayerInfo.getInstance().setPlayerMoney(event.Balance);\r\n        HiloGameLogic.getInstance().setGameState(GameState.GAME_STATE_RESULT);\r\n    }\r\n\r\n    private setProveData(event: any)\r\n    {\r\n        HiloGameData.getInstance().setNextHash(event.NextHash)\r\n        StartUp.getInstance().node.emit(GameEventType.NEXT_HASH, event.NextHash);\r\n        if (!HiloGameData.getInstance().getIsFirstIntoGame())\r\n        {\r\n            const provabilityData: ResultData = new ResultData();\r\n            provabilityData.Card = event.Card;\r\n            provabilityData.Secret = event.Secret;\r\n            StartUp.getInstance().node.emit(GameEventType.RESULT, provabilityData);\r\n        }\r\n        HiloGameData.getInstance().setIsFirstIntoGame(false);\r\n    }\r\n}\r\n","import { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\n\r\nconst { ccclass } = _decorator;\r\n@ccclass('HiloGameData')\r\nexport class HiloGameData extends Component \r\n{\r\n    private static instance: HiloGameData = null;\r\n    public static getInstance(): HiloGameData \r\n    {\r\n        if (!HiloGameData.instance)\r\n        {\r\n            HiloGameData.instance = new HiloGameData();\r\n        }\r\n        return HiloGameData.instance;\r\n    }\r\n\r\n    private betList: Array<number> = new Array<number>();\r\n    public getBetList(): Array<number>\r\n    {\r\n        return this.betList;\r\n    }\r\n\r\n    public setBetList(betList: Array<number>)\r\n    {\r\n        this.betList = betList;\r\n    }\r\n\r\n    private currentBetValue: number = 0;\r\n    public getCurrentBetValue(): number\r\n    {\r\n        return this.currentBetValue;\r\n    }\r\n\r\n    public setCurrentBetValue(currentBetValue: number)\r\n    {\r\n        this.currentBetValue = currentBetValue;\r\n    }\r\n\r\n    private score: number = 0;\r\n    public getScore(): number\r\n    {\r\n        return this.score;\r\n    }\r\n\r\n    public setScore(score: number)\r\n    {\r\n        this.score = score;\r\n    }\r\n\r\n    private cardIndex: number = 0;\r\n    public getCardIndex(): number\r\n    {\r\n        return this.cardIndex;\r\n    }\r\n\r\n    public setCardIndex(cardIndex: number)\r\n    {\r\n        this.cardIndex = cardIndex;\r\n    }\r\n\r\n    private currentOdds: number = 100;\r\n    public getCurrentOdds(): number\r\n    {\r\n        return this.currentOdds;\r\n    }\r\n\r\n    public setCurrentOdds(currentOdds: number)\r\n    {\r\n        if (currentOdds <= 0)\r\n        {\r\n            return;\r\n        }\r\n        this.currentOdds = currentOdds;\r\n    }\r\n\r\n    private isNewRound: boolean = true;\r\n    public getIsNewRound(): boolean\r\n    {\r\n        return this.isNewRound;\r\n    }\r\n\r\n    public setIsNewRound(isNewRound: boolean)\r\n    {\r\n        this.isNewRound = isNewRound;\r\n    }\r\n\r\n    private isFirstIntoGame: boolean = true;\r\n    public getIsFirstIntoGame(): boolean\r\n    {\r\n        return this.isFirstIntoGame;\r\n    }\r\n\r\n    public setIsFirstIntoGame(isFirstIntoGame: boolean)\r\n    {\r\n        this.isFirstIntoGame = isFirstIntoGame;\r\n    }\r\n\r\n    private isWin: boolean = true;\r\n    public getIsWin(): boolean\r\n    {\r\n        return this.isWin;\r\n    }\r\n\r\n    public setIsWin(isWin: boolean)\r\n    {\r\n        this.isWin = isWin;\r\n    }\r\n\r\n    private betIndex: number = 0;\r\n    public getBetIndex(): number\r\n    {\r\n        return this.betIndex;\r\n    }\r\n\r\n    public setBetIndex(betIndex: number)\r\n    {\r\n        this.betIndex = betIndex;\r\n    }\r\n\r\n    private probabilityList: Array<number> = new Array<number>();\r\n    public getProbabilityList(): Array<number>\r\n    {\r\n        return this.probabilityList;\r\n    }\r\n\r\n    public setProbabilityList(data: any)\r\n    {\r\n        let probabilityList: Array<number> = new Array<number>();\r\n        probabilityList.push(Number((data[0][1] * 100).toFixed(2)));\r\n        probabilityList.push(Number((data[1][1] * 100).toFixed(2)));\r\n        this.probabilityList = probabilityList;\r\n    }\r\n\r\n    private oddsList: Array<Array<number>> = new Array<Array<number>>();\r\n    public getOddsList(): Array<Array<number>>\r\n    {\r\n        return this.oddsList;\r\n    }\r\n\r\n    public setOddsList(oddsList: Array<Array<number>>)\r\n    {\r\n        this.oddsList = oddsList;\r\n    }\r\n\r\n    private betIndexList: Array<number> = new Array<number>();\r\n    public getBetIndexList(): Array<number>\r\n    {\r\n        return this.betIndexList;\r\n    }\r\n\r\n    public setBetIndexList(betIndexList: Array<number>)\r\n    {\r\n        this.betIndexList = betIndexList;\r\n    }\r\n    \r\n    private nextHash: string\r\n    public setNextHash(nextHash: string)\r\n    {\r\n        this.nextHash = nextHash;\r\n    }\r\n\r\n    public getNextHash(): string\r\n    {\r\n        return this.nextHash;\r\n    }\r\n\r\n    private defaultBetIndex: number = 0;\r\n    public setDefaultBetIndex(index: number)\r\n    {\r\n        this.defaultBetIndex = index;\r\n    }\r\n\r\n    public getDefaultBetIndex(): number\r\n    {\r\n        return this.defaultBetIndex;\r\n    }\r\n}\r\n","import { tween, _decorator } from \"cc\";\r\nimport { HiloGameView } from \"./HiloGameView\";\r\nimport { input } from \"cc\";\r\nimport { Input } from \"cc\";\r\nimport { KeyCode } from \"cc\";\r\nimport I18n from \"../../I18n/I18n\";\r\nimport { SupportLanguage } from \"../../I18n/Config/support.config\";\r\nimport { HiloRoadMapManager } from \"./RoadMap/HiloRoadMapManager\";\r\nimport { HiloGameData } from \"./HiloGameData\";\r\nimport { HiloScoreManager } from \"./UI/HiloScoreManager\";\r\nimport Application from \"../../Application/Application\";\r\nimport { EnterTableResponseData } from \"../../Data/DTO/Table.dto\";\r\nimport { HiloGameConnection } from \"./HiloGameConnection\";\r\nimport { BetRequestData } from \"../../Data/DTO/Bet.dto\";\r\nimport {  DebugRequestData } from \"../../Data/DTO/Debug.dto\";\r\nimport { HiloResultManager } from \"./UI/HiloResultManager\";\r\nimport { HiloPokerTool } from \"./HiloPokerTool\";\r\nimport { HiloButtonManager } from \"./UI/HiloButtonManager\";\r\n\r\nconst { ccclass } = _decorator;\r\n\r\nexport enum GameState\r\n{\r\n    DEFAULT = -1,\r\n    GAME_STATE_INIT = 0,\r\n    GAME_STATE_START = 1,\r\n    GAME_STATE_BET = 2,\r\n    GAME_STATE_RESULT = 3,\r\n}\r\n\r\nexport enum PlayerOperateType\r\n{\r\n    DEFAULT = -1,\r\n    HIGH = 0,\r\n    LOW = 1,\r\n    SKIP = 2,\r\n}\r\n\r\n@ccclass('HiloGameLogic')\r\nexport class HiloGameLogic\r\n{\r\n    private gameState: GameState = GameState.DEFAULT;\r\n    private gameData: HiloGameData = HiloGameData.getInstance();\r\n\r\n    private static instance: HiloGameLogic = null;\r\n    public static getInstance(): HiloGameLogic \r\n    {\r\n        if (!HiloGameLogic.instance)\r\n        {\r\n            HiloGameLogic.instance = new HiloGameLogic();\r\n        }\r\n        return HiloGameLogic.instance;\r\n    }\r\n    \r\n    public init(event: EnterTableResponseData)\r\n    {\r\n        this.addTestEvent();\r\n        this.initOddsList(Object.entries(event.PayTable));\r\n        this.gameData.setBetList(event.Bets.Values);\r\n        this.gameData.setDefaultBetIndex(event.Bets.Default);\r\n        this.gameData.setBetIndex(event.Bets.Default);\r\n        this.gameData.setCurrentBetValue(event.Bets.Values[this.gameData.getDefaultBetIndex()]);\r\n        HiloGameLogic.getInstance().setGameState(GameState.GAME_STATE_INIT);\r\n    }\r\n\r\n    private initOddsList(payTableData: any)\r\n    {\r\n        let oddsList: Array<Array<number>> = new Array<Array<number>>();\r\n        let oddsList1: Array<number> = new Array<number>();\r\n        let oddsList2: Array<number> = new Array<number>();\r\n        let odds1: number = 0;\r\n        let odds2: number = 0;\r\n        let oddsKey1: string = \"\";\r\n        let oddsKey2: string = \"\";\r\n        for (let i: number = 0; i < payTableData.length; i++)\r\n        {\r\n            if (i == 0)\r\n            {\r\n                oddsKey1 = \"equal\";\r\n                oddsKey2 = \"greater\";\r\n            }\r\n            else if (i == payTableData.length - 1)\r\n            {\r\n                oddsKey1 = \"less\";\r\n                oddsKey2 = \"equal\";\r\n            }\r\n            else\r\n            {\r\n                oddsKey1 = \"greaterEqual\";\r\n                oddsKey2 = \"lessEqual\";\r\n            }\r\n            \r\n            odds1 = payTableData[i][1][oddsKey1];\r\n            odds2 = payTableData[i][1][oddsKey2];\r\n            oddsList1.push(odds1);\r\n            oddsList2.push(odds2);\r\n        }\r\n        oddsList.push(oddsList1);\r\n        oddsList.push(oddsList2);\r\n        this.gameData.setOddsList(oddsList);\r\n    }\r\n\r\n    public getGameState(): GameState\r\n    {\r\n        return this.gameState;\r\n    }\r\n\r\n    public setGameState(gameState: GameState)\r\n    {\r\n        this.gameState = gameState;\r\n        this.onGameStateChange();\r\n    }\r\n\r\n    private onGameStateChange()\r\n    {\r\n        switch (this.gameState) \r\n        {\r\n            case GameState.GAME_STATE_INIT:\r\n                this.onGameInit();\r\n                break;\r\n            case GameState.GAME_STATE_START:\r\n                this.onGameStart();\r\n                break;\r\n            case GameState.GAME_STATE_BET:\r\n                this.onGameBet();\r\n                break;\r\n            case GameState.GAME_STATE_RESULT:\r\n                this.onGameResult();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onGameInit()\r\n    {\r\n        // console.log(\"state : init\");\r\n        console.log(\"prepare start game\");\r\n    }\r\n\r\n    private onGameStart()\r\n    {\r\n        // console.log(\"state : start\");\r\n        HiloGameView.getInstance().updateCurrentCardInfo();\r\n        this.gameData.setIsNewRound(true);\r\n        this.gameData.setIsWin(true);\r\n        HiloButtonManager.getInstance().updateBetBtnState();\r\n        HiloButtonManager.getInstance().setRefreshBtnLock(true);\r\n        HiloButtonManager.getInstance().setCompareBtnLock(false);\r\n        this.gameData.setCurrentOdds(100);\r\n        HiloScoreManager.getInstance().updateScoreInfo(false);\r\n        HiloRoadMapManager.getInstance().refreshRecord();\r\n        HiloGameView.getInstance().updateLossEffect();\r\n    }\r\n\r\n    private onGameBet()\r\n    {\r\n        // console.log(\"state : bet\");\r\n        HiloButtonManager.getInstance().updateBetBtnState();\r\n        HiloButtonManager.getInstance().setCompareBtnLock(true);\r\n        HiloScoreManager.getInstance().updateScoreInfo(true);\r\n    }\r\n\r\n    private onGameResult()\r\n    {\r\n        // console.log(\"state : result\");\r\n        tween(this).delay(1.2).call(() => \r\n        {\r\n            HiloButtonManager.getInstance().updateBetBtnState();\r\n        }).start();\r\n        HiloResultManager.getInstance().openResultPage();\r\n    }\r\n\r\n    public closeGame()\r\n    {\r\n        if (Application.Instance.config.homeURL) \r\n        {\r\n            document.location.href = Application.Instance.config.homeURL;\r\n        } \r\n        else \r\n        {\r\n            window.close();\r\n            window.history.back();\r\n        }\r\n    }\r\n\r\n    public getPlayerOperateTypeFromWager(wager: number): PlayerOperateType\r\n    {\r\n        let operateType: PlayerOperateType = PlayerOperateType.DEFAULT;\r\n        switch (wager)\r\n        {\r\n            case 1:\r\n            case 2:\r\n                operateType = PlayerOperateType.LOW;\r\n                break;\r\n            case 3:\r\n                let cardIndex: number = this.gameData.getCardIndex();\r\n                let cardValue: number = HiloPokerTool.getInstance().getPokerValue(cardIndex);\r\n                operateType = cardValue == 1 ? PlayerOperateType.LOW : PlayerOperateType.HIGH;\r\n                break;\r\n            case 4:\r\n            case 5:\r\n                operateType = PlayerOperateType.HIGH;\r\n                break;\r\n        }\r\n        return operateType;\r\n    }\r\n    \r\n    private addTestEvent()\r\n    {\r\n        let isDebugWin: boolean = true;\r\n        let betInfo: BetRequestData = new BetRequestData();\r\n        let debugInfo: DebugRequestData = new DebugRequestData();\r\n        let wagerIndex: number = 1;\r\n        let winOrLossStr: string = \"\";\r\n        let wagerStr: string = \"\";\r\n        debugInfo.Win = isDebugWin;\r\n        winOrLossStr = debugInfo.Win ? \"贏\" : \"輸\";\r\n        betInfo.Debug = debugInfo;\r\n        betInfo.Wager = 1;\r\n\r\n        if (Application.Instance.config.debug) \r\n        {\r\n            input.on(Input.EventType.KEY_UP, async (event) => \r\n            {\r\n                switch (event.keyCode) \r\n                {\r\n                    case KeyCode.SPACE:\r\n                        isDebugWin = !isDebugWin;\r\n                        debugInfo.Win = isDebugWin;\r\n                        winOrLossStr = debugInfo.Win ? \"贏\" : \"輸\";\r\n                        console.log(`切換輸贏模式 : ${winOrLossStr}`);\r\n                        break;\r\n\r\n                    case KeyCode.ARROW_UP:\r\n                        debugInfo.Mode = 1;\r\n                        betInfo.Wager = HiloGameData.getInstance().getBetIndexList()[0];\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`自動下注上方按鈕 , 當前輸贏結果 : ${winOrLossStr}`);\r\n                        break;\r\n                    case KeyCode.ARROW_DOWN:\r\n                        debugInfo.Mode = 1;\r\n                        betInfo.Wager = HiloGameData.getInstance().getBetIndexList()[1];\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`自動下注下方按鈕 , 當前輸贏結果 : ${winOrLossStr}`);\r\n                        break;\r\n                    case KeyCode.DIGIT_1:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 1;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.DIGIT_2:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 2;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.DIGIT_3:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 3;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.DIGIT_4:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 4;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.DIGIT_5:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 5;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.DIGIT_6:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 6;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.DIGIT_7:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 7;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.DIGIT_8:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 8;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.DIGIT_9:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 9;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.DIGIT_0:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 10;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.KEY_Q:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 11;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.KEY_W:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 12;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.KEY_E:\r\n                        debugInfo.Mode = 2;\r\n                        debugInfo.Rank = 13;\r\n                        HiloGameConnection.getInstance().sendBet(betInfo);\r\n                        console.log(`指定牌面結果 : ${debugInfo.Rank} , 當前下注模式 : ${wagerStr}`);\r\n                        break;\r\n\r\n                    case KeyCode.KEY_Z:\r\n                        betInfo.Wager = 1;\r\n                        wagerStr = \"小於\";\r\n                        console.log(`切換下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.KEY_X:\r\n                        betInfo.Wager = 2;\r\n                        wagerStr = \"小於等於\";\r\n                        console.log(`切換下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.KEY_C:\r\n                        betInfo.Wager = 3;\r\n                        wagerStr = \"等於\";\r\n                        console.log(`切換下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.KEY_V:\r\n                        betInfo.Wager = 4;\r\n                        wagerStr = \"大於等於\";\r\n                        console.log(`切換下注模式 : ${wagerStr}`);\r\n                        break;\r\n                    case KeyCode.KEY_B:\r\n                        betInfo.Wager = 5;\r\n                        wagerStr = \"大於\";\r\n                        console.log(`切換下注模式 : ${wagerStr}`);\r\n                        break;\r\n\r\n                    case KeyCode.F1:\r\n                        I18n.Instance.changeLanguage(SupportLanguage.EN);\r\n                        break;\r\n                    case KeyCode.F2:\r\n                        I18n.Instance.changeLanguage(SupportLanguage.SCH);\r\n                        break;\r\n                    case KeyCode.F3:\r\n                        I18n.Instance.changeLanguage(SupportLanguage.TCH);\r\n                        break;\r\n                    case KeyCode.F4:\r\n                        I18n.Instance.changeLanguage(SupportLanguage.VI);\r\n                        break;\r\n                    case KeyCode.F5:\r\n                        I18n.Instance.changeLanguage(SupportLanguage.JA);\r\n                        break;\r\n                    case KeyCode.F6:\r\n                        I18n.Instance.changeLanguage(SupportLanguage.PT);\r\n                        break;\r\n                    case KeyCode.F7:\r\n                        I18n.Instance.changeLanguage(SupportLanguage.ES);\r\n                        break;\r\n                    case KeyCode.F8:\r\n                        I18n.Instance.changeLanguage(SupportLanguage.KO);\r\n                        break;\r\n                    case KeyCode.F9:\r\n                        I18n.Instance.changeLanguage(SupportLanguage.ID);\r\n                        break;\r\n                    case KeyCode.F10:\r\n                        I18n.Instance.changeLanguage(SupportLanguage.TH);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { UIOpacity } from \"cc\";\r\nimport { SpriteAtlas } from \"cc\";\r\nimport { Node } from \"cc\";\r\nimport { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport { HiloGameData } from \"./HiloGameData\";\r\nimport { tween } from \"cc\";\r\nimport { Vec3 } from \"cc\";\r\nimport { HiloPokerTool } from \"./HiloPokerTool\";\r\nimport { GameState, HiloGameLogic, PlayerOperateType } from \"./HiloGameLogic\";\r\nimport { HiloRoadMapManager } from \"./RoadMap/HiloRoadMapManager\";\r\nimport { HiloScoreManager } from \"./UI/HiloScoreManager\";\r\nimport { PlayerInfo } from \"../PlayerInfo\";\r\nimport NumberFormatter from \"../../Toolkit/Components/NumberFormatter\";\r\nimport { HiloResultManager } from \"./UI/HiloResultManager\";\r\nimport { HiloBetSettingManager } from \"./BetSetting/HiloBetSettingManager\";\r\nimport { HiloButtonManager } from \"./UI/HiloButtonManager\";\r\nimport { HiloOddsInfoManager } from \"./UI/HiloOddsInfoManager\";\r\nimport { HiloProbabilityInfoManager } from \"./UI/HiloProbabilityInfoManager\";\r\nimport AudioManager from \"../AudioManager\";\r\nimport { SoundEffect as SoundEffect } from \"../Config/audio.config\";\r\nimport { Label } from \"cc\";\r\nimport { defaultAppConfig } from \"../../Data/Config/app.config\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('HiloGameView')\r\nexport class HiloGameView extends Component \r\n{\r\n    @property(Node)\r\n    private currentCard: Node = null;\r\n    @property(Node)\r\n    private abandonCard: Node = null;\r\n    @property(Node)\r\n    private lossEffect: Node = null;\r\n    @property(SpriteAtlas)\r\n    private pokerAtlas: SpriteAtlas = null;\r\n    @property(NumberFormatter)\r\n    private playerMoneyTxt: NumberFormatter = null;\r\n    @property(Label)\r\n    private versionTxt: Label = null;\r\n\r\n    private static instance: HiloGameView = null;\r\n    public static getInstance(): HiloGameView \r\n    {\r\n        return HiloGameView.instance;\r\n    }\r\n    \r\n    protected start() \r\n    {\r\n        HiloGameView.instance = this;\r\n        this.init();\r\n    }\r\n    \r\n    public init()\r\n    {\r\n        this.checkGameSceneIsLoadFinish();\r\n        this.updatePlayerMoney();\r\n        this.lossEffect.active = false;\r\n    }\r\n\r\n    private checkGameSceneIsLoadFinish()\r\n    {\r\n        const betSettingManager: HiloBetSettingManager = HiloBetSettingManager.getInstance();\r\n        const buttongManager: HiloButtonManager = HiloButtonManager.getInstance();\r\n        const oddsInfoManager: HiloOddsInfoManager = HiloOddsInfoManager.getInstance();\r\n        const probabilityInfoManager: HiloProbabilityInfoManager = HiloProbabilityInfoManager.getInstance();\r\n        const roadMapManager: HiloRoadMapManager = HiloRoadMapManager.getInstance();\r\n        const scoreManager: HiloScoreManager = HiloScoreManager.getInstance();\r\n        const resultManager: HiloResultManager = HiloResultManager.getInstance();\r\n        const isConnect: boolean = HiloGameLogic.getInstance().getGameState() == GameState.GAME_STATE_INIT;\r\n\r\n        if (!betSettingManager || \r\n            !buttongManager || \r\n            !oddsInfoManager || \r\n            !probabilityInfoManager || \r\n            !roadMapManager || \r\n            !scoreManager || \r\n            !resultManager || \r\n            !isConnect)\r\n        {\r\n            // console.log(\"something loading\");\r\n            this.waitLoading();\r\n            return;\r\n        }\r\n        this.prepareStartGame();\r\n        // console.log(\"loading finish\");\r\n    }\r\n\r\n    private prepareStartGame()\r\n    {\r\n        HiloButtonManager.getInstance().init();\r\n        HiloPokerTool.getInstance().setPokeAtlas(this.pokerAtlas);\r\n        HiloBetSettingManager.getInstance().initBetSettingPage();\r\n        HiloGameLogic.getInstance().setGameState(GameState.GAME_STATE_START);\r\n        this.setGameVersion();\r\n    }\r\n\r\n    private waitLoading()\r\n    {\r\n        setTimeout(() => \r\n        {\r\n            // console.log(\"loading...\");\r\n            this.checkGameSceneIsLoadFinish();\r\n        }, 1000 / 60);\r\n    }\r\n    \r\n    public getNewCard(operateType: PlayerOperateType, isLose: boolean = false)\r\n    {\r\n        HiloButtonManager.getInstance().setBetLock(false);\r\n        HiloButtonManager.getInstance().setCompareBtnLock(false);\r\n        HiloButtonManager.getInstance().setRefreshBtnLock(false);\r\n        this.throwAbandonCard(operateType, isLose);\r\n    }\r\n\r\n    public updateCurrentCardInfo() \r\n    {\r\n        const cardIndex: number = HiloGameData.getInstance().getCardIndex();\r\n        tween(this.node).delay(0.2).call(() => \r\n        {\r\n            HiloPokerTool.getInstance().turnCardOver(this.currentCard, cardIndex);\r\n        }).start();\r\n        HiloProbabilityInfoManager.getInstance().updateProbabilityInfo();\r\n        HiloOddsInfoManager.getInstance().updateOddsInfo();\r\n        HiloButtonManager.getInstance().updateCompareBtnState();\r\n        tween(this.node).delay(1).call(() => \r\n        {\r\n            if (HiloGameLogic.getInstance().getGameState() == GameState.GAME_STATE_BET)\r\n            {\r\n                HiloScoreManager.getInstance().updateScoreInfo(true);\r\n            }\r\n        }).start();\r\n        this.initAbandonCard();\r\n    }\r\n\r\n    private initAbandonCard()\r\n    {\r\n        const cardIndex: number = HiloGameData.getInstance().getCardIndex();\r\n        this.abandonCard = HiloPokerTool.getInstance().getPoker(this.abandonCard, cardIndex);\r\n        this.abandonCard.getComponent(UIOpacity).opacity = 0;\r\n        this.abandonCard.position = new Vec3(0, 0);\r\n        this.abandonCard.scale = new Vec3(1, 1);\r\n        this.abandonCard.angle = 0;\r\n    }\r\n\r\n    private throwAbandonCard(operateType: PlayerOperateType, isLose: boolean)\r\n    {\r\n        AudioManager.Instance.playEffect(SoundEffect.MUCKED);\r\n        const duration: number = 0.3;\r\n        const abandonCardOpacity: UIOpacity = this.abandonCard.getComponent(UIOpacity);\r\n        abandonCardOpacity.opacity = 255;\r\n        this.currentCard = HiloPokerTool.getInstance().getPoker(this.currentCard, -1);\r\n        tween(this.abandonCard).to(duration, { scale: new Vec3(0, 0), angle: 45 }).start();\r\n        tween(this.abandonCard).to(duration, { position: new Vec3(-400, 500) }).start();\r\n        tween(abandonCardOpacity).to(duration, { opacity: 0}).call(() => \r\n        {\r\n            this.updateCurrentCardInfo();\r\n            if (HiloGameLogic.getInstance().getGameState() == GameState.GAME_STATE_START) \r\n            {\r\n                HiloRoadMapManager.getInstance().refreshRecord();\r\n            }\r\n            else\r\n            {\r\n                HiloRoadMapManager.getInstance().addRecord(operateType, false);\r\n            }\r\n        }).delay(0.85)\r\n        .call(() => \r\n        {\r\n            this.updateLossEffect();\r\n            HiloButtonManager.getInstance().updateBetBtnState(isLose);\r\n        }).start();\r\n    }\r\n\r\n    public updatePlayerMoney()\r\n    {\r\n        this.playerMoneyTxt.value = PlayerInfo.getInstance().getPlayerMoney();\r\n    }\r\n\r\n    public updateLossEffect()\r\n    {\r\n        this.lossEffect.active = !HiloGameData.getInstance().getIsWin();\r\n    }\r\n\r\n    private setGameVersion()\r\n    {\r\n        this.versionTxt.string = defaultAppConfig.GameVersion;\r\n    }\r\n}\r\n","import { Label } from \"cc\";\r\nimport { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport { HiloGameData } from \"../HiloGameData\";\r\nimport { HiloPokerTool } from \"../HiloPokerTool\";\r\nimport { tween } from \"cc\";\r\nimport { Vec3 } from \"cc\";\r\nimport { UIOpacity } from \"cc\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('HiloOddsInfoManager')\r\nexport class HiloOddsInfoManager extends Component \r\n{\r\n    @property(Label)\r\n    private highOddsTxt: Label = null;\r\n    @property(Label)\r\n    private lowOddsTxt: Label = null;\r\n\r\n    private static instance: HiloOddsInfoManager = null;\r\n    public static getInstance(): HiloOddsInfoManager \r\n    {\r\n        return HiloOddsInfoManager.instance;\r\n    }\r\n    \r\n    protected start()\r\n    {\r\n        HiloOddsInfoManager.instance = this;\r\n        this.highOddsTxt.string = \"\";\r\n        this.lowOddsTxt.string = \"\";\r\n    }\r\n\r\n    public updateOddsInfo()\r\n    {\r\n        let cardIndex: number = HiloGameData.getInstance().getCardIndex();\r\n        let oddsList: Array<Array<number>> = HiloGameData.getInstance().getOddsList();\r\n        let pokerValue: number = HiloPokerTool.getInstance().getPokerValue(cardIndex);\r\n        let isValueMaxOrMin: boolean = pokerValue == 1 || pokerValue == 13;\r\n        let oddsIndex1: number = isValueMaxOrMin ? 1 : 0;\r\n        let oddsIndex2: number = isValueMaxOrMin ? 0 : 1;\r\n        let highOdds: string = (oddsList[oddsIndex1][pokerValue - 1] / 100).toFixed(2);\r\n        let lowOdds: string = (oddsList[oddsIndex2][pokerValue - 1] / 100).toFixed(2);\r\n        \r\n        let duration: number = 0.2;\r\n        let targetScale: Vec3 = new Vec3(1.2, 1.2, 1.2);\r\n        let highOddsOpacity: UIOpacity = this.highOddsTxt.getComponent(UIOpacity);\r\n        let lowOddsOpacity: UIOpacity = this.lowOddsTxt.getComponent(UIOpacity);\r\n        \r\n        tween(lowOddsOpacity).to(duration, { opacity: 0 }).call(() => \r\n        {\r\n            lowOddsOpacity.opacity = 255;\r\n            this.lowOddsTxt.node.scale = Vec3.ZERO;\r\n            this.lowOddsTxt.string = `${lowOdds}x`;\r\n            tween(this.highOddsTxt.node).delay(duration * 2).to(duration, { scale: targetScale }).to(duration, { scale: Vec3.ONE }).delay(duration / 4).call(() => \r\n            {\r\n                tween(this.lowOddsTxt.node).to(duration, { scale: targetScale }).to(duration, { scale: Vec3.ONE }).start();\r\n            }).start();\r\n        }).start();\r\n        tween(highOddsOpacity).to(duration, { opacity: 0 }).call(() => \r\n        {\r\n            highOddsOpacity.opacity = 255;\r\n            this.highOddsTxt.node.scale = Vec3.ZERO;\r\n            this.highOddsTxt.string = `${highOdds}x`;\r\n        }).start();\r\n    }\r\n}\r\n","import { Sprite } from \"cc\";\r\nimport { SpriteFrame } from \"cc\";\r\nimport { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\n\r\nconst { ccclass } = _decorator;\r\n@ccclass('HiloPlayerOperateTypeItem')\r\nexport class HiloPlayerOperateTypeItem extends Component\r\n{\r\n    public setSprite(spriteFrame: SpriteFrame)\r\n    {\r\n        let sprite: Sprite = this.node.getComponent(Sprite);\r\n        sprite.spriteFrame = spriteFrame;\r\n    }\r\n}\r\n","import { SpriteAtlas } from \"cc\";\r\nimport { Node } from \"cc\";\r\nimport { tween } from \"cc\";\r\nimport { Vec3 } from \"cc\";\r\nimport { Sprite } from \"cc\";\r\nimport { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport AudioManager from \"../AudioManager\";\r\nimport { SoundEffect as SoundEffect } from \"../Config/audio.config\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('HiloPokerTool')\r\nexport class HiloPokerTool extends Component \r\n{\r\n    @property(SpriteAtlas)\r\n    private pokerAtlas: SpriteAtlas = null;\r\n\r\n    private static instance: HiloPokerTool = null;\r\n    public static getInstance(): HiloPokerTool \r\n    {\r\n        if (!HiloPokerTool.instance)\r\n        {\r\n            HiloPokerTool.instance = new HiloPokerTool();\r\n        }\r\n        return HiloPokerTool.instance;\r\n    }\r\n\r\n    public setPokeAtlas(pokerAtlas: SpriteAtlas)\r\n    {\r\n        this.pokerAtlas = pokerAtlas;\r\n    }\r\n\r\n    public getPoker(pokerNode: Node, cardIndex: number): Node\r\n    {\r\n        let pokerSprite: Sprite = pokerNode.getComponent(Sprite);\r\n        let spriteName: string = \"\";\r\n        if (!pokerSprite)\r\n        {\r\n            pokerNode.addComponent(Sprite);\r\n        }\r\n        spriteName = this.convertCardIndexToSpriteName(cardIndex);\r\n        pokerSprite.spriteFrame = this.pokerAtlas.getSpriteFrame(spriteName);\r\n        return pokerNode;\r\n    }\r\n\r\n    private convertCardIndexToSpriteName(cardIndex: number): string\r\n    {\r\n        let spriteName: string = \"img_poker_0\";\r\n        spriteName += cardIndex == -1 ? \"53\" : this.convertCardIndexFormat(cardIndex);\r\n        return spriteName;\r\n    }\r\n\r\n    private convertCardIndexFormat(cardIndex: number): string\r\n    {\r\n        let result: string = \"\";\r\n        let cardIndexStr: string = cardIndex.toString();\r\n        result = cardIndex >= 10 ? cardIndexStr : \"0\" + cardIndexStr;\r\n        return result;\r\n    }\r\n\r\n    public turnCardOver(poker: Node, cardIndex: number)\r\n    {\r\n        AudioManager.Instance.playEffect(SoundEffect.FLIP);\r\n        let duration: number = 0.3;\r\n        poker = this.getPoker(poker, -1);\r\n        tween(poker).to(duration, {scale: new Vec3(0, poker.scale.y)})\r\n        .call(() => \r\n        {\r\n            poker = this.getPoker(poker, cardIndex);\r\n        })\r\n        .to(duration, {scale: new Vec3(poker.scale.x, poker.scale.y)}).start();\r\n    }\r\n\r\n    public getPokerValue(cardIndex: number): number\r\n    {\r\n        if (cardIndex <= 0 || cardIndex > 52)\r\n        {\r\n            return 0;\r\n        }\r\n        let remainder = cardIndex % 13;\r\n        let value: number = remainder == 0 ? 13 : remainder;\r\n        return value;\r\n    }\r\n}\r\n","import { Label } from \"cc\";\r\nimport { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport { HiloGameData } from \"../HiloGameData\";\r\nimport { Vec3 } from \"cc\";\r\nimport { tween } from \"cc\";\r\nimport { UIOpacity } from \"cc\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('HiloProbabilityInfoManager')\r\nexport class HiloProbabilityInfoManager extends Component \r\n{\r\n    @property(Label)\r\n    private highProbabilityTxt: Label = null;\r\n    @property(Label)\r\n    private lowProbabilityTxt: Label = null;\r\n\r\n    private static instance: HiloProbabilityInfoManager = null;\r\n    public static getInstance(): HiloProbabilityInfoManager \r\n    {\r\n        return HiloProbabilityInfoManager.instance;\r\n    }\r\n   \r\n    protected start()\r\n    {\r\n        HiloProbabilityInfoManager.instance = this;\r\n        this.highProbabilityTxt.string = \"\";\r\n        this.lowProbabilityTxt.string = \"\";\r\n    }\r\n\r\n    public updateProbabilityInfo()\r\n    {\r\n        let duration: number = 0.2;\r\n        let targetScale: Vec3 = new Vec3(1.2, 1.2, 1.2);\r\n        let highProbabilityOpacity: UIOpacity = this.highProbabilityTxt.getComponent(UIOpacity);\r\n        let lowProbabilityOpacity: UIOpacity = this.lowProbabilityTxt.getComponent(UIOpacity);\r\n\r\n        tween(highProbabilityOpacity).to(duration, { opacity: 0 }).call(() => \r\n        {\r\n            highProbabilityOpacity.opacity = 255;\r\n            this.highProbabilityTxt.node.scale = Vec3.ZERO;\r\n            this.highProbabilityTxt.string = `${HiloGameData.getInstance().getProbabilityList()[1].toString()}%`;\r\n            tween(this.highProbabilityTxt.node).delay(duration * 2).to(duration, { scale: targetScale }).to(duration, { scale: Vec3.ONE }).delay(duration / 4).call(() => \r\n            {\r\n                tween(this.lowProbabilityTxt.node).to(duration, { scale: targetScale }).to(duration, { scale: Vec3.ONE }).start();\r\n            }).start();\r\n        }).start();\r\n        tween(lowProbabilityOpacity).to(duration, { opacity: 0 }).call(() => \r\n        {\r\n            lowProbabilityOpacity.opacity = 255;\r\n            this.lowProbabilityTxt.node.scale = Vec3.ZERO;\r\n            this.lowProbabilityTxt.string = `${HiloGameData.getInstance().getProbabilityList()[0].toString()}%`;\r\n        }).start();\r\n    }\r\n}\r\n","import { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport { HiloGameData } from \"../HiloGameData\";\r\nimport NumberFormatter from \"../../../Toolkit/Components/NumberFormatter\";\r\nimport { Label } from \"cc\";\r\nimport { Sprite } from \"cc\";\r\nimport { Button } from \"cc\";\r\nimport { UIOpacity } from \"cc\";\r\nimport { tween } from \"cc\";\r\nimport { Node } from \"cc\";\r\nimport { Vec3 } from \"cc\";\r\nimport { SpriteFrame } from \"cc\";\r\nimport LocalizedLabel from \"../../../I18n/LocalizedComponent/LocalizedLabel\";\r\nimport { HiloScoreManager } from \"./HiloScoreManager\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('HiloResultManager')\r\nexport class HiloResultManager extends Component \r\n{\r\n    @property(Button)\r\n    private mask: Button = null;\r\n    @property(Node)\r\n    private resultPage: Node = null;\r\n    @property(Sprite)\r\n    private bg: Sprite = null;\r\n    @property(Label)\r\n    private resultInfoTxt: Label = null;\r\n    @property(Button)\r\n    private btnClose: Button = null;\r\n    @property(Label)\r\n    private oddsTxt: Label = null;\r\n    @property(Label)\r\n    private settleInfoTxt: Label = null;\r\n    @property(NumberFormatter)\r\n    private resultMoneyTxt: NumberFormatter = null;\r\n    @property(SpriteFrame)\r\n    private winBg: SpriteFrame = null;\r\n    @property(SpriteFrame)\r\n    private lossBg: SpriteFrame = null;\r\n    @property(Node)\r\n    private oddsGroup: Node = null;\r\n    @property(Node)\r\n    private moneyGroup: Node = null;\r\n\r\n    private readonly winHexColor: string = \"#FBCB14\";\r\n    private readonly lossHexColor: string = \"#A8BBFF\";\r\n    private isShowResultPage: boolean = false;\r\n\r\n    private static instance: HiloResultManager = null;\r\n    public static getInstance(): HiloResultManager\r\n    {\r\n        return HiloResultManager.instance;\r\n    }\r\n    \r\n    protected start()\r\n    {\r\n        HiloResultManager.instance = this;\r\n        this.node.active = false;\r\n        this.btnClose.node.on(Button.EventType.CLICK, this.closeResultPage.bind(this));\r\n        this.mask.node.on(Button.EventType.CLICK, this.closeResultPage.bind(this));\r\n        this.mask.interactable = false;\r\n    }\r\n\r\n    public openResultPage()\r\n    {\r\n        if (this.node.active)\r\n        {\r\n            return;\r\n        }\r\n        this.node.active = true;\r\n        this.updateResultInfo();\r\n        this.showPageEffect(true);\r\n    }\r\n\r\n    private closeResultPage()\r\n    {\r\n        if (!this.isShowResultPage)\r\n        {\r\n            return;\r\n        }\r\n        this.showPageEffect(false);\r\n        this.mask.interactable = false;\r\n        this.btnClose.interactable = false;\r\n        this.isShowResultPage =  false;\r\n        HiloScoreManager.getInstance().updateScoreInfo(false);\r\n    }\r\n\r\n    private updateResultInfo()\r\n    {\r\n        const isWin: boolean = HiloGameData.getInstance().getIsWin();\r\n        const fontHex: string = isWin ? this.winHexColor : this.lossHexColor;\r\n        const score: number = HiloGameData.getInstance().getScore();\r\n        const betValue: number = HiloGameData.getInstance().getCurrentBetValue();\r\n        let odds: number = HiloGameData.getInstance().getCurrentOdds();\r\n        odds *= isWin ? 1 : -1;\r\n        this.resultInfoTxt.color.fromHEX(fontHex);\r\n        this.bg.spriteFrame = isWin ? this.winBg : this.lossBg;\r\n        this.oddsTxt.string = (odds / 100).toString();\r\n        this.resultMoneyTxt.value = isWin ? score :betValue;\r\n        this.resultInfoTxt.getComponent(LocalizedLabel).key = isWin ? \"YOU_WON\" : \"YOU_LOSS\";\r\n        this.settleInfoTxt.getComponent(LocalizedLabel).key = isWin ? \"TOTAL_WIN\" : \"TOTAL_LOSS\";\r\n    }\r\n\r\n    private showPageEffect(isOpen: boolean)\r\n    {\r\n        const isWin: boolean = HiloGameData.getInstance().getIsWin();\r\n        const maskOpacity: UIOpacity = this.mask.getComponent(UIOpacity);\r\n        const pageOpacity: UIOpacity = this.resultPage.getComponent(UIOpacity);\r\n        const startScale: Vec3 = isOpen ? Vec3.ZERO : Vec3.ONE;\r\n        const targetScale: Vec3 = isOpen ? Vec3.ONE : Vec3.ZERO;\r\n        const maxScale: Vec3 = new Vec3(1.1, 1.1, 1.1);\r\n        const startOpacity: number = isOpen ? 0 : 255;\r\n        const targetOpacity: number = isOpen ? 255 : 0;\r\n        const delayTime: number = isOpen && !isWin ? 1.5 : 0;\r\n        maskOpacity.opacity = startOpacity;\r\n        this.resultPage.scale = startScale;\r\n        this.oddsGroup.scale = this.moneyGroup.scale = isOpen ? Vec3.ZERO : Vec3.ONE;\r\n        tween(maskOpacity).delay(delayTime).to(0.3, { opacity: targetOpacity }).start();\r\n        tween(pageOpacity).delay(delayTime).call(() => \r\n        {\r\n            tween(this.resultPage).to(0.25, { scale: maxScale} ).to(0.25, { scale: targetScale }).call(() => \r\n            {\r\n                if (isOpen)\r\n                {\r\n                    tween(this.oddsGroup).to(0.15, { scale: maxScale} ).to(0.15, { scale: Vec3.ONE }).call(() => \r\n                    {\r\n                        tween(this.moneyGroup).to(0.15, { scale: maxScale }).to(0.15, { scale: Vec3.ONE }).call(() => \r\n                        {\r\n                            this.isShowResultPage = true;\r\n                        }).start();\r\n                    }).start();\r\n                }\r\n                this.mask.interactable = true;\r\n                this.btnClose.interactable = true;\r\n                this.node.active = isOpen;\r\n                \r\n            }).start();\r\n        }).start();\r\n    }\r\n}\r\n","import { Label } from \"cc\";\r\nimport { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport { HiloGameData } from \"../HiloGameData\";\r\n\r\nconst { ccclass } = _decorator;\r\n@ccclass('HiloRoadMapItem')\r\nexport class HiloRoadMapItem extends Component\r\n{\r\n    public setOddsInfo(odds: number)\r\n    {\r\n        let oddsTxt: Label = this.node.children[0].getComponent(Label);\r\n        let isWin: boolean = HiloGameData.getInstance().getIsWin();\r\n        let fontHexColor: string = isWin ? \"#FFFFFF\" : \"#FF0000\";\r\n        oddsTxt.string = `${(odds).toFixed(2)}x`;\r\n        oddsTxt.color.fromHEX(fontHexColor);\r\n    }\r\n}\r\n","import { Prefab } from \"cc\";\r\nimport { Vec3 } from \"cc\";\r\nimport { instantiate } from \"cc\";\r\nimport { Node } from \"cc\";\r\nimport { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport { HiloRoadMapItem } from \"./HiloRoadMapItem\";\r\nimport { HiloPokerTool } from \"../HiloPokerTool\";\r\nimport { tween } from \"cc\";\r\nimport { UITransform } from \"cc\";\r\nimport { Size } from \"cc\";\r\nimport { HiloGameData } from \"../HiloGameData\";\r\nimport { UIOpacity } from \"cc\";\r\nimport { PlayerOperateType } from \"../HiloGameLogic\";\r\nimport { HiloPlayerOperateTypeItem } from \"./HiloPlayerOperateTypeItem\";\r\nimport { SpriteFrame } from \"cc\";\r\nimport { HiloButtonManager } from \"../UI/HiloButtonManager\";\r\nimport { ScrollView } from \"cc\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('HiloRoadMapManager')\r\nexport class HiloRoadMapManager extends Component\r\n{\r\n    @property(Node)\r\n    private cardGroup: Node = null;\r\n    @property(Prefab)\r\n    private roadMapItem: Prefab = null;\r\n    @property(Prefab)\r\n    private operateIcon: Prefab = null;\r\n    @property(Node)\r\n    private bar: Node = null;\r\n    @property(SpriteFrame)\r\n    private highIcon: SpriteFrame = null;\r\n    @property(SpriteFrame)\r\n    private lowIcon: SpriteFrame = null;\r\n    @property(SpriteFrame)\r\n    private skipIcon: SpriteFrame = null;\r\n    @property(ScrollView)\r\n    private roadMapScrollView: ScrollView = null;\r\n    \r\n    private lastCard: Node = null;\r\n    private firstCard: Node = null;\r\n    private operateType: PlayerOperateType = PlayerOperateType.DEFAULT;\r\n    private cardList: Array<Node> = [];\r\n    private operateIconList: Array<Node> = [];\r\n    private readonly screenMaxAmount: number = 5;\r\n    private readonly cardInterval: number = 115;\r\n    private readonly operateIconInterval: number = 58;\r\n    private readonly startX: number = -255;\r\n    private readonly posY: number = 15;\r\n    private readonly barInitPos: Vec3 = new Vec3(-5000, -12);\r\n    private readonly cardsGroupInitSize: Size = new Size(600 ,170);\r\n    private readonly cardAniScale = new Vec3(1.1, 1.1, 1.1);\r\n\r\n    private static instance: HiloRoadMapManager = null;\r\n    public static getInstance(): HiloRoadMapManager \r\n    {\r\n        return HiloRoadMapManager.instance;\r\n    }\r\n    \r\n    protected start()\r\n    {\r\n        HiloRoadMapManager.instance = this;\r\n    }\r\n\r\n    public addRecord(operateType: PlayerOperateType, isFirstCard: boolean)\r\n    {\r\n        const cardIndex: number = HiloGameData.getInstance().getCardIndex();\r\n        const currentOdds: number = HiloGameData.getInstance().getCurrentOdds() / 100;\r\n        const delayTime: number = isFirstCard ? 0.4 : 0.8;\r\n        this.operateType = operateType;\r\n        tween(this.node).delay(delayTime).call(() => \r\n        {\r\n            if (this.cardList.length < this.screenMaxAmount)\r\n            {\r\n                this.addCard(cardIndex, currentOdds);\r\n            }\r\n            else\r\n            {\r\n                const cardGroupTransform: UITransform = this.cardGroup.getComponent(UITransform);\r\n                const width: number = cardGroupTransform.contentSize.width + this.cardInterval * 1;\r\n                const height: number = cardGroupTransform.contentSize.height;\r\n                const contentSize: Size = new Size(width, height)\r\n                cardGroupTransform.setContentSize(contentSize);\r\n                this.moveRecord(cardIndex, currentOdds);\r\n            }\r\n        }).start();\r\n    }\r\n\r\n    private addCard(cardIndex: number, currentOdds: number)\r\n    {\r\n        let card: Node = instantiate(this.roadMapItem);\r\n        let posX: number = 0;\r\n        const cardPos: Vec3 = new Vec3();\r\n        const duration: number = 0.1;\r\n        const scale: number = 1.1;\r\n        this.cardList.push(card);\r\n        card.setParent(this.cardGroup);\r\n        if (!this.firstCard)\r\n        {\r\n            this.firstCard = card;\r\n        }\r\n        if (!this.lastCard)\r\n        {\r\n            card.position = new Vec3(this.startX, this.posY);\r\n        }\r\n        card.children[1].active = this.operateType == PlayerOperateType.DEFAULT;\r\n        posX = !this.lastCard ? this.startX : this.lastCard.position.x + this.cardInterval;\r\n        cardPos.set(posX, this.posY);\r\n        card.position = cardPos;\r\n        this.lastCard = card;\r\n        card.getComponent(HiloRoadMapItem).setOddsInfo(currentOdds);\r\n        card = HiloPokerTool.getInstance().getPoker(card, cardIndex);\r\n        tween(card).to(duration, {scale: new Vec3(card.scale.x * scale, card.scale.y * scale)})\r\n        .to(duration, {scale: new Vec3(card.scale.x, card.scale.y)}).call(() => \r\n        {\r\n            this.addOperateIcon(cardPos);\r\n        }).start();\r\n    }\r\n\r\n    private addOperateIcon(currentCardPos: Vec3)\r\n    {\r\n        const operateIcon: Node = instantiate(this.operateIcon);\r\n        let icon: SpriteFrame = null;\r\n        switch (this.operateType)\r\n        {\r\n            case PlayerOperateType.HIGH:\r\n                icon = this.highIcon;\r\n                break;\r\n            case PlayerOperateType.LOW:\r\n                icon = this.lowIcon;\r\n                break;\r\n            case PlayerOperateType.SKIP:\r\n                icon = this.skipIcon;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        this.operateIconList.push(operateIcon);\r\n        this.cardGroup.insertChild(operateIcon, 0);\r\n        operateIcon.position = new Vec3(currentCardPos.x - this.operateIconInterval, currentCardPos.y);\r\n        operateIcon.getComponent(HiloPlayerOperateTypeItem).setSprite(icon);\r\n        operateIcon.scale = Vec3.ZERO;\r\n        tween(operateIcon).to(0.1, { scale: this.cardAniScale }).to(0.1, { scale: Vec3.ONE }).start();\r\n    }\r\n\r\n    private moveRecord(cardIndex: number, odds: number)\r\n    {\r\n        const duration: number = 0.2;\r\n        const extraCardAmount: number = this.cardList.length - this.screenMaxAmount;\r\n        const lastRecordPos: Vec3 = new Vec3((-extraCardAmount - 1) * (this.cardInterval / 2), this.cardGroup.position.y);\r\n        let targetPosX: number = 0;\r\n        let card: Node = null;\r\n        let operateIcon: Node = null;\r\n        this.roadMapScrollView.scrollToRight(duration);\r\n        tween(this.cardGroup).to(duration, {position: lastRecordPos}).call(() => \r\n        {\r\n            for (let i: number = 0; i < this.cardList.length; i++)\r\n            {\r\n                card = this.cardList[i];\r\n                targetPosX = card.position.x - this.cardInterval / 2;\r\n                tween(card).to(duration, {position: new Vec3(targetPosX, card.position.y)}).call(() => \r\n                {\r\n                    tween(this.node).delay(0.1).call(() => \r\n                    {\r\n                        if (i == this.cardList.length - 1)\r\n                        {\r\n                            this.addCard(cardIndex, odds);\r\n                        }\r\n                    }).start();\r\n                }).start();\r\n            }\r\n\r\n            for (let i: number = 0; i < this.operateIconList.length; i++)\r\n            {\r\n                operateIcon = this.operateIconList[i];\r\n                targetPosX = operateIcon.position.x - this.cardInterval / 2;\r\n                tween(operateIcon).to(duration, {position: new Vec3(targetPosX, operateIcon.position.y)}).start();\r\n            }\r\n        }).start();\r\n    }\r\n\r\n    public refreshRecord()\r\n    {\r\n        const duration: number = 0.2;\r\n        const targetPos: Vec3 = this.firstCard ? new Vec3(this.firstCard.position.x - this.cardInterval, this.firstCard.position.y) : Vec3.ZERO;\r\n        HiloButtonManager.getInstance().setBetLock(false);\r\n        tween(this.cardGroup).to(duration, { position: Vec3.ZERO }).call(() => \r\n        {\r\n            this.cardGroup.children.forEach((card: Node) => \r\n            {\r\n                tween(card).to(duration, { position: targetPos }).start();\r\n            });\r\n        }).delay(duration).call(() => \r\n        {\r\n            this.initRoadMap();\r\n            tween(this.node).delay(0.05).call(() => \r\n            {\r\n                this.addRecord(PlayerOperateType.DEFAULT, true);\r\n            }).delay(0.25).call(() => \r\n            {\r\n                HiloButtonManager.getInstance().setBetLock(true);\r\n            }).start();\r\n        }).start();\r\n    }\r\n\r\n    private initRoadMap()\r\n    {\r\n        this.cardList = [];\r\n        this.operateIconList = [];\r\n        this.lastCard = null;\r\n        this.firstCard = null;\r\n        this.bar.position = this.barInitPos;\r\n        this.cardGroup.destroyAllChildren();\r\n        this.cardGroup.getComponent(UITransform).setContentSize(this.cardsGroupInitSize);\r\n        this.cardGroup.getComponent(UIOpacity).opacity = 255;\r\n    }\r\n}\r\n","import { Component } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport { HiloGameData } from \"../HiloGameData\";\r\nimport NumberFormatter from \"../../../Toolkit/Components/NumberFormatter\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass('HiloScoreManager')\r\nexport class HiloScoreManager extends Component \r\n{\r\n    @property(NumberFormatter)\r\n    private scoreTxt: NumberFormatter = null;\r\n\r\n    private static instance: HiloScoreManager = null;\r\n    public static getInstance(): HiloScoreManager\r\n    {\r\n        return HiloScoreManager.instance;\r\n    }\r\n    \r\n    protected start()\r\n    {\r\n        HiloScoreManager.instance = this;\r\n    }\r\n\r\n    public updateScoreInfo(isShowScore: boolean)\r\n    {\r\n        const gameData: HiloGameData = HiloGameData.getInstance();\r\n        const isWin: boolean = gameData.getIsWin();\r\n        const currentBet: number = gameData.getCurrentBetValue();\r\n        const currentOdds: number = gameData.getCurrentOdds();\r\n        const score: number = Number((currentBet * currentOdds / 100));\r\n        gameData.setScore(score);\r\n        this.scoreTxt.value = isWin ? Number((currentBet * currentOdds / 100).toFixed(2)) : 0;\r\n        this.scoreTxt.node.active = isShowScore;\r\n    }\r\n}\r\n","import { Material, Sprite, Vec3, _decorator } from 'cc';\r\n\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\n@ccclass('HSLSprite')\r\n@executeInEditMode\r\nexport default class HSLSprite extends Sprite {\r\n    @property({ min: -180, max: 180, step: 1, slide: true })\r\n    public set hue(value: number) {\r\n        if (this._hsl.x === value) {\r\n            return;\r\n        }\r\n        this._hsl.x = value;\r\n        this.updateHueProperty();\r\n    }\r\n    public get hue() {\r\n        return this._hsl.x;\r\n    }\r\n\r\n    @property({ min: -100, max: 100, step: 1, slide: true })\r\n    public get saturation(): number {\r\n        return this._hsl.y;\r\n    }\r\n    public set saturation(value: number) {\r\n        if (this._hsl.y === value) {\r\n            return;\r\n        }\r\n        this._hsl.y = value;\r\n        this.updateSaturationProperty();\r\n    }\r\n\r\n    @property({ min: -100, max: 100, step: 1, slide: true })\r\n    public get lightness(): number {\r\n        return this._hsl.z;\r\n    }\r\n    public set lightness(value: number) {\r\n        if (this._hsl.z === value) {\r\n            return;\r\n        }\r\n        this._hsl.z = value;\r\n        this.updateLightnessProperty();\r\n    }\r\n\r\n    private _hsl: Vec3 = Vec3.ZERO.clone();\r\n\r\n    public get hsl(): Readonly<Vec3> {\r\n        return this._hsl.clone();\r\n    }\r\n    public set hsl(value: Vec3) {\r\n        if (this._hsl.equals(value)) {\r\n            return;\r\n        }\r\n        this._hsl.set(value);\r\n        this.updateHSLProperty();\r\n    }\r\n\r\n    protected _onMaterialModified(idx: number, material: Material) {\r\n        super._onMaterialModified(idx, material);\r\n        if (material) {\r\n            this.updateHSLProperty();\r\n        }\r\n    }\r\n\r\n    private updateHSLProperty() {\r\n        this.updateHueProperty();\r\n        this.updateSaturationProperty();\r\n        this.updateLightnessProperty();\r\n    }\r\n\r\n    private updateHueProperty() {\r\n        this.getMaterialInstance(0).setProperty('hue', this._hsl.x);\r\n    }\r\n\r\n    private updateSaturationProperty() {\r\n        this.getMaterialInstance(0).setProperty('saturation', (this._hsl.y + 100) / 100);\r\n    }\r\n\r\n    private updateLightnessProperty() {\r\n        this.getMaterialInstance(0).setProperty('lightness', (this._hsl.z + 100) / 100);\r\n    }\r\n}\r\n","import { Button, Component, Node, _decorator } from 'cc';\r\nimport { PlayerInfo } from '../PlayerInfo';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('HamburgerView')\r\nexport default class HamburgerView extends Component {\r\n    @property(Node)\r\n    public readonly historys : Node[] = [];\r\n\r\n    protected onEnable(): void {\r\n        // check if game acount url is empty, will hide history button\r\n        if (PlayerInfo.getInstance().getAccountInfoUrl() == null) {\r\n            this.historys.forEach((history) => {\r\n                history.active = false;\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n","import { EventTarget, JsonAsset, sp, SpriteAtlas, SpriteFrame, warn } from 'cc';\r\nimport AssetCache from './AssetCache';\r\nimport I18nLoader from './I18nLoader';\r\nimport { SupportLanguage } from './Config/support.config';\r\nimport { fallbackLanguages } from './Config/fallback.config';\r\nimport { ILocaleDataSet } from './I18n.type';\r\n\r\nenum I18nEventType {\r\n    LanguageChanged = 'LanguageChanged',\r\n}\r\n\r\nexport default class I18n extends EventTarget {\r\n    public static readonly EVENT_TYPE = I18nEventType;\r\n    private static instance: I18n = null;\r\n    private readonly caches: Partial<ILocaleDataSet<AssetCache>> = {};\r\n    private readonly loader: I18nLoader = new I18nLoader();\r\n    private readonly defaultLanguage: SupportLanguage = SupportLanguage.EN;\r\n    private _currentLanguage: SupportLanguage = null;\r\n    private _loadLanguagePromise: Promise<void> = null;\r\n\r\n    private constructor() {\r\n        super();\r\n    }\r\n\r\n    public static get Instance() {\r\n        if (!this.instance) {\r\n            this.instance = new I18n();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    public get currentLanguage() {\r\n        return this._currentLanguage;\r\n    }\r\n\r\n    public get currentLanguageForWebview() \r\n    {\r\n        switch (this._currentLanguage) \r\n        {\r\n            //例外處理\r\n            case SupportLanguage.SCH:\r\n                return 'zh-chs';\r\n            case SupportLanguage.TCH:\r\n                return 'zh-cht';\r\n\r\n            default:\r\n                return this._currentLanguage.toString();\r\n        }\r\n    }\r\n\r\n    public get loadingTask() {\r\n        return this.loader.loadingTask;\r\n    }\r\n\r\n    private get cache() {\r\n        return this.caches[this._currentLanguage];\r\n    }\r\n    private set cache(assetCache: AssetCache) {\r\n        this.caches[this._currentLanguage] = assetCache;\r\n    }\r\n\r\n    public get isLoadingLanguage() {\r\n        return !!this._loadLanguagePromise;\r\n    }\r\n\r\n    /**\r\n     * 改變當前遊戲語言\r\n     * @param language 要使用的遊戲語言\r\n     */\r\n    public async changeLanguage(language: string) {\r\n        if (this.isLoadingLanguage) {\r\n            await this._loadLanguagePromise;\r\n        }\r\n        if (!language || language === this._currentLanguage) {\r\n            return;\r\n        }\r\n        const targetLanguage: SupportLanguage = SupportLanguage.contains(language) ? language : this.getFallbackLanguage(language);\r\n        this.handleTitleTranlation(targetLanguage);\r\n        if (!this.caches[targetLanguage]) {\r\n            this.caches[targetLanguage] = new AssetCache();\r\n            this._loadLanguagePromise = this.loader.loadLanguage(targetLanguage, this.caches[targetLanguage]);\r\n            await this._loadLanguagePromise;\r\n            this._loadLanguagePromise = null;\r\n        }\r\n        this._currentLanguage = targetLanguage;\r\n        this.emit(I18n.EVENT_TYPE.LanguageChanged);\r\n    }\r\n\r\n    public waitForLanguageLoaded() {\r\n        if (this._loadLanguagePromise) {\r\n            return this._loadLanguagePromise;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * 取得多語系物件資訊\r\n     * @param key \r\n     * @returns \r\n     */\r\n    public getNodeSetting(key: string): string {\r\n        const data = { ...this.cache.get(JsonAsset, 'nodeSetting')?.json };\r\n        const result: string = data[key];\r\n        if (!result) {\r\n            warn(`Can't find data : ${key} in language: ${this._currentLanguage}`);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 將要顯示的訊息翻譯成目標語言\r\n     * @param key 要顯示的訊息\r\n     * @returns 翻譯後文本\r\n     */\r\n    public getMessage(key: string): string {\r\n        const messages = { ...this.cache.get(JsonAsset, 'errorMessage').json, ...this.cache.get(JsonAsset, 'text')?.json};\r\n        const resultMessage: string = messages[key];\r\n        if (!resultMessage) {\r\n            warn(`Can't find message: ${key} in language: ${this._currentLanguage}`);\r\n        }\r\n        return resultMessage;\r\n    }\r\n\r\n    /**\r\n     * 根據目標圖片取得當前語言中對應的 spriteFrame\r\n     * @param key 目標圖片鍵\r\n     */\r\n    public getSpriteFrame(key: string): SpriteFrame {\r\n        const [a, b] = key.split('@');\r\n        let resultSpriteFrame: SpriteFrame = null;\r\n        if (b) {\r\n            const spriteAtlas = this.cache.get(SpriteAtlas, a);\r\n            if (!spriteAtlas) {\r\n                warn(`Can't find spriteAtlas: ${a} in language: ${this._currentLanguage}`);\r\n            } else {\r\n                resultSpriteFrame = spriteAtlas.getSpriteFrame(b);\r\n            }\r\n        } else {\r\n            resultSpriteFrame = this.cache.get(SpriteFrame, a);\r\n        }\r\n        if (!resultSpriteFrame) {\r\n            warn(`Can't find spriteFrame: ${key} in language: ${this._currentLanguage}`);\r\n        }\r\n        return resultSpriteFrame;\r\n    }\r\n\r\n    public getSkeletonData(key: string): sp.SkeletonData {\r\n        const resultSkeletonData = this.cache.get(sp.SkeletonData, key);\r\n        if (!resultSkeletonData) {\r\n            warn(`Can't find skeleton data: ${key} in language: ${this._currentLanguage}`);\r\n        }\r\n        return resultSkeletonData;\r\n    }\r\n\r\n    private handleTitleTranlation(targetLanguage: SupportLanguage) {\r\n        document.title = 'Hilo';\r\n    }\r\n\r\n    /**\r\n     * 取得替代語言\r\n     * @param language 要被替換掉的語言\r\n     */\r\n    public getFallbackLanguage(language: string): SupportLanguage {\r\n        const fallBackLanguage = fallbackLanguages[language];\r\n        if (!fallBackLanguage) {\r\n            return this.defaultLanguage;\r\n        }\r\n        if (SupportLanguage.contains(fallBackLanguage)) {\r\n            return fallBackLanguage;\r\n        }\r\n        return this.getFallbackLanguage(fallBackLanguage);\r\n    }\r\n}\r\n","import { SupportLanguage } from './Config/support.config';\r\n\r\nexport type ILocaleDataSet<T> = { [value in SupportLanguage]: T };\r\n\r\nexport class LocaleDataSet<T> implements ILocaleDataSet<T> {\r\n    eng: T;\r\n    sch: T;\r\n    tch: T;\r\n    ja: T;\r\n    vi: T;\r\n    pt: T;\r\n    es: T;\r\n\r\n    public getData(language: SupportLanguage) {\r\n        return this[language];\r\n    }\r\n}\r\n","import { Asset, resources, SpriteFrame } from 'cc';\r\nimport AssetCache from './AssetCache';\r\nimport CompositeLoadingTask from '../Toolkit/Helper/LoadingTask/CompositeLoadingTask';\r\nimport { SupportLanguage } from './Config/support.config';\r\nimport { assetPathConfig, cacheableAssetTypeMap, CacheableAssetTypeName } from './Config/assetPath.config';\r\n\r\nexport default class I18nLoader {\r\n    protected _loadingTask: CompositeLoadingTask = null;\r\n\r\n    public get loadingTask() {\r\n        return this._loadingTask;\r\n    }\r\n\r\n    public async loadLanguage(language: SupportLanguage, cache: AssetCache): Promise<void> {\r\n        this._loadingTask = new CompositeLoadingTask(`i18n::load-${language}`);\r\n        await Promise.all(\r\n            Object.entries(assetPathConfig).map(async ([assetTypeName, assetPathMap]) => {\r\n                const assetType = cacheableAssetTypeMap[assetTypeName as CacheableAssetTypeName];\r\n                await Promise.all(\r\n                    Object.entries(assetPathMap).map(async ([assetName, path]) => {\r\n                        const asset = await this.loadAsset(language, `${assetTypeName}/${path}`, assetType);\r\n                        cache.set(assetType, assetName, asset);\r\n                    })\r\n                );\r\n            })\r\n        );\r\n    }\r\n\r\n    private async loadAsset<T extends typeof Asset>(language: SupportLanguage, path: string, assetType: T): Promise<InstanceType<T>> {\r\n        return this._loadingTask.addSimpleTask(\r\n            `i18n::load-${path}`,\r\n            new Promise<InstanceType<T>>((resolve, reject) => {\r\n                resources.load(`i18n/${language}/${path}${(assetType as any) === SpriteFrame ? '/spriteFrame' : ''}`, assetType, (error, asset) => {\r\n                    if (error) {\r\n                        return reject(error);\r\n                    }\r\n                    return resolve(asset as InstanceType<T>);\r\n                });\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { Label } from 'cc';\r\n\r\ndeclare module 'cc' {\r\n    interface Label {\r\n        registerTextChangeCallback(callback: (value: string) => string): void;\r\n        unregisterTextChangeCallback(callback: (value: string) => string): void;\r\n        textChangeCallbackList: ((value: string) => string)[];\r\n    }\r\n}\r\n\r\nLabel.prototype.registerTextChangeCallback = function registerTextChangeCallback(callback: (this: Label, value: string) => string) {\r\n    this.textChangeCallbackList = this.textChangeCallbackList ?? [];\r\n    this.textChangeCallbackList.push(callback);\r\n};\r\n\r\nLabel.prototype.unregisterTextChangeCallback = function unregisterTextChangeCallback(callback: (this: Label, value: string) => string) {\r\n    const index = this.textChangeCallbackList?.indexOf(callback);\r\n    if (index !== -1) {\r\n        this.textChangeCallbackList.splice(index);\r\n    }\r\n};\r\n\r\nconst originalDescriptor = Object.getOwnPropertyDescriptor(Label.prototype, 'string');\r\nconst originSetter = originalDescriptor.set;\r\noriginalDescriptor.set = function set(this: Label, value: string) {\r\n    let finalString: string = value;\r\n    this.textChangeCallbackList?.forEach((callback) => {\r\n        finalString = callback(finalString);\r\n    });\r\n    originSetter.call(this, finalString);\r\n};\r\nObject.defineProperty(Label.prototype, 'string', originalDescriptor);\r\n","// eslint-disable-next-line max-classes-per-file\r\nimport { Component, Label, _decorator } from 'cc';\r\nimport { getLocaleStringLength } from '../Utils/Utility';\r\n\r\nconst { ccclass, property, requireComponent, executeInEditMode } = _decorator;\r\n\r\n@ccclass('FontSizeConstraint')\r\nclass LabelPropertyConstraint {\r\n    @property\r\n    public digit: number = 0;\r\n\r\n    @property\r\n    public fontSize: number = 0;\r\n\r\n    @property\r\n    public lineHeight: number = 0;\r\n}\r\n\r\n@ccclass('LabelPropertyAdjustor')\r\n@requireComponent(Label)\r\n@executeInEditMode\r\nexport default class LabelPropertyAdjustor extends Component {\r\n    @property([LabelPropertyConstraint])\r\n    private constraints: LabelPropertyConstraint[] = [];\r\n\r\n    private label: Label = null;\r\n\r\n    private previousDigit = 0;\r\n\r\n    protected onLoad() {\r\n        this.label = this.getComponent(Label);\r\n        this.label.registerTextChangeCallback((str) => {\r\n            this.updateFontSize(str);\r\n            return str;\r\n        });\r\n        this.constraints.sort((a, b) => b.digit - a.digit);\r\n    }\r\n\r\n    protected start() {\r\n        this.updateFontSize(this.label.string);\r\n    }\r\n\r\n    private updateFontSize(str: string) {\r\n        const currentDigit = getLocaleStringLength(str.replace(/[.|,]/g, ''));\r\n        if (currentDigit === this.previousDigit) {\r\n            return;\r\n        }\r\n        this.previousDigit = currentDigit;\r\n        for (let i = 0; i < this.constraints.length; i++) {\r\n            const constraint = this.constraints[i];\r\n            if (currentDigit >= constraint.digit) {\r\n                this.label.fontSize = constraint.fontSize;\r\n                this.label.lineHeight = constraint.lineHeight;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Color, Component, Label, Node, Toggle, _decorator } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('LanguageItem')\r\nexport class LanguageItem extends Component \r\n{\r\n    @property(Label)\r\n    private languageName: Label = null;\r\n    @property(Node)\r\n    private line: Node = null;\r\n    @property(Toggle)\r\n    private toggle: Toggle = null;\r\n\r\n    protected onLoad()\r\n    {\r\n        this.toggle.isChecked = false;\r\n    }\r\n\r\n    public setLanguageName(name: string)\r\n    {\r\n        this.languageName.string = name;\r\n    }\r\n\r\n    public setLineActive(active: boolean)\r\n    {\r\n        this.line.active = active;\r\n    }\r\n\r\n    public setColor(color: Color)\r\n    {\r\n        this.languageName.color = color;\r\n    }\r\n\r\n    public getToggle(): Toggle\r\n    {\r\n        return this.toggle;\r\n    }\r\n}\r\n","import { Color, instantiate, Node, Prefab, Size, UITransform, Vec3, _decorator } from 'cc';\r\nimport { SupportLanguage } from '../../I18n/Config/support.config';\r\nimport I18n from '../../I18n/I18n';\r\nimport AnimatedPage from '../../Toolkit/Components/Page/AnimatedPage';\r\nimport { HexColorCode } from '../Config/game.config';\r\nimport { LanguageItem } from './LanguageItem';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('LanguageSetting')\r\nexport class LanguageSetting extends AnimatedPage \r\n{\r\n    @property(UITransform)\r\n    private content: UITransform = null;\r\n    @property(Prefab)\r\n    private item: Prefab = null;\r\n\r\n    private readonly itemHeight: number = 100;\r\n    private readonly whiteColor: Color = new Color(HexColorCode.White);\r\n    private readonly yellowColor: Color = new Color(HexColorCode.Yellow);\r\n    private readonly languageName: string[] = \r\n    [\r\n        'English',\r\n        '简体中文',\r\n        '繁體中文',\r\n        'Tiếng Việt',\r\n        '日本語',\r\n        'Español',\r\n        'Português',\r\n        '조선말',\r\n        'Bahasa Indonesia',\r\n        'ไทย',\r\n    ];\r\n\r\n    private supportLanguageNameList: string[] = [];\r\n    private languageItemList: LanguageItem[] = [];\r\n    //重複利用記憶體\r\n    private isChoose: boolean = false;\r\n    private labelColor: Color = new Color();\r\n\r\n    protected onLoad() \r\n    {\r\n        super.onLoad();\r\n        this.getSupportLanguageName();\r\n        this.initOptionsPage();\r\n    }\r\n    \r\n    public async open() \r\n    {\r\n        super.open();\r\n    }\r\n    \r\n    private getSupportLanguageName()\r\n    {\r\n        const supportLanguageValue = Object.values(SupportLanguage);\r\n        for (let i = 0; i < supportLanguageValue.length; i++)\r\n        {\r\n            this.supportLanguageNameList.push(supportLanguageValue[i].toString());\r\n        }\r\n    }\r\n\r\n    private initOptionsPage()\r\n    {\r\n        const count: number = Object.keys(SupportLanguage).length;\r\n        let item: Node = null;\r\n        let position: Vec3 = new Vec3();\r\n        let languageItem: LanguageItem = null;\r\n        this.content.setContentSize(new Size(720, this.itemHeight * count));\r\n\r\n        //add option\r\n        for (let i = 0; i < count; i++)\r\n        {\r\n            this.isChoose = this.getIsChoose(i);\r\n            this.labelColor = this.getLanguageNameColor();\r\n            position.set(0, i * this.itemHeight * -1 - 25);\r\n            item = instantiate(this.item);\r\n            item.setParent(this.content.node);\r\n            item.position = position;\r\n            item.name = this.languageName[i];\r\n            languageItem = item.getComponent(LanguageItem);\r\n            languageItem.setLanguageName(this.languageName[i]);\r\n            languageItem.setLineActive(i != count - 1);\r\n            languageItem.setColor(this.labelColor);\r\n            this.languageItemList.push(languageItem);\r\n\r\n            //add toggle event\r\n            languageItem.getToggle().node.on('toggle', async () => \r\n            {\r\n                await I18n.Instance.changeLanguage(this.supportLanguageNameList[i]);\r\n                this.changeState();\r\n            });\r\n        }\r\n        this.changeState();\r\n    }\r\n\r\n    private getCurrentLanguageIndex(): number\r\n    {\r\n        for (let i = 0; i < this.supportLanguageNameList.length; i++)\r\n        {\r\n            if (I18n.Instance.currentLanguage.toString() == this.supportLanguageNameList[i])\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        //理論上不會執行到這 以防萬一還是return預設的越南語系\r\n        return 3;\r\n    }\r\n\r\n    private getIsChoose(chooseIndex: number): boolean\r\n    {\r\n        return this.getCurrentLanguageIndex() == chooseIndex;\r\n    }\r\n\r\n    private getLanguageNameColor(): Color\r\n    {\r\n        return this.isChoose ? this.yellowColor : this.whiteColor;\r\n    }\r\n\r\n    private changeState()\r\n    {\r\n        for (let i = 0; i < this.languageItemList.length; i++)\r\n        {\r\n            this.isChoose = this.getIsChoose(i);\r\n            this.labelColor = this.getLanguageNameColor();\r\n            this.languageItemList[i].setColor(this.labelColor);\r\n            this.languageItemList[i].getToggle().isChecked = this.isChoose;\r\n        }\r\n    }\r\n}\r\n","import { EventTarget, log, error } from 'cc';\r\n\r\nexport default class LoadingTask extends EventTarget {\r\n    private _completeCount: number;\r\n    private _totalCount: number;\r\n    private _isFinished: boolean;\r\n    private _isSuccess: boolean;\r\n    private _error: Error = null;\r\n\r\n    constructor(private _name: string) {\r\n        super();\r\n        log(`%c=== Task ${_name} Created ===`, 'color:yellow');\r\n        this._completeCount = 0;\r\n        this._totalCount = 0;\r\n        this._isFinished = false;\r\n        this._isSuccess = false;\r\n    }\r\n\r\n    public get name() {\r\n        return this._name;\r\n    }\r\n\r\n    public get completeCount() {\r\n        return this._completeCount;\r\n    }\r\n\r\n    public get totalCount() {\r\n        return this._totalCount;\r\n    }\r\n\r\n    public get isFinished() {\r\n        return this._isFinished;\r\n    }\r\n\r\n    public get isSuccess() {\r\n        return this._isSuccess;\r\n    }\r\n\r\n    public get error() {\r\n        return this._error;\r\n    }\r\n\r\n    public waitForFinish() {\r\n        if (this.isFinished) {\r\n            return (this.isSuccess ? Promise.resolve : Promise.reject)();\r\n        }\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.once('onFinished', () => {\r\n                (this.isSuccess ? resolve : reject)();\r\n            });\r\n        });\r\n    }\r\n\r\n    public waitForStart() {\r\n        if (this.completeCount !== 0) {\r\n            return Promise.resolve();\r\n        }\r\n        return new Promise<void>((resolve) => {\r\n            this.once('onProgress', resolve);\r\n        });\r\n    }\r\n\r\n    public progress(completeCount: number, totalCount: number) {\r\n        this._completeCount = completeCount;\r\n        this._totalCount = totalCount;\r\n        // log(`Task: ${this.name}, progrss: ${((this.completeCount / this.totalCount) * 100).toFixed(2)}%`);\r\n        this.emit('onProgress');\r\n    }\r\n\r\n    public finish(err: Error) {\r\n        if (err) {\r\n            error(err);\r\n        }\r\n        this._error = err;\r\n        this._isSuccess = !err;\r\n        this._isFinished = true;\r\n        log(`%c=== Task: ${this.name} finished (${this.isSuccess ? 'Success' : 'Failed'}) ===`, 'color:yellow');\r\n        this.emit('onFinished');\r\n    }\r\n}\r\n","import { Component, _decorator } from 'cc';\r\nimport LocalizedComponent from './LocalizedComponent';\r\n\r\nconst { property } = _decorator;\r\n\r\nexport default abstract class LocalizedAsset<T extends Component> extends LocalizedComponent {\r\n    @property\r\n    private _key: string = '';\r\n\r\n    @property\r\n    public set key(key: string) {\r\n        this._key = key;\r\n        this.onKeyChange();\r\n    }\r\n    public get key(): string {\r\n        return this._key;\r\n    }\r\n\r\n    private _target: T = null;\r\n\r\n    public get target(): T {\r\n        if (!this._target) {\r\n            this._target = this.getTarget();\r\n        }\r\n        return this._target;\r\n    }\r\n    public set target(component: T) {\r\n        this._target = component;\r\n    }\r\n\r\n    public abstract reset(): void;\r\n\r\n    protected abstract getTarget(): T;\r\n\r\n    protected abstract onKeyChange(): void;\r\n\r\n    protected onLanguageChange() {\r\n        this.onKeyChange();\r\n    }\r\n}\r\n","import { Component, _decorator } from 'cc';\r\nimport I18n from '../I18n';\r\n\r\nconst { executionOrder } = _decorator;\r\n\r\n@executionOrder(-1)\r\nexport default abstract class LocalizedComponent extends Component {\r\n    protected onLoad() {\r\n        I18n.Instance.on(I18n.EVENT_TYPE.LanguageChanged, this.onLanguageChange, this);\r\n    }\r\n\r\n    protected start() {\r\n        this.onLanguageChange();\r\n    }\r\n\r\n    protected onDestroy() {\r\n        I18n.Instance.targetOff(this);\r\n    }\r\n\r\n    protected abstract onLanguageChange(): void;\r\n}\r\n","import { Label, _decorator } from 'cc';\r\nimport I18n from '../I18n';\r\nimport LocalizedAsset from './LocalizedAsset';\r\n\r\nconst { ccclass, requireComponent, menu } = _decorator;\r\n\r\n@ccclass('LocalizedFontSize')\r\n@requireComponent(Label)\r\n@menu('Internationalization/LocalizedFontSize')\r\nexport default class LocalizedFontSize extends LocalizedAsset<Label> {\r\n    private fontSize: number = 0;\r\n    private fontSizeKey: string = \"\";\r\n\r\n    public reset() \r\n    {\r\n        this.target.string = '';\r\n    }\r\n\r\n    protected getTarget(): Label {\r\n        return this.getComponent(Label);\r\n    }\r\n\r\n    protected async onKeyChange(): Promise<void>\r\n    {\r\n        if (!this.target) \r\n        {\r\n            throw new Error(\"Target can't be empty\");\r\n        }\r\n\r\n        if (!I18n.Instance.currentLanguage) \r\n        {\r\n            if (I18n.Instance.isLoadingLanguage) \r\n            {\r\n                await I18n.Instance.waitForLanguageLoaded();\r\n            } \r\n            else \r\n            {\r\n                throw new Error('Set current language first');\r\n            }\r\n        }\r\n\r\n        this.fontSizeKey = `${this.node.name}-FontSize`;\r\n        this.fontSize = Number(I18n.Instance.getNodeSetting(this.fontSizeKey));\r\n        if (this.fontSize)\r\n        {\r\n            this.target.fontSize = this.fontSize;\r\n            this.target.lineHeight = this.fontSize;\r\n        }\r\n        else\r\n        {\r\n            throw new Error(`Font size data error, node name : ${this.node.name} `);\r\n        }\r\n    }\r\n}\r\n","import { Label, _decorator } from 'cc';\r\nimport I18n from '../I18n';\r\nimport LocalizedAsset from './LocalizedAsset';\r\nimport { fillTextArgument } from '../../Toolkit/Utils/Utility';\r\n\r\nconst { ccclass, requireComponent, menu } = _decorator;\r\n\r\n@ccclass('LocalizedLabel')\r\n@requireComponent(Label)\r\n@menu('Internationalization/LocalizedLabel')\r\nexport default class LocalizedLabel extends LocalizedAsset<Label> {\r\n    protected async onKeyChange(): Promise<void> {\r\n        if (!this.target) {\r\n            throw new Error(\"Target can't be empty\");\r\n        }\r\n        if (!I18n.Instance.currentLanguage) {\r\n            if (I18n.Instance.isLoadingLanguage) {\r\n                await I18n.Instance.waitForLanguageLoaded();\r\n            } else {\r\n                throw new Error('Set current language first');\r\n            }\r\n        }\r\n        const [messageKey, ...messageArgs] = this.key.split('|');\r\n        this.target.string = fillTextArgument(I18n.Instance.getMessage(messageKey) ?? messageKey, messageArgs);\r\n    }\r\n\r\n    public reset() {\r\n        this.target.string = '';\r\n    }\r\n\r\n    protected getTarget(): Label {\r\n        return this.getComponent(Label);\r\n    }\r\n}\r\n","import { Vec3, _decorator } from 'cc';\r\nimport I18n from '../I18n';\r\nimport LocalizedAsset from './LocalizedAsset';\r\nimport { Node } from 'cc';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('LocalizedPosition')\r\n@menu('Internationalization/LocalizedPosition')\r\nexport default class LocalizedPosition extends LocalizedAsset<any> {\r\n    private positionData: Array<string> = new Array<string>();\r\n    private positionX: number = 0;\r\n    private positionY: number = 0;\r\n    private positionKey: string = \"\";\r\n    private position: Vec3 = new Vec3();\r\n\r\n    public reset() \r\n    {\r\n        this.target = null;\r\n        this.positionData = null;\r\n    }\r\n\r\n    protected getTarget(): Node {\r\n        return this.node;\r\n    }\r\n\r\n    protected async onKeyChange(): Promise<void>\r\n    {\r\n        if (!this.target) \r\n        {\r\n            throw new Error(\"Target can't be empty\");\r\n        }\r\n\r\n        if (!I18n.Instance.currentLanguage) \r\n        {\r\n            if (I18n.Instance.isLoadingLanguage) \r\n            {\r\n                await I18n.Instance.waitForLanguageLoaded();\r\n            } \r\n            else \r\n            {\r\n                throw new Error('Set current language first');\r\n            }\r\n        }\r\n\r\n        this.positionKey = `${this.node.name}-Position`\r\n        this.positionData = I18n.Instance.getNodeSetting(this.positionKey).split(\",\");\r\n        this.positionX = Number(this.positionData[0]);\r\n        this.positionY = Number(this.positionData[1]);\r\n        this.position.set(this.positionX, this.positionY);\r\n        if (this.positionData && !Number.isNaN(this.positionX) && !Number.isNaN(this.positionY)) \r\n        {\r\n            this.target.position = this.position;\r\n        }\r\n        else\r\n        {\r\n            throw new Error(`Position data error, node name : ${this.node.name} `);\r\n        }\r\n    }\r\n}\r\n","import { sp, _decorator } from 'cc';\r\nimport I18n from '../I18n';\r\nimport LocalizedAsset from './LocalizedAsset';\r\n\r\nconst { ccclass, requireComponent, menu } = _decorator;\r\n\r\n@ccclass('LocalizedSkeleton')\r\n@requireComponent(sp.Skeleton)\r\n@menu('Internationalization/LocalizedSkeleton')\r\nexport default class LocalizedSkeleton extends LocalizedAsset<sp.Skeleton> {\r\n    protected async onKeyChange(): Promise<void> {\r\n        if (!this.target) {\r\n            throw new Error(\"Target can't be empty\");\r\n        }\r\n        if (!I18n.Instance.currentLanguage) {\r\n            if (I18n.Instance.isLoadingLanguage) {\r\n                await I18n.Instance.waitForLanguageLoaded();\r\n            } else {\r\n                throw new Error('Set current language first');\r\n            }\r\n        }\r\n        const skeletonData = I18n.Instance.getSkeletonData(this.key);\r\n        if (skeletonData) {\r\n            const state = this.target.getState();\r\n            this.target.skeletonData = skeletonData;\r\n            if (state) {\r\n                state.tracks.forEach((track) => {\r\n                    const {\r\n                        trackIndex,\r\n                        loop,\r\n                        trackTime,\r\n                        animation: { name: animationName },\r\n                    } = track;\r\n                    this.target.setAnimation(trackIndex, animationName, loop).trackTime = trackTime;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.target.skeletonData = null;\r\n    }\r\n\r\n    protected getTarget(): sp.Skeleton {\r\n        return this.getComponent(sp.Skeleton);\r\n    }\r\n}\r\n","import { Sprite, _decorator } from 'cc';\r\nimport I18n from '../I18n';\r\nimport LocalizedAsset from './LocalizedAsset';\r\n\r\nconst { ccclass, requireComponent, menu } = _decorator;\r\n\r\n@ccclass('LocalizedSprite')\r\n@requireComponent(Sprite)\r\n@menu('Internationalization/LocalizedSprite')\r\nexport default class LocalizedSprite extends LocalizedAsset<Sprite> {\r\n    protected async onKeyChange(): Promise<void> {\r\n        if (!this.target) {\r\n            throw new Error(\"Target can't be empty\");\r\n        }\r\n        if (!I18n.Instance.currentLanguage) {\r\n            if (I18n.Instance.isLoadingLanguage) {\r\n                await I18n.Instance.waitForLanguageLoaded();\r\n            } else {\r\n                throw new Error('Set current language first');\r\n            }\r\n        }\r\n        this.target.spriteFrame = I18n.Instance.getSpriteFrame(this.key);\r\n    }\r\n\r\n    public reset() {\r\n        this.target.spriteFrame = null;\r\n    }\r\n\r\n    protected getTarget(): Sprite {\r\n        return this.getComponent(Sprite);\r\n    }\r\n}\r\n","import { _decorator, Component, Button, Label } from 'cc';\r\nimport { CourtInfoManager } from './CourtInfoManager';\r\nimport { Data } from './Data';\r\nimport { PlayerInfoManager } from './PlayerInfoManager';\r\nimport { PlayerListManager } from './PlayerListManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MainUI')\r\nexport class MainUI extends Component \r\n{\r\n    @property(Button)\r\n    private btnAddPlayer: Button = null;\r\n    @property(Button)\r\n    private btnPlayerList: Button = null;\r\n    @property(Button)\r\n    private btnSetCourt_1: Button = null;\r\n    @property(Button)\r\n    private btnSetCourt_2: Button = null;\r\n\r\n    @property(Label)\r\n    private court_1_name: Label = null;\r\n    @property(Label)\r\n    private court_1_a1: Label = null;\r\n    @property(Label)\r\n    private court_1_a2: Label = null;\r\n    @property(Label)\r\n    private court_1_b1: Label = null;\r\n    @property(Label)\r\n    private court_1_b2: Label = null;\r\n\r\n    @property(Label)\r\n    private court_2_name: Label = null;\r\n    @property(Label)\r\n    private court_2_a1: Label = null;\r\n    @property(Label)\r\n    private court_2_a2: Label = null;\r\n    @property(Label)\r\n    private court_2_b1: Label = null;\r\n    @property(Label)\r\n    private court_2_b2: Label = null;\r\n\r\n    private static instance: MainUI = null;\r\n    public static getInstance(): MainUI\r\n    {\r\n        return MainUI.instance;\r\n    }\r\n    \r\n    protected start() \r\n    {\r\n        MainUI.instance = this;\r\n        this.addBtnEvent();\r\n    }\r\n\r\n    private addBtnEvent()\r\n    {\r\n        this.btnAddPlayer.node.on(Button.EventType.CLICK, this.onBtnAddPlayer.bind(this));\r\n        this.btnPlayerList.node.on(Button.EventType.CLICK, this.onBtnPlayerList.bind(this));\r\n        this.btnSetCourt_1.node.on(Button.EventType.CLICK, () => { this.onBtnSetCourt(0); });\r\n        this.btnSetCourt_2.node.on(Button.EventType.CLICK, () => { this.onBtnSetCourt(1); });\r\n    }\r\n\r\n    private onBtnAddPlayer()\r\n    {\r\n        PlayerInfoManager.getInstance().open();\r\n    }\r\n    \r\n    private onBtnPlayerList()\r\n    {\r\n        PlayerListManager.getInstance().open(false);        \r\n    }\r\n    \r\n    private onBtnSetCourt(courtIndex: number)\r\n    {\r\n        CourtInfoManager.getInstance().open(courtIndex);\r\n    }\r\n\r\n    public updateCourtInfo(courtIndex: number)\r\n    {\r\n        if (courtIndex == 0) \r\n        {\r\n            this.court_1_name.string = Data.courtInfoList[courtIndex].courtName;\r\n            this.court_1_a1.string = Data.courtInfoList[courtIndex].teamA[0].playerName;\r\n            this.court_1_a2.string = Data.courtInfoList[courtIndex].teamA[1].playerName;\r\n            this.court_1_b1.string = Data.courtInfoList[courtIndex].teamB[0].playerName;\r\n            this.court_1_b2.string = Data.courtInfoList[courtIndex].teamB[1].playerName;\r\n        }\r\n        \r\n        if (courtIndex == 1) \r\n        {\r\n            this.court_2_name.string = Data.courtInfoList[courtIndex].courtName;\r\n            this.court_2_a1.string = Data.courtInfoList[courtIndex].teamA[0].playerName;\r\n            this.court_2_a2.string = Data.courtInfoList[courtIndex].teamA[1].playerName;\r\n            this.court_2_b1.string = Data.courtInfoList[courtIndex].teamB[0].playerName;\r\n            this.court_2_b2.string = Data.courtInfoList[courtIndex].teamB[1].playerName;\r\n        }\r\n    }\r\n}\r\n","import { _decorator, Component, randomRangeInt } from 'cc';\r\nimport { Data, PlayerInfo } from './Data';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MatchManager')\r\nexport class MatchManager extends Component \r\n{\r\n    private restingPlayers: PlayerInfo[] = [];\r\n    private needToPlayList: PlayerInfo[] = [];\r\n\r\n    private static instance: MatchManager = null;\r\n    public static getInstance(): MatchManager\r\n    {\r\n        return MatchManager.instance;\r\n    }\r\n    \r\n    protected start() \r\n    {\r\n        MatchManager.instance = this;\r\n    }\r\n\r\n    public getNextMatchPlayers(): PlayerInfo[][]\r\n    {\r\n        const teamA: PlayerInfo[] = [];\r\n        const teamB: PlayerInfo[] = [];\r\n        const nextMatchPlayers: PlayerInfo[][] = [teamA, teamB];\r\n        let nextPlayer: PlayerInfo = null;\r\n        this.clearFakePlayer();\r\n        this.updateRestingPlyers();\r\n        this.updateNeedToPlayList();\r\n        for (let i = 0; i < 4; i++)\r\n        {\r\n            nextPlayer = this.tryGetPlayer();\r\n            if (i < 2)\r\n            {\r\n                teamA.push(nextPlayer);\r\n            }\r\n            else\r\n            {\r\n                teamB.push(nextPlayer);\r\n            }\r\n        }\r\n        return nextMatchPlayers;\r\n    }\r\n\r\n    private tryGetPlayer(): PlayerInfo\r\n    {\r\n        let removeIndex: number = 0;\r\n        let player: PlayerInfo = null;\r\n        if (this.needToPlayList.length > 0)\r\n        {\r\n            player = this.needToPlayList[randomRangeInt(0, this.needToPlayList.length)];\r\n        }\r\n        if (!player)\r\n        {\r\n            player = this.restingPlayers[randomRangeInt(0, this.restingPlayers.length)];\r\n            if (!player)\r\n            {\r\n                player = new PlayerInfo();\r\n            }\r\n            else\r\n            {\r\n                removeIndex = this.restingPlayers.indexOf(player);\r\n                this.restingPlayers.splice(removeIndex, 1);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            removeIndex = this.needToPlayList.indexOf(player);\r\n            this.needToPlayList.splice(removeIndex, 1);\r\n        }\r\n        return player;\r\n    }\r\n    \r\n    private updateNeedToPlayList()\r\n    {\r\n        this.needToPlayList = [];\r\n        for (let i = 0; i < this.restingPlayers.length; i++)\r\n        {\r\n            if (this.getIsNeedToPlay(i))\r\n            {\r\n                this.needToPlayList.push(this.restingPlayers[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateRestingPlyers()\r\n    {\r\n        const newRestingPlayer: PlayerInfo[] = [];\r\n        const playerInfoList: PlayerInfo[] = Data.playerInfoList;\r\n        this.restingPlayers = [];\r\n        playerInfoList.forEach((playerInfo: PlayerInfo) => \r\n        {\r\n            if (!playerInfo.isPlaying)\r\n            {\r\n                newRestingPlayer.push(playerInfo);\r\n            }\r\n        });\r\n        this.restingPlayers = newRestingPlayer;\r\n    }\r\n\r\n    private clearFakePlayer()\r\n    {\r\n        const playerInfoList: PlayerInfo[] = Data.playerInfoList;\r\n        let player: PlayerInfo = null;\r\n        for (let i = 0; i < playerInfoList.length; i++)\r\n        {\r\n            player = playerInfoList[i];\r\n            if (player.playerName == \"\")\r\n            {\r\n                const removeIndex: number = playerInfoList.indexOf(player);\r\n                playerInfoList.splice(removeIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getIsNeedToPlay(playerIndex: number): boolean\r\n    {\r\n        let totalMatchCount: number = 0;\r\n        let averageMatchCount: number = 0;\r\n        for (let i = 0; i < this.restingPlayers.length; i++)\r\n        {\r\n            if (i != playerIndex)\r\n            {\r\n                totalMatchCount += this.restingPlayers[i].completeMatchCount;\r\n            }\r\n        }\r\n        averageMatchCount = totalMatchCount / (this.restingPlayers.length - 1);\r\n        return averageMatchCount > this.restingPlayers[playerIndex].completeMatchCount;\r\n    }\r\n}\r\n","import { _decorator } from 'cc';\r\nimport LocalizedLabel from '../../I18n/LocalizedComponent/LocalizedLabel';\r\nimport { Button } from 'cc';\r\nimport { PlayerInfo } from '../PlayerInfo';\r\nimport { GameState, HiloGameLogic } from '../Hilo/HiloGameLogic';\r\nimport AnimatedPage from '../../Toolkit/Components/Page/AnimatedPage';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MessageDialog')\r\nexport default class MessageDialog extends AnimatedPage {\r\n    @property(LocalizedLabel)\r\n    private readonly content: LocalizedLabel = null;\r\n\r\n    protected async onLoad() {\r\n        super.onLoad();\r\n        this.closeButton.node.on(Button.EventType.CLICK, () => \r\n        {\r\n            PlayerInfo.getInstance().isNotEnoughMsgExist = false;\r\n        });\r\n    }\r\n\r\n    public display(message: string) \r\n    {\r\n        if (message == \"insufficient balance\" || message == \"3001\")\r\n        {\r\n            PlayerInfo.getInstance().isNotEnoughMsgExist = true;\r\n            if (HiloGameLogic.getInstance().getGameState() == GameState.GAME_STATE_BET)\r\n            {\r\n                HiloGameLogic.getInstance().setGameState(GameState.GAME_STATE_START);\r\n            }\r\n        }\r\n        this.content.key = message;\r\n        this.open();\r\n    }\r\n\r\n    protected async playOpenAnimation(): Promise<void> {\r\n        await super.playOpenAnimation();\r\n    }\r\n\r\n    protected async playCloseAnimation(): Promise<void> {\r\n        await super.playCloseAnimation();\r\n    }\r\n}\r\n","import { Component, instantiate, Node, NodePool, Prefab, _decorator } from \"cc\";\r\nimport { StartUp } from \"./StartUp\";\r\nimport MessageDialog from \"./GameObject/MessageDialog\";\r\nimport Application from \"../Application/Application\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"MessageManager\")\r\nexport default class MessageManager extends Component {\r\n  @property(Node)\r\n  private readonly messageDialogRoot: Node = null;\r\n\r\n  @property(Prefab)\r\n  private messageDialogPrefab: Prefab = null;\r\n\r\n  private messageDialogPool: NodePool = new NodePool();\r\n\r\n  private fatalErrorMessage: MessageDialog = null;\r\n  private gameStateErrorMessage: MessageDialog = null;\r\n\r\n  protected onLoad() {\r\n    StartUp.getInstance().attachMessageManager(this);\r\n  }\r\n\r\n  public async showFatalError(message: string) {\r\n    if (this.fatalErrorMessage) {\r\n      return;\r\n    }\r\n    this.fatalErrorMessage = await this.getMessageDialog();\r\n    this.fatalErrorMessage.node.once(MessageDialog.EventType.CLOSE, () => {\r\n      this.fatalErrorMessage = null;\r\n      StartUp.getInstance().closeGame();\r\n    });\r\n    if (Application.Instance.config.hideExit) {\r\n      // hide exit button if needed\r\n      this.fatalErrorMessage.closeButton.node.active = false;\r\n    }\r\n    this.fatalErrorMessage.node.setSiblingIndex(\r\n      this.messageDialogRoot.children.length - 1\r\n    );\r\n    this.fatalErrorMessage.display(message);\r\n\r\n    // if (this.messageDialogRoot) {\r\n    //     this.messageDialogRoot.children.forEach((node) => node.getComponent(MessageDialog).close());\r\n    // }\r\n  }\r\n\r\n  public async showGameStateError(message: string) {\r\n    // can't open when displaying fatal error message\r\n    if (this.fatalErrorMessage) {\r\n      return;\r\n    }\r\n    if (this.gameStateErrorMessage) {\r\n      return;\r\n    }\r\n    this.gameStateErrorMessage = await this.getMessageDialog();\r\n    this.gameStateErrorMessage.node.once(MessageDialog.EventType.CLOSE, () => {\r\n      this.gameStateErrorMessage = null;\r\n    });\r\n    this.gameStateErrorMessage.node.setSiblingIndex(\r\n      this.messageDialogRoot.children.length - 1\r\n    );\r\n    this.gameStateErrorMessage.display(message);\r\n  }\r\n\r\n  public hideGameStateError() {\r\n    this.gameStateErrorMessage?.close();\r\n  }\r\n\r\n  public async showHint(message: string) {\r\n    // can't open when displaying fatal error message\r\n    if (this.fatalErrorMessage) {\r\n      return;\r\n    }\r\n    (await this.getMessageDialog()).display(message);\r\n  }\r\n\r\n  private async getMessageDialog() {\r\n    const node =\r\n      this.messageDialogPool.get() ?? (await this.spawnMessageDialog());\r\n    this.messageDialogRoot.addChild(node);\r\n    return node.getComponent(MessageDialog);\r\n  }\r\n\r\n  private async spawnMessageDialog() {\r\n    const node = instantiate(this.messageDialogPrefab);\r\n    node.on(MessageDialog.EventType.CLOSE, () =>\r\n      this.messageDialogPool.put(node)\r\n    );\r\n    return node;\r\n  }\r\n}\r\n","import { _decorator, Component, Node, Canvas, sys } from 'cc';\r\nimport Nosleep from 'nosleep.js';\r\n\r\nconst { ccclass, requireComponent } = _decorator;\r\nlet noSleep: Nosleep;\r\nif (sys.isMobile) {\r\n    noSleep = new Nosleep();\r\n}\r\n\r\n@ccclass('NoSleepController')\r\n@requireComponent(Canvas)\r\nexport class NoSleepController extends Component {\r\n    protected onLoad() {\r\n        if (!sys.isMobile || noSleep.isEnabled) {\r\n            return;\r\n        }\r\n        this.node.on(Node.EventType.TOUCH_END, this._onTouchEnd, this, true);\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        this.node.off(Node.EventType.TOUCH_END, this._onTouchEnd, this, true);\r\n    }\r\n\r\n    private _onTouchEnd() {\r\n        noSleep.enable().then(() => {\r\n            this.node.off(Node.EventType.TOUCH_END, this._onTouchEnd, this, true);\r\n        });\r\n    }\r\n}\r\n","import * as cc from 'cc';\r\n\r\nconst { ccclass, property, requireComponent, executeInEditMode } = cc._decorator;\r\n\r\nexport interface IFormatOption {\r\n    displayDecimal: boolean;\r\n    displayDecimalZero: boolean;\r\n    displayLeadingZero: boolean;\r\n    displayThousands: boolean;\r\n    displayZero: boolean;\r\n    maxIntegerLength: number;\r\n    maxDecimalLength: number;\r\n    prefixText: string;\r\n    posfixText: string;\r\n}\r\n\r\n@ccclass\r\n@requireComponent(cc.Label)\r\n@executeInEditMode\r\nexport default class NumberFormatter extends cc.Component implements IFormatOption {\r\n    @property({ tooltip: '顯示小數' })\r\n    public displayDecimal: boolean = false;\r\n\r\n    @property({ tooltip: '小數點不足的位數補0' })\r\n    public displayDecimalZero: boolean = false;\r\n\r\n    @property({ tooltip: '整數不足的位數補0' })\r\n    public displayLeadingZero: boolean = false;\r\n\r\n    @property({ tooltip: '每三位數加入逗號' })\r\n    public displayThousands: boolean = false;\r\n\r\n    @property({ tooltip: '是否顯示0' })\r\n    public displayZero: boolean = false;\r\n\r\n    @property({ tooltip: '整數最高位數' })\r\n    public maxIntegerLength: number = 0;\r\n\r\n    @property({ tooltip: '小數最高位數' })\r\n    public maxDecimalLength: number = 0;\r\n\r\n    @property({ tooltip: '置於最前方的字串' })\r\n    public prefixText: string = '';\r\n\r\n    @property({ tooltip: '置於最後方的字串' })\r\n    public posfixText: string = '';\r\n\r\n    @property\r\n    public set value(value: number) {\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n        this._value = value;\r\n        this.updateTextDisplay();\r\n    }\r\n    public get value() {\r\n        return this._value;\r\n    }\r\n\r\n    @property\r\n    private _value: number = 0;\r\n\r\n    private label: cc.Label = null;\r\n\r\n    protected onLoad() {\r\n        this.label = this.getComponent(cc.Label);\r\n    }\r\n\r\n    protected start() {\r\n        this.updateTextDisplay();\r\n    }\r\n\r\n    public updateTextDisplay() {\r\n        if (!this.enabled) {\r\n            return;\r\n        }\r\n        if (!this.label) {\r\n            return;\r\n        }\r\n        this.label.string = NumberFormatter.format(this.value, {\r\n            displayDecimal: this.displayDecimal,\r\n            displayDecimalZero: this.displayDecimalZero,\r\n            displayLeadingZero: this.displayLeadingZero,\r\n            displayThousands: this.displayThousands,\r\n            displayZero: this.displayZero,\r\n            maxIntegerLength: this.maxIntegerLength,\r\n            maxDecimalLength: this.maxDecimalLength,\r\n            prefixText: this.prefixText,\r\n            posfixText: this.posfixText,\r\n        });\r\n    }\r\n\r\n    public static format(value: number, formatOption: Partial<IFormatOption>): string {\r\n        const {\r\n            displayDecimal = false,\r\n            displayDecimalZero = false,\r\n            displayLeadingZero = false,\r\n            displayThousands = false,\r\n            displayZero = false,\r\n            maxIntegerLength = 0,\r\n            maxDecimalLength = 0,\r\n            prefixText = '',\r\n            posfixText = '',\r\n        } = formatOption;\r\n\r\n        // fraction part\r\n\r\n        // 固定顯示小數點後幾位\r\n        const decimalPointNumber = displayDecimal ? maxDecimalLength : 0;\r\n        const precision = 10 ** decimalPointNumber;\r\n        let precisionValue = value * precision;\r\n        // 去讀小數點誤差\r\n        precisionValue = Math.abs(precisionValue - Math.round(precisionValue)) < 0.000001 ? Math.round(precisionValue) : precisionValue;\r\n        let resultText = (Math.trunc(precisionValue) / precision).toFixed(decimalPointNumber);\r\n\r\n        // 清除小數點的 0\r\n        if (!displayDecimalZero) {\r\n            resultText = resultText.replace(/(\\d+\\.\\d*[1-9]|\\d+)(\\.?0*)/, '$1');\r\n        }\r\n\r\n        // integer part\r\n\r\n        // 前面添加 0\r\n        if (displayLeadingZero) {\r\n            const integerPart: RegExpMatchArray = resultText.match(/\\d+/);\r\n            resultText = resultText.replace(/(\\d+)/, `${'0'.repeat(maxIntegerLength - integerPart[0].length)}$1`);\r\n        }\r\n\r\n        // general\r\n\r\n        // 每三位數加入逗號\r\n        if (displayThousands) {\r\n            const texts: string[] = resultText.split('.');\r\n            resultText = texts[0].replace(/(\\d)(?=(\\d{3})+$)/g, '$1,') + (texts[1] ? `.${texts[1]}` : '');\r\n        }\r\n\r\n        // 是否顯示 0\r\n        if (!displayZero && value === 0) {\r\n            resultText = '';\r\n        }\r\n\r\n        if (resultText !== '') {\r\n            resultText = `${prefixText}${resultText}${posfixText}`;\r\n        }\r\n\r\n        return resultText;\r\n    }\r\n}\r\n","import { Button, Component, Node, _decorator } from 'cc';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nenum PageEventType {\r\n    OPEN = 'Page::OPEN',\r\n    CLOSE = 'Page::CLOSE',\r\n}\r\n\r\n@ccclass('Page')\r\nexport default class Page extends Component {\r\n    public static readonly EventType = PageEventType;\r\n\r\n    @property(Node)\r\n    public readonly view: Node = null;\r\n\r\n    @property(Node)\r\n    public readonly mask: Node = null;\r\n\r\n    @property(Button)\r\n    public readonly openButton: Button = null;\r\n\r\n    @property(Button)\r\n    public readonly closeButton: Button = null;\r\n\r\n    @property\r\n    private readonly closeOnBlur: boolean = false;\r\n    public closeCallBack: Function = null;\r\n\r\n    public get isVisible() {\r\n        return this.view.active;\r\n    }\r\n\r\n    private _isFreezing = false;\r\n\r\n    protected set isFreezing(flag: boolean) {\r\n        this._isFreezing = flag;\r\n    }\r\n    public get isFreezing() {\r\n        return this._isFreezing;\r\n    }\r\n\r\n    protected onLoad() {\r\n        this.openButton?.node.on(Button.EventType.CLICK, () => {\r\n            this.open();\r\n        });\r\n        this.closeButton?.node.on(Button.EventType.CLICK, () => {\r\n            if (!this.closeCallBack)\r\n            {\r\n                this.close();\r\n            }\r\n            else\r\n            {\r\n                this.closeCallBack();\r\n            }\r\n        });\r\n        this.mask?.on(Node.EventType.TOUCH_END, () => {\r\n            if (this.closeOnBlur) {\r\n                this.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    public async open() {\r\n        if (this.isVisible || this._isFreezing) {\r\n            return;\r\n        }\r\n        this.view.active = true;\r\n        if (this.mask) {\r\n            this.mask.active = true;\r\n        }\r\n        this.node.emit(PageEventType.OPEN);\r\n        await this.playOpenAnimation();\r\n    }\r\n\r\n    public async close(isForce = false) {\r\n        if (!this.isVisible || (this._isFreezing && !isForce)) {\r\n            return;\r\n        }\r\n        await this.playCloseAnimation();\r\n        this.view.active = false;\r\n        if (this.mask) {\r\n            this.mask.active = false;\r\n        }\r\n        this.node.emit(PageEventType.CLOSE);\r\n    }\r\n\r\n    public waitForOpen() {\r\n        return new Promise((resolve) => {\r\n            this.node.once(Page.EventType.OPEN, resolve);\r\n        });\r\n    }\r\n\r\n    public waitForClose() {\r\n        return new Promise((resolve) => {\r\n            this.node.once(Page.EventType.CLOSE, resolve);\r\n        });\r\n    }\r\n\r\n    protected playOpenAnimation(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected playCloseAnimation(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n}\r\n","/**\r\n * 從 queryString取得目標 value\r\n * @param param 目標 key\r\n */\r\nfunction getParamSearch(param: string): string {\r\n    return new URL(document.location.href).searchParams.get(param);\r\n}\r\n\r\nnamespace Parameter {\r\n    /**\r\n     * 取得目標 value，若是找不到則回傳 default value\r\n     * @param paramKey 目標 key\r\n     * @param defaultValue 預設值\r\n     */\r\n    export function get(paramKey: string, defaultValue: string = null) \r\n    {\r\n        if (!getParamSearch(paramKey) || getParamSearch(paramKey) == \"\")\r\n        {\r\n            return defaultValue;\r\n        }\r\n        return getParamSearch(paramKey);\r\n    }\r\n}\r\n\r\nexport default Parameter;\r\n","import { BalanceResponseData } from \"../DTO/Balance.dto\";\r\nimport { BetRequestData, BetResponseData } from \"../DTO/Bet.dto\";\r\nimport { DebugRequestData } from \"../DTO/Debug.dto\";\r\nimport { CashoutRequestData, CashoutResponseData, SkipRequestData, SkipResponseData } from \"../DTO/Game.dto\";\r\nimport { LoginRequestData, LoginResponseData } from \"../DTO/Login.dto\";\r\nimport { EnterTableResponseData } from \"../DTO/Table.dto\";\r\n\r\nexport enum PathName \r\n{\r\n    Refresh = 'game.table.refresh',\r\n    Debug = 'game.table.debug',\r\n    Login = 'auth.login',\r\n    Balance = 'auth.balance',\r\n    Hall = 'game.halls',\r\n    EnterTable = 'game.table.entry',\r\n    ExitTable = 'game.table.exit',\r\n    Cashout = 'game.table.cashout',\r\n    Ack = 'game.ack',\r\n    Bet = 'game.table.bet',\r\n    Skip = 'game.table.skip',\r\n}\r\n\r\nexport type RequestResponseDataType = \r\n{\r\n    [PathName.Refresh]: [undefined, EnterTableResponseData];\r\n    [PathName.Debug]: [DebugRequestData, never];\r\n    [PathName.Login]: [LoginRequestData, LoginResponseData];\r\n    [PathName.Hall]: [undefined, undefined];\r\n    [PathName.EnterTable]: [undefined, EnterTableResponseData];\r\n    [PathName.ExitTable]: [undefined, undefined];\r\n    [PathName.Bet]: [BetRequestData, BetResponseData];\r\n    [PathName.Ack]: [undefined, never];\r\n    [PathName.Cashout]: [CashoutRequestData, CashoutResponseData];\r\n    [PathName.Skip]: [SkipRequestData, SkipResponseData];\r\n};\r\n\r\nexport type PublishDataType = \r\n{\r\n    [PathName.Login]: LoginResponseData;\r\n    [PathName.Balance]: BalanceResponseData;\r\n    [PathName.EnterTable]: EnterTableResponseData;\r\n    [PathName.ExitTable]: undefined;\r\n    [PathName.Bet]: BetResponseData;\r\n    [PathName.Cashout]: CashoutResponseData;\r\n    [PathName.Skip]: SkipResponseData;\r\n};\r\n","\r\nimport { Label, Sprite, SpriteFrame } from 'cc';\r\nimport { Color } from 'cc';\r\nimport { _decorator, Component, Node } from 'cc';\r\nimport NumberFormatter from '../../../Toolkit/Components/NumberFormatter';\r\nimport { HexColorCode } from '../../Config/game.config';\r\nimport DenomConverter from '../../Helper/DenomConverter';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerBetInfo')\r\nexport class PlayerBetInfo extends Component {\r\n    @property(Label)\r\n    private nickname: Label = null;\r\n    @property(NumberFormatter)\r\n    private betValue: NumberFormatter = null;\r\n    @property(NumberFormatter)\r\n    private multiplierValue: NumberFormatter = null;\r\n    @property(Sprite)\r\n    private background: Sprite = null;\r\n    @property(SpriteFrame)\r\n    private betFrame: SpriteFrame = null;\r\n    @property(SpriteFrame)\r\n    private cashoutFrame: SpriteFrame = null;\r\n\r\n    private _wager: number;\r\n    private _ID: number;\r\n\r\n    public get wager() {\r\n        return this._wager;\r\n    }\r\n    public get ID() {\r\n        return this._ID\r\n    };\r\n\r\n\r\n    public setInfo(nickname: string, betValue: number, multiplier: number, wager: number, id: number) {\r\n        this.nickname.string = nickname;\r\n        this.betValue.value = multiplier === 0 ? betValue : betValue * multiplier / 100;\r\n        this._wager = wager;\r\n        this._ID = id;\r\n\r\n        if (multiplier !== 0) {\r\n            this.background.spriteFrame = this.cashoutFrame;\r\n            this.nickname.color = new Color(HexColorCode.Brown);\r\n            this.betValue.getComponent(Label).color = new Color(HexColorCode.Black);\r\n            this.multiplierValue.enabled = true;\r\n            this.multiplierValue.value = multiplier / 100;\r\n            this.multiplierValue.getComponent(Label).color = new Color(HexColorCode.Brown);\r\n        }\r\n        else {\r\n            this.background.spriteFrame = this.betFrame;\r\n            this.nickname.color = new Color(HexColorCode.White);\r\n            this.betValue.getComponent(Label).color = new Color(HexColorCode.Yellow);\r\n            this.multiplierValue.enabled = false;\r\n            this.multiplierValue.getComponent(Label).string = `?`;\r\n            this.multiplierValue.getComponent(Label).color = new Color(HexColorCode.White);\r\n        }\r\n    }\r\n\r\n    public setCashout(bet: number, multiplier: number) {\r\n        this.betValue.value = DenomConverter.valueToDollar(bet * multiplier / 100);\r\n        this.background.spriteFrame = this.cashoutFrame;\r\n        this.nickname.color = new Color(HexColorCode.Brown);\r\n        this.betValue.getComponent(Label).color = new Color(HexColorCode.Black);\r\n        this.multiplierValue.enabled = true;\r\n        this.multiplierValue.value = multiplier / 100;\r\n        this.multiplierValue.getComponent(Label).color = new Color(HexColorCode.Brown);\r\n    }\r\n}","\r\nimport { Label, SpriteFrame } from 'cc';\r\nimport { _decorator, Component, Node, Sprite } from 'cc';\r\nimport { StartUp } from '../StartUp';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Predefined variables\r\n * Name = PlayerCashoutItem\r\n * DateTime = Fri Mar 24 2023 15:15:54 GMT+0800 (台北標準時間)\r\n * Author = at259168\r\n * FileBasename = PlayerCashoutItem.ts\r\n * FileBasenameNoExtension = PlayerCashoutItem\r\n * URL = db://assets/scripts/Game/GameObject/PlayerCashoutItem.ts\r\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/\r\n *\r\n */\r\n\r\n@ccclass('PlayerCashoutItem')\r\nexport class PlayerCashoutItem extends Component {\r\n    @property(Sprite)\r\n    private icon: Sprite = null;\r\n\r\n    @property(Label)\r\n    private id: Label = null;\r\n\r\n    @property(SpriteFrame)\r\n    private userIcon: SpriteFrame = null;\r\n\r\n    @property(SpriteFrame)\r\n    private localUserIcon: SpriteFrame = null;\r\n\r\n    setItem(id: string, isLocalPlayer: boolean) {\r\n        this.icon.spriteFrame = isLocalPlayer ? this.localUserIcon : this.userIcon;\r\n        this.id.string = id;\r\n    }\r\n}\r\n","import { _decorator } from \"cc\";\r\nimport { EnterTableResponseData, TableState } from \"../Data/DTO/Table.dto\";\r\nimport { PlayerResponseData } from \"../Data/DTO/Player.dto\";\r\nimport DenomConverter from \"./Helper/DenomConverter\";\r\nimport { HiloGameView } from \"./Hilo/HiloGameView\";\r\nimport { GameState, HiloGameLogic } from \"./Hilo/HiloGameLogic\";\r\nimport { HiloGameData } from \"./Hilo/HiloGameData\";\r\nimport Application from \"../Application/Application\";\r\n\r\nconst { ccclass } = _decorator;\r\n@ccclass('PlayerInfo')\r\nexport class PlayerInfo \r\n{\r\n    private static instance: PlayerInfo = null;\r\n    public static getInstance(): PlayerInfo \r\n    {\r\n        if (!PlayerInfo.instance)\r\n        {\r\n            PlayerInfo.instance = new PlayerInfo();\r\n        }\r\n        return PlayerInfo.instance;\r\n    }\r\n\r\n    private playerMoney: number = 0;\r\n    public isNotEnoughMsgExist = false;\r\n    public getPlayerMoney(): number\r\n    {\r\n        return this.playerMoney;\r\n    }\r\n\r\n    public setPlayerMoney(playerMoney: number)\r\n    {\r\n        let gameView: HiloGameView = HiloGameView.getInstance();\r\n        let gameLogic: HiloGameLogic = HiloGameLogic.getInstance();\r\n        let gameData: HiloGameData = HiloGameData.getInstance();\r\n        let isBetState: boolean = gameLogic.getGameState() == GameState.GAME_STATE_BET;\r\n        let isNewRound: boolean = gameData.getIsNewRound();\r\n        if (gameLogic)\r\n        {\r\n            if (isBetState && isNewRound)\r\n            {\r\n                let currentBetvalue: number = gameData.getCurrentBetValue();\r\n                let denom: number = this.getDenom();\r\n                if (playerMoney -  currentBetvalue * denom < 0)\r\n                {\r\n                    Application.Instance.connection.onMoneyNotEnough();\r\n                    this.isNotEnoughMsgExist = true;\r\n                }\r\n                else\r\n                {\r\n                    playerMoney -= currentBetvalue * denom;\r\n                }\r\n            }\r\n        }\r\n        this.playerMoney = DenomConverter.valueToDollar(playerMoney);\r\n        if (gameView)\r\n        {\r\n            gameView.updatePlayerMoney();\r\n        }\r\n    }\r\n\r\n    private denom: number = 0;\r\n    public getDenom(): number\r\n    {\r\n        return this.denom;\r\n    }\r\n\r\n    public setDenom(denom: number)\r\n    {\r\n        this.denom = denom;\r\n    }\r\n\r\n    private entryEvent: EnterTableResponseData = null;\r\n    public getEntryEvent(): EnterTableResponseData\r\n    {\r\n        return this.entryEvent;\r\n    }\r\n\r\n    public setEntryEvent(entryEvent: EnterTableResponseData)\r\n    {\r\n        this.entryEvent = entryEvent;\r\n    }\r\n\r\n    private nickName: string = null;\r\n    public getnickName(): string\r\n    {\r\n        return this.nickName;\r\n    }\r\n\r\n    public setnickName(nickName: string)\r\n    {\r\n        this.nickName = nickName;\r\n    }\r\n\r\n    private playerID: number = -1;\r\n    public getPlayerID(): number\r\n    {\r\n        return this.playerID;\r\n    }\r\n\r\n    public setPlayerID(playerID: number)\r\n    {\r\n        this.playerID = playerID;\r\n    }\r\n\r\n    private accountInfoUrl: string = \"\";\r\n    public getAccountInfoUrl(): string\r\n    {\r\n        return this.accountInfoUrl;\r\n    }\r\n\r\n    public setAccountInfoUrl(accountInfoUrl: string)\r\n    {\r\n        this.accountInfoUrl = accountInfoUrl;\r\n    }\r\n\r\n    private tableState: TableState = null;\r\n    public getTableState(): TableState\r\n    {\r\n        return this.tableState;\r\n    }\r\n\r\n    public setTableState(tableState: TableState)\r\n    {\r\n        this.tableState = tableState;\r\n    }\r\n\r\n    private players: PlayerResponseData[] = [];\r\n    public getPlayers(): PlayerResponseData[]\r\n    {\r\n        return this.players;\r\n    }\r\n\r\n    public setPlayers(players: PlayerResponseData[])\r\n    {\r\n        this.players = players;\r\n    }\r\n}","import { _decorator, Component, Button, EditBox, Toggle } from 'cc';\r\nimport { Data, PlayerInfo } from './Data';\r\nimport { PlayerListManager } from './PlayerListManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerInfoManager')\r\nexport class PlayerInfoManager extends Component \r\n{\r\n    @property(Button)\r\n    private btnClose: Button = null;\r\n    @property(Button)\r\n    private btnSave: Button = null;\r\n    @property(Button)\r\n    private btnDelete: Button = null;\r\n    @property(EditBox)\r\n    private playerName: EditBox = null;\r\n    @property(Toggle)\r\n    private playerAbility_1: Toggle = null;\r\n    @property(Toggle)\r\n    private playerAbility_2: Toggle = null;\r\n    @property(Toggle)\r\n    private playerAbility_3: Toggle = null;\r\n    @property(Toggle)\r\n    private playerAbility_4: Toggle = null;\r\n    @property(Toggle)\r\n    private playerAbility_5: Toggle = null;\r\n\r\n    private tmpPlayerAbility: number = 1;\r\n    private isAddPlayer: boolean = true;\r\n    private editIndex: number = -1;\r\n\r\n    private static instance: PlayerInfoManager = null;\r\n    public static getInstance(): PlayerInfoManager\r\n    {\r\n        return PlayerInfoManager.instance;\r\n    }\r\n    \r\n    protected start() \r\n    {\r\n        PlayerInfoManager.instance = this;\r\n        this.close();\r\n        this.addBtnEvent();\r\n    }\r\n\r\n    private addBtnEvent()\r\n    {\r\n        this.btnClose.node.on(Button.EventType.CLICK, this.onBtnClose.bind(this));\r\n        this.btnSave.node.on(Button.EventType.CLICK, this.onBtnSave.bind(this));\r\n        this.btnDelete.node.on(Button.EventType.CLICK, this.onBtnDelete.bind(this));\r\n        this.playerAbility_1.node.on(Toggle.EventType.CLICK, () => { this.onBtnAbility(1); });\r\n        this.playerAbility_2.node.on(Toggle.EventType.CLICK, () => { this.onBtnAbility(2); });\r\n        this.playerAbility_3.node.on(Toggle.EventType.CLICK, () => { this.onBtnAbility(3); });\r\n        this.playerAbility_4.node.on(Toggle.EventType.CLICK, () => { this.onBtnAbility(4); });\r\n        this.playerAbility_5.node.on(Toggle.EventType.CLICK, () => { this.onBtnAbility(5); });\r\n    }\r\n\r\n    private onBtnAbility(ability: number)\r\n    {\r\n        this.tmpPlayerAbility = ability;\r\n    }\r\n\r\n    private onBtnClose()\r\n    {\r\n        this.close();\r\n    }\r\n\r\n    private onBtnSave()\r\n    {\r\n        if (this.isAddPlayer)\r\n        {\r\n            const playerInfo: PlayerInfo = new PlayerInfo();\r\n            playerInfo.playerName = this.playerName.textLabel.string;\r\n            playerInfo.playerAbility = this.tmpPlayerAbility;\r\n            Data.playerInfoList.push(playerInfo);\r\n            PlayerListManager.getInstance().addPlayerItem();\r\n        }\r\n        else\r\n        {\r\n            Data.playerInfoList[this.editIndex].playerName = this.playerName.textLabel.string;\r\n            Data.playerInfoList[this.editIndex].playerAbility = this.tmpPlayerAbility;\r\n        }\r\n        this.close();\r\n    }\r\n\r\n    private onBtnDelete()\r\n    {\r\n        const playerInfoList: PlayerInfo[] = Data.playerInfoList;\r\n        const deletePlayer: PlayerInfo = playerInfoList[this.editIndex];\r\n        const deleteIndex: number = playerInfoList.indexOf(deletePlayer);\r\n        playerInfoList.splice(deleteIndex, 1);\r\n        PlayerListManager.getInstance().deletePlayer(this.editIndex);\r\n        this.close();\r\n    }\r\n\r\n    public open(isAdd: boolean = true, playerIndex: number = 0)\r\n    {\r\n        this.node.active = true;\r\n        this.isAddPlayer = true;\r\n        this.btnDelete.node.active = !isAdd;\r\n        if (!isAdd)\r\n        {\r\n            this.editIndex = playerIndex;\r\n            const playerInfo: PlayerInfo = Data.playerInfoList[playerIndex];\r\n            this.playerName.string = playerInfo.playerName;\r\n            this.playerAbility_1.isChecked = playerInfo.playerAbility == 1;\r\n            this.playerAbility_2.isChecked = playerInfo.playerAbility == 2;\r\n            this.playerAbility_3.isChecked = playerInfo.playerAbility == 3;\r\n            this.playerAbility_4.isChecked = playerInfo.playerAbility == 4;\r\n            this.playerAbility_5.isChecked = playerInfo.playerAbility == 5;\r\n        }\r\n        else\r\n        {\r\n            this.playerAbility_1.isChecked = true;\r\n            this.playerAbility_2.isChecked = false;\r\n            this.playerAbility_3.isChecked = false;\r\n            this.playerAbility_4.isChecked = false;\r\n            this.playerAbility_5.isChecked = false;\r\n        }\r\n    }\r\n\r\n    public close()\r\n    {\r\n        this.node.active = false;\r\n        this.playerName.string = \"\";\r\n    }\r\n\r\n    public generateTestData()\r\n    {\r\n        for (let i = 0; i < 15; i++)\r\n        {\r\n            const playerInfo: PlayerInfo = new PlayerInfo();\r\n            playerInfo.playerName = `Player_${i.toString()}`;\r\n            playerInfo.playerAbility = 1;\r\n            Data.playerInfoList.push(playerInfo);\r\n            PlayerListManager.getInstance().addPlayerItem();\r\n        }\r\n    }\r\n}\r\n","import { _decorator, Component, Label, Button } from 'cc';\r\nimport { CourtInfoManager } from './CourtInfoManager';\r\nimport { Data, PlayerInfo } from './Data';\r\nimport { PlayerInfoManager } from './PlayerInfoManager';\r\nimport { PlayerListManager } from './PlayerListManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerItem')\r\nexport class PlayerItem extends Component \r\n{\r\n    @property(Label)\r\n    private playerName: Label = null;\r\n    @property(Button)\r\n    private btnPlayer: Button = null;\r\n    @property(Label)\r\n    private completeMatchCount: Label = null;\r\n\r\n    private playerIndex: number = -1;\r\n\r\n    protected start() \r\n    {\r\n        this.btnPlayer.node.on(Button.EventType.CLICK, this.onBtnPlayer.bind(this));\r\n    }\r\n\r\n    private onBtnPlayer()\r\n    {\r\n        if (PlayerListManager.getInstance().isEditCourtMode)\r\n        {\r\n            const playerInfo: PlayerInfo = Data.playerInfoList[this.playerIndex];\r\n            CourtInfoManager.getInstance().setNewPlayer(playerInfo);\r\n            playerInfo.isPlaying = true;\r\n        }\r\n        else\r\n        {\r\n            PlayerInfoManager.getInstance().open(false, this.playerIndex);\r\n        }\r\n        PlayerListManager.getInstance().close();\r\n    }\r\n\r\n    public setPlayerInfo(playerName: string, playerIndex: number)\r\n    {\r\n        this.playerName.string = playerName;\r\n        this.playerIndex = playerIndex;\r\n    }\r\n\r\n    public updateMatchCompleteCount(count: number)\r\n    {\r\n        this.completeMatchCount.string = count.toString();\r\n    }\r\n}\r\n","import { _decorator, Component, Node, Prefab, Button, UITransform, instantiate, ScrollView } from 'cc';\r\nimport { Data, PlayerInfo } from './Data';\r\nimport { PlayerInfoManager } from './PlayerInfoManager';\r\nimport { PlayerItem } from './PlayerItem';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerListManager')\r\nexport class PlayerListManager extends Component \r\n{\r\n    @property(Prefab)\r\n    private playerItem: Prefab = null;\r\n    @property(UITransform)\r\n    private playerItemRoot: UITransform = null;\r\n    @property(Button)\r\n    private btnClose: Button = null;\r\n    @property(ScrollView)\r\n    private scroll: ScrollView = null;\r\n\r\n    private playerItemList: Node[] = [];\r\n    public isEditCourtMode: boolean = false;\r\n\r\n    private static instance: PlayerListManager = null;\r\n    public static getInstance(): PlayerListManager\r\n    {\r\n        return PlayerListManager.instance;\r\n    }\r\n    \r\n    protected start() \r\n    {\r\n        PlayerListManager.instance = this;\r\n        this.close();\r\n        this.btnClose.node.on(Button.EventType.CLICK, this.onBtnClose.bind(this));\r\n        PlayerInfoManager.getInstance().generateTestData();\r\n    }\r\n\r\n    private onBtnClose()\r\n    {\r\n        this.close();\r\n    }\r\n\r\n    public open(isHidePlayerMember: boolean)\r\n    {\r\n        this.node.active = true;\r\n        this.updatePlayerStatus(isHidePlayerMember);\r\n        this.scroll.scrollToTop();\r\n        this.playerItemList.forEach((playerItem: Node, i) => \r\n        {\r\n            const completeMatchCount: number = Data.playerInfoList[i].completeMatchCount;\r\n            playerItem.getComponent(PlayerItem).updateMatchCompleteCount(completeMatchCount);\r\n        });\r\n    }\r\n\r\n    public close()\r\n    {\r\n        this.node.active = false;\r\n    }\r\n\r\n    private updatePlayerStatus(isHidePlayerMember: boolean)\r\n    {\r\n        const playerInfoList: PlayerInfo[] = Data.playerInfoList;\r\n        let isShow: boolean = false;\r\n        for (let i = 0; i < playerInfoList.length; i++)\r\n        {\r\n            isShow = !isHidePlayerMember ? true : !playerInfoList[i].isPlaying;\r\n            this.playerItemList[i].active = isShow;\r\n        }\r\n    }\r\n\r\n    public addPlayerItem()\r\n    {\r\n        const playerInfoList: PlayerInfo[] = Data.playerInfoList;\r\n        const playerCount: number = playerInfoList.length;\r\n        const playerName: string = playerInfoList[playerCount - 1].playerName;\r\n        const playerItem: Node = instantiate(this.playerItem);\r\n        playerItem.setParent(this.playerItemRoot.node);\r\n        playerItem.getComponent(PlayerItem).setPlayerInfo(playerName, playerInfoList.length - 1);\r\n        this.playerItemList.push(playerItem);\r\n    }\r\n\r\n    public deletePlayer(playerIndex: number)\r\n    {\r\n        const deletePlayer: Node = this.playerItemList[playerIndex];\r\n        this.playerItemList.splice(playerIndex, 1);\r\n        this.playerItemRoot.node.removeChild(deletePlayer);\r\n    }\r\n}\r\n","import { Component, director, ProgressBar, _decorator } from 'cc';\r\nimport Application from '../Application/Application';\r\nimport I18n from '../I18n/I18n';\r\nimport ErrorHandler from '../ErrorHandler/ErrorHandler';\r\nimport CompositeLoadingTask from '../Toolkit/Helper/LoadingTask/CompositeLoadingTask';\r\nimport { CustomErrorName } from '../ErrorHandler/Config/error.config';\r\nimport AudioManager from './AudioManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PreloadManager')\r\nexport default class PreloadManager extends Component {\r\n    @property(ProgressBar)\r\n    private progressBar: ProgressBar = null;\r\n\r\n    private preloadTask = new CompositeLoadingTask('Preload');\r\n    private preloadOnly: boolean = false;\r\n\r\n    protected async start() \r\n    {\r\n        // 開始預載入場景\r\n        I18n.Instance.changeLanguage(Application.Instance.config.language);\r\n        this.preloadTask.addTask(I18n.Instance.loadingTask);\r\n        AudioManager.Instance.preload();\r\n        this.preloadTask.addTask(AudioManager.Instance.loadingTask);\r\n        const preLoadSceneTask = this.preloadTask.addTask('PreloadScene');\r\n        if ((window as any).logoPromise) {\r\n            await (window as any).logoPromise;\r\n        }\r\n        director.preloadScene('Game', preLoadSceneTask.progress.bind(preLoadSceneTask), preLoadSceneTask.finish.bind(preLoadSceneTask));\r\n        // 因為在這之前已經有再載入多語言的資料，所以如果沒有等待 preloadScene開始再顯示進度的話，會有一瞬間是顯示載入多語言資料的進度，因此進度條會卡在快載入完成的地方\r\n        preLoadSceneTask.waitForStart().then(() => \r\n        {\r\n            // 監聽載入進度與載入完成事件\r\n            this.preloadTask.on('onProgress',() => \r\n            {\r\n                const progress: number = Math.max(this.progressBar.progress, (this.preloadTask.completeCount / this.preloadTask.totalCount));\r\n                this.progressBar.progress = progress;\r\n                this.reportStatus(progress, 'loading...');\r\n            },\r\n            this);\r\n            this.preloadTask.on('onFinished', async () => \r\n            {\r\n                this.progressBar.node.active = false;\r\n                this.preloadTask.targetOff(this);\r\n                if (!this.preloadTask.isSuccess) \r\n                {\r\n                    ErrorHandler.Instance.handle(CustomErrorName.LOADING_FAILED);\r\n                } \r\n                else \r\n                {\r\n                    if (this.preloadOnly) \r\n                    {\r\n                        this.reportStatus(1, 'preload finished');\r\n                        return;\r\n                    }\r\n                    this.startGame(this.reportStatus.bind(this));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 用來回報連線進度的 callback function\r\n     * @param progress 進度值，range 0 ~ 1\r\n     * @param message 進度訊息\r\n     */\r\n    private reportStatus(progress: number, message: string): void \r\n    {\r\n        this.progressBar.progress = progress;\r\n    }\r\n\r\n    public async startGame(reportProgress: (progress: number, message: string) => void) \r\n    {\r\n        // const { token, platformID, walletTypeID } = Application.Instance.config;\r\n        // reportProgress(0.92, 'connecting to server');\r\n        // await Application.Instance.connection.startConnecting();\r\n        // reportProgress(0.95, 'logining');\r\n        // await Application.Instance.connection.login(token, platformID, walletTypeID, true);\r\n        // reportProgress(1, 'start game');\r\n        // (window as any).removeFooter?.();\r\n        // director.loadScene('Game');\r\n    }\r\n}\r\n","import { Component, _decorator } from 'cc';\r\n\r\nconst { ccclass } = _decorator;\r\n\r\n@ccclass\r\nexport default abstract class Processor extends Component {\r\n    private static stopSymbol: Symbol = Symbol('STOP');\r\n\r\n    private iterator: IterableIterator<Promise<any>> = null;\r\n    private iteratorResult: IteratorResult<Promise<any>, void> = null;\r\n\r\n    private pausePromise: Promise<void> = null;\r\n    private resumeResolve: () => void = null;\r\n    private stopResolve: (value: Symbol) => void;\r\n    private finishResolve: (value: void) => void;\r\n    private finishPromise: Promise<void> = null;\r\n\r\n    public onPause: () => void = null;\r\n    public onResume: () => void = null;\r\n\r\n    public get isRunning(): boolean {\r\n        return !!this.stopResolve;\r\n    }\r\n\r\n    public get isPause(): boolean {\r\n        return !!this.resumeResolve;\r\n    }\r\n\r\n    /**\r\n     * 執行一個 process\r\n     * @param process 要執行的工作\r\n     * @returns [等待 process完成的 promise, 執行後可中斷工作的函式]\r\n     */\r\n    public static run<T>(process: Generator<Promise<any>, T, any>): [Promise<T>, (value: void) => void] {\r\n        let stopResolve: (value: Symbol) => void;\r\n        const stopPromise = new Promise<Symbol>((resolve) => {\r\n            stopResolve = resolve;\r\n        });\r\n        return [\r\n            (async () => {\r\n                const iterator = process;\r\n                let iteratorResult = iterator.next();\r\n                let value: any;\r\n                while (!iteratorResult.done) {\r\n                    value = await Promise.race([iteratorResult.value, stopPromise]);\r\n                    if (value === Processor.stopSymbol) {\r\n                        break;\r\n                    }\r\n                    iteratorResult = iterator.next(value);\r\n                }\r\n                return value;\r\n            })(),\r\n            () => stopResolve(Processor.stopSymbol),\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Start the process\r\n     */\r\n    public async play(...params: any): Promise<any> {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        const stopPromise = new Promise((resolve) => {\r\n            this.stopResolve = resolve;\r\n        });\r\n        this.iterator = this.run(...params);\r\n        this.iteratorResult = this.iterator.next();\r\n\r\n        let isStopManually = false;\r\n        while (!this.iteratorResult.done) {\r\n            await this.pausePromise;\r\n            const value: any = await Promise.race([this.iteratorResult.value, stopPromise]);\r\n            if (value === Processor.stopSymbol) {\r\n                isStopManually = true;\r\n                break;\r\n            }\r\n            this.iteratorResult = this.iterator.next(value);\r\n        }\r\n\r\n        // 判斷 process是否被中斷或自然結束\r\n        if (!isStopManually) {\r\n            this.stop(true, true);\r\n        }\r\n    }\r\n\r\n    public pause() {\r\n        if (this.isPause) {\r\n            return;\r\n        }\r\n        this.onPause?.();\r\n        this.pausePromise = new Promise((resolve) => {\r\n            this.resumeResolve = resolve;\r\n        });\r\n    }\r\n\r\n    public resume() {\r\n        if (!this.isPause) {\r\n            return;\r\n        }\r\n        this.onResume?.();\r\n        this.resumeResolve();\r\n        this.resumeResolve = null;\r\n    }\r\n\r\n    /**\r\n     * Stop the process if it is running.\r\n     */\r\n    public async stop(waitForFinish = true, isEndNaturely = false) {\r\n        if (!this.isRunning) {\r\n            return;\r\n        }\r\n        this.stopResolve?.(Processor.stopSymbol);\r\n        this.stopResolve = null;\r\n        this.resumeResolve = null;\r\n        this.pausePromise = null;\r\n        if (waitForFinish) {\r\n            await this.finish(isEndNaturely);\r\n        } else {\r\n            this.finish(isEndNaturely);\r\n        }\r\n        this.finishResolve?.();\r\n    }\r\n\r\n    /**\r\n     * Return a promise which will fullfill after the process stopped or finished.\r\n     */\r\n    public waitForFinish() {\r\n        if (!this.isRunning) {\r\n            return Promise.resolve();\r\n        }\r\n        if (!this.finishPromise) {\r\n            this.finishPromise = new Promise<void>((resolve) => {\r\n                this.finishResolve = resolve;\r\n            }).then(() => {\r\n                this.finishPromise = null;\r\n            });\r\n        }\r\n        return this.finishPromise;\r\n    }\r\n\r\n    /** Write implementation of your process here. */\r\n    protected abstract run(...params: any): Generator<Promise<any>, any, any>;\r\n\r\n    /** Write implemetation of what should be done after the process stopped or finished. */\r\n    protected abstract finish(isEndNaturely: boolean): Promise<void>;\r\n}\r\n","import Delay from '../../Utils/Delay';\r\n\r\nexport default class ProgressOffsetCounter {\r\n    constructor(private _offset: number = 0) {}\r\n\r\n    public get offset() {\r\n        return this._offset;\r\n    }\r\n\r\n    public async progress(seconds: number): Promise<void> {\r\n        await Delay.resolve((seconds - this._offset) * 1000);\r\n        this._offset = Math.max(0, this._offset - seconds);\r\n    }\r\n}\r\n","import { Button, instantiate, Label, Prefab, tween, UIOpacity, game, Game as CCGame } from \"cc\";\r\nimport { Vec3 } from \"cc\";\r\nimport { Tween } from \"cc\";\r\nimport { _decorator } from \"cc\";\r\nimport AnimatedPage from \"../../Toolkit/Components/Page/AnimatedPage\";\r\nimport AudioManager from \"../AudioManager\";\r\nimport { SoundEffect } from \"../Config/audio.config\";\r\nimport { StartUp, GameEventType } from \"../StartUp\";\r\nimport { Node } from \"cc\";\r\nimport { HiloPokerTool } from \"../Hilo/HiloPokerTool\";\r\nimport { HiloGameData } from \"../Hilo/HiloGameData\";\r\nimport { SpriteFrame } from \"cc\";\r\nimport { Sprite } from \"cc\";\r\nconst { ccclass, property } = _decorator;\r\n\r\nenum ButtonIconType {\r\n\tNHASH = \"nextHash\",\r\n\tCLASS = \"class\",\r\n\tJSON = \"json\",\r\n\tLHASH = \"lastHash\",\r\n}\r\n@ccclass(\"ResultData\")\r\nexport class ResultData {\r\n\tpublic Card: number = -1;\r\n\tpublic Secret: string = \"\";\r\n}\r\n\r\n@ccclass(\"Provability\")\r\nexport class Provability extends AnimatedPage {\r\n\t@property(Button)\r\n\tprivate copyHashNextGameButton: Button = null;\r\n\t@property(Label)\r\n\tprivate hashNextGame: Label = null;\r\n\t@property(Node)\r\n\tprivate lastGameNode: Node = null;\r\n\t@property(Button)\r\n\tprivate copyJsonButton: Button = null;\r\n\t@property(Label)\r\n\tprivate json: Label = null;\r\n\t@property(Button)\r\n\tprivate copyHashLastGameButton: Button = null;\r\n\t@property(Label)\r\n\tprivate hashLastGame: Label = null;\r\n\t@property(Label)\r\n\tprivate finalResult: Label = null;\r\n\t@property(Button)\r\n\tprivate verifyButton: Button = null;\r\n\t@property(Node)\r\n\tprivate successfulMessage: Node = null;\r\n\t@property(Prefab)\r\n\tprivate copiedMessagePrefab: Prefab = null;\r\n\t@property(SpriteFrame)\r\n\tprivate tickIcon: SpriteFrame = null;\r\n\t@property(SpriteFrame)\r\n\tprivate copyIcon: SpriteFrame = null;\r\n\tprivate nextHash: string = \"\";\r\n\tprivate lastHash: string = \"\";\r\n\tprivate resultMessage: string = \"\";\r\n\r\n\tprivate msgTween: Tween<UIOpacity> = null;\r\n\r\n\tprotected onLoad() {\r\n\t\tsuper.onLoad();\r\n\t\tthis.verifyButton.node.on(\"click\", this.verify.bind(this));\r\n\t\tStartUp.getInstance().node.on(\r\n\t\t\tGameEventType.NEXT_HASH,\r\n\t\t\t(hash) => this.setNextResultHash(hash),\r\n\t\t\tthis\r\n\t\t);\r\n\t\tStartUp.getInstance().node.on(\r\n\t\t\tGameEventType.RESULT,\r\n\t\t\t(data) => this.setResult(data),\r\n\t\t\tthis\r\n\t\t);\r\n\t\tStartUp.getInstance().node.on(\r\n\t\t\tGameEventType.ON_ENTER_TABLE,\r\n\t\t\t() => this.onEnterTable(),\r\n\t\t\tthis\r\n\t\t);\r\n\r\n\t\tthis.copyHashNextGameButton.node.on(\r\n\t\t\t`click`,\r\n\t\t\tthis.copyHashNextGame.bind(this)\r\n\t\t);\r\n\t\tthis.copyHashLastGameButton.node.on(\r\n\t\t\t`click`,\r\n\t\t\tthis.copyHashLastGame.bind(this)\r\n\t\t);\r\n\t\tthis.copyJsonButton.node.on(`click`, this.copyJson.bind(this));\r\n\t\tgame.on(CCGame.EVENT_HIDE, () => {\r\n\t\t\tthis.buttonImageTransformation(ButtonIconType.CLASS);\r\n\t\t})\r\n\t}\r\n\r\n\tprotected start() {\r\n\t\tthis.onEnterTable();\r\n\t\tStartUp.getInstance().node.emit(\r\n\t\t\tGameEventType.NEXT_HASH,\r\n\t\t\tHiloGameData.getInstance().getNextHash()\r\n\t\t);\r\n\t}\r\n\r\n\tpublic async open() {\r\n\t\tsuper.open();\r\n\t\tthis.buttonImageTransformation(ButtonIconType.CLASS);\r\n\t}\r\n\r\n\tprivate updateUI() {\r\n\t\tthis.hashNextGame.string = this.nextHash;\r\n\t\tthis.json.string = this.resultMessage;\r\n\t\tlet cardIndex: number = HiloGameData.getInstance().getCardIndex();\r\n\t\tthis.finalResult.string = HiloPokerTool.getInstance()\r\n\t\t\t.getPokerValue(cardIndex)\r\n\t\t\t.toString();\r\n\t}\r\n\r\n\tprivate verify() {\r\n\t\t// const cryptor = new Cryptor(\"\", 0);\r\n\t\t// const hash = cryptor.getSHA256Hash(this.resultMessage);\r\n\t\tif (this.lastHash === this.nextHash) {\r\n\t\t\tif (this.msgTween) {\r\n\t\t\t\tthis.msgTween.stop();\r\n\t\t\t}\r\n\t\t\tthis.msgTween = tween(this.successfulMessage.getComponent(UIOpacity))\r\n\t\t\t\t.to(0.2, { opacity: 255 })\r\n\t\t\t\t.delay(2)\r\n\t\t\t\t.to(0.2, { opacity: 0 })\r\n\t\t\t\t.start();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate onEnterTable() {\r\n\t\tthis.lastHash = this.nextHash;\r\n\t\tthis.lastGameNode.active = false;\r\n\t}\r\n\r\n\tprivate setNextResultHash(hash: string) {\r\n\t\tthis.lastHash = this.lastHash == \"\" || !this.lastHash ? hash : this.lastHash;\r\n\t\tthis.nextHash = hash;\r\n\t\tthis.hashLastGame.string = this.lastHash;\r\n\t\tthis.updateUI();\r\n\t}\r\n\r\n\tprivate setResult(result: ResultData) {\r\n\t\tthis.lastGameNode.active = true;\r\n\t\tthis.lastHash = this.nextHash;\r\n\t\tconst resultData = {\r\n\t\t\tCard: result.Card,\r\n\t\t\tSecret: result.Secret,\r\n\t\t};\r\n\t\tthis.resultMessage = JSON.stringify(resultData);\r\n\t\tthis.updateUI();\r\n\t}\r\n\tprivate buttonImageTransformation(type: ButtonIconType) {\r\n\t\tlet _nextHash = (icon: SpriteFrame, click: boolean) => {\r\n\t\t\tthis.copyHashNextGameButton.node.children[0].getComponent(\r\n\t\t\t\tSprite\r\n\t\t\t).spriteFrame = icon;\r\n\t\t\tthis.copyHashNextGameButton.node.getComponent(Button).interactable =\r\n\t\t\t\tclick;\r\n\t\t};\r\n\t\tlet _lastHash = (icon: SpriteFrame, click: boolean) => {\r\n\t\t\tthis.copyHashLastGameButton.node.children[0].getComponent(\r\n\t\t\t\tSprite\r\n\t\t\t).spriteFrame = icon;\r\n\t\t\tthis.copyHashLastGameButton.node.getComponent(Button).interactable =\r\n\t\t\t\tclick;\r\n\t\t};\r\n\t\tlet _json = (icon: SpriteFrame, click: boolean) => {\r\n\t\t\tthis.copyJsonButton.node.children[0].getComponent(Sprite).spriteFrame =\r\n\t\t\t\ticon;\r\n\t\t\tthis.copyJsonButton.node.getComponent(Button).interactable = click;\r\n\t\t};\r\n\t\tswitch (type) {\r\n\t\t\tcase ButtonIconType.NHASH:\r\n\t\t\t\t_nextHash(this.tickIcon, false);\r\n\t\t\t\t_lastHash(this.copyIcon, true);\r\n\t\t\t\t_json(this.copyIcon, true);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ButtonIconType.LHASH:\r\n\t\t\t\t_nextHash(this.copyIcon, true);\r\n\t\t\t\t_lastHash(this.tickIcon, false);\r\n\t\t\t\t_json(this.copyIcon, true);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ButtonIconType.JSON:\r\n\t\t\t\t_nextHash(this.copyIcon, true);\r\n\t\t\t\t_lastHash(this.copyIcon, true);\r\n\t\t\t\t_json(this.tickIcon, false);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ButtonIconType.CLASS:\r\n\t\t\t\t_nextHash(this.copyIcon, true);\r\n\t\t\t\t_lastHash(this.copyIcon, true);\r\n\t\t\t\t_json(this.copyIcon, true);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tprivate copyHashNextGame() {\r\n\t\tthis.copyToClipboard(this.nextHash);\r\n\t\tconst msg = instantiate(this.copiedMessagePrefab);\r\n\t\tthis.buttonImageTransformation(ButtonIconType.NHASH);\r\n\t\tmsg.setPosition(\r\n\t\t\tthis.copyHashNextGameButton.node.position.x,\r\n\t\t\tthis.copyHashNextGameButton.node.position.y + 10\r\n\t\t);\r\n\t\ttween(msg.getComponent(UIOpacity))\r\n\t\t\t.to(0.3, { opacity: 255 })\r\n\t\t\t.delay(0.6)\r\n\t\t\t.to(0.3, { opacity: 0 })\r\n\t\t\t.call(() => msg.destroy())\r\n\t\t\t.start();\r\n\t\ttween(msg)\r\n\t\t\t.to(1.2, {\r\n\t\t\t\tposition: new Vec3(msg.position.x, msg.position.y + 60, msg.position.z),\r\n\t\t\t})\r\n\t\t\t.start();\r\n\t\tthis.view.addChild(msg);\r\n\t}\r\n\r\n\tprivate copyHashLastGame() {\r\n\t\tthis.copyToClipboard(this.hashLastGame.string);\r\n\t\tconst msg = instantiate(this.copiedMessagePrefab);\r\n\t\tthis.buttonImageTransformation(ButtonIconType.LHASH);\r\n\t\tmsg.setPosition(\r\n\t\t\tthis.copyHashLastGameButton.node.position.x,\r\n\t\t\tthis.copyHashLastGameButton.node.position.y + 10\r\n\t\t);\r\n\t\ttween(msg.getComponent(UIOpacity))\r\n\t\t\t.to(0.3, { opacity: 255 })\r\n\t\t\t.delay(0.6)\r\n\t\t\t.to(0.3, { opacity: 0 })\r\n\t\t\t.call(() => msg.destroy())\r\n\t\t\t.start();\r\n\t\ttween(msg)\r\n\t\t\t.to(1.2, {\r\n\t\t\t\tposition: new Vec3(msg.position.x, msg.position.y + 60, msg.position.z),\r\n\t\t\t})\r\n\t\t\t.start();\r\n\t\tthis.view.addChild(msg);\r\n\t}\r\n\r\n\tprivate copyJson() {\r\n\t\tthis.copyToClipboard(this.resultMessage);\r\n\t\tconst msg = instantiate(this.copiedMessagePrefab);\r\n\t\tthis.buttonImageTransformation(ButtonIconType.JSON);\r\n\t\tmsg.setPosition(\r\n\t\t\tthis.copyJsonButton.node.position.x,\r\n\t\t\tthis.copyJsonButton.node.position.y + 10\r\n\t\t);\r\n\t\ttween(msg.getComponent(UIOpacity))\r\n\t\t\t.to(0.3, { opacity: 255 })\r\n\t\t\t.delay(0.6)\r\n\t\t\t.to(0.3, { opacity: 0 })\r\n\t\t\t.call(() => msg.destroy())\r\n\t\t\t.start();\r\n\t\ttween(msg)\r\n\t\t\t.to(1.2, {\r\n\t\t\t\tposition: new Vec3(msg.position.x, msg.position.y + 60, msg.position.z),\r\n\t\t\t})\r\n\t\t\t.start();\r\n\t\tthis.view.addChild(msg);\r\n\t}\r\n\r\n\tprivate copyToClipboard(text: string) {\r\n\t\tAudioManager.Instance.playEffect(SoundEffect.BUTTON_CLICK);\r\n\t\tif (navigator.clipboard && window.isSecureContext) {\r\n\t\t\tnavigator.clipboard.writeText(text);\r\n\t\t} else {\r\n\t\t\tlet textArea = document.createElement(\"textarea\");\r\n\t\t\ttextArea.value = text;\r\n\t\t\tdocument.body.appendChild(textArea);\r\n\t\t\ttextArea.select();\r\n\t\t\ttry {\r\n\t\t\t\tdocument.execCommand(\"copy\");\r\n\t\t\t\ttextArea.remove();\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","namespace Random {\r\n    /**\r\n     * 隨機產生true or false\r\n     */\r\n    export function getBoolean(): boolean {\r\n        return !!Math.trunc(Math.random() * 2);\r\n    }\r\n    /**\r\n     * 依照給予的數值範圍，產生 -maximum ~ maximum的浮點數\r\n     * @param maximum 數值範圍\r\n     * @param allowNegative 是否允許負數\r\n     */\r\n    export function getFloat(maximum: number, allowNegative: boolean = false): number {\r\n        const randomSign: number = getBoolean() ? -1 : 1;\r\n        return Math.random() * maximum * (allowNegative ? randomSign : 1);\r\n    }\r\n    /**\r\n     * 依照給予的數值範圍，產生 -maximum ~ maximum的整數\r\n     * @param maximum 數值範圍\r\n     * @param allowNegative 是否允許負數\r\n     */\r\n    export function getInteger(maximum: number, allowNegative: boolean = false): number {\r\n        const randomSign: number = getBoolean() ? -1 : 1;\r\n        return Math.trunc(Math.random() * (maximum + 1)) * (allowNegative ? randomSign : 1);\r\n    }\r\n\r\n    export function Range(min: number, max: number): number \r\n    {\r\n        // return Math.floor(Math.random() * max) + min;\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n}\r\n\r\nexport default Random;\r\n","import { game, Game as CCGame, Component } from 'cc';\r\nimport Application from '../Application/Application';\r\nimport MessageManager from './MessageManager';\r\nimport { _decorator } from 'cc';\r\nimport { EnterTableResponseData, TableState } from '../Data/DTO/Table.dto';\r\nimport AudioManager from './AudioManager';\r\nimport { SoundEffect } from './Config/audio.config';\r\nimport { defaultAppConfig } from '../Data/Config/app.config';\r\nimport { PathName } from '../Data/Config/path.config';\r\nimport { PlayerInfo } from './PlayerInfo';\r\nimport { HiloGameLogic } from './Hilo/HiloGameLogic';\r\nimport DenomConverter from './Helper/DenomConverter';\r\nimport { BalanceResponseData } from '../Data/DTO/Balance.dto';\r\nimport { LoginResponseData } from '../Data/DTO/Login.dto';\r\nimport { HiloGameConnection } from './Hilo/HiloGameConnection';\r\n\r\nconst { ccclass } = _decorator;\r\n\r\nexport enum GameEventType \r\n{\r\n    TABLE_STATE_CHANGED = \"TABLE_STATE_CHANGED\",\r\n    NEW_EVENT_RECEIVED = \"NEW_EVENT_RECEIVED\",\r\n    ON_LOGIN = \"ON_LOGIN\",\r\n    ON_ENTER_TABLE = \"ON_ENTER_TABLE\",\r\n    NEXT_HASH = \"NEXT_RESULT\",\r\n    RESULT = \"RESULT\",\r\n}\r\n\r\n@ccclass('StartUp')\r\nexport class StartUp extends Component {\r\n    private messageManager: MessageManager = null;\r\n    \r\n    private _state: TableState = null;\r\n    private gameIsHidden: boolean = false;\r\n    \r\n    private static instance: StartUp = null;\r\n    public static getInstance(): StartUp \r\n    {\r\n        if (!StartUp.instance)\r\n        {\r\n            StartUp.instance = new StartUp();\r\n        }\r\n        return StartUp.instance;\r\n    }\r\n\r\n    public get state() \r\n    {\r\n        return this._state;\r\n    }\r\n    private set state(newState: TableState) \r\n    {\r\n        if (newState === this._state) \r\n        {\r\n            return;\r\n        }\r\n        this._state = newState;\r\n        if (this._state === TableState.Receiving && !this.gameIsHidden) \r\n        {\r\n            AudioManager.Instance.playEffect(SoundEffect.ROUND_START);\r\n        }\r\n        this.node.emit(GameEventType.TABLE_STATE_CHANGED, this.state);\r\n    }\r\n\r\n    public get message() \r\n    {\r\n        return this.messageManager;\r\n    }\r\n\r\n    protected onLoad() \r\n    {\r\n        StartUp.instance = this;\r\n        game.addPersistRootNode(this.node);\r\n\r\n        game.on(CCGame.EVENT_HIDE, () => \r\n        {\r\n            this.gameIsHidden = true;\r\n        });\r\n\r\n        game.on(CCGame.EVENT_SHOW, () => \r\n        {\r\n            this.gameIsHidden = false;\r\n        });\r\n    }\r\n\r\n    protected start() \r\n    {\r\n        this.addConnectEvent();\r\n        console.log(defaultAppConfig.GameVersion);\r\n    }\r\n\r\n    private addConnectEvent()\r\n    {\r\n        Application.Instance.connection.listenForPublishData(PathName.Login, this.onLogin.bind(this));\r\n        Application.Instance.connection.listenForPublishData(PathName.EnterTable, this.onEnterTable.bind(this));\r\n        Application.Instance.connection.listenForPublishData(PathName.Balance, this.updateBalance.bind(this));\r\n    }\r\n\r\n    private onLogin(event: LoginResponseData) \r\n    {\r\n        PlayerInfo.getInstance().setnickName(event.Nickname);\r\n        PlayerInfo.getInstance().setDenom(event.Denom);\r\n        PlayerInfo.getInstance().setAccountInfoUrl(event.AccountInfoURL);\r\n        PlayerInfo.getInstance().setPlayerMoney(event.Balance);\r\n        this.node.emit(GameEventType.ON_LOGIN);\r\n    }\r\n\r\n    private onEnterTable(event: EnterTableResponseData)\r\n    {\r\n        this.node.emit(GameEventType.ON_ENTER_TABLE);\r\n        PlayerInfo.getInstance().setTableState(event.State);\r\n        PlayerInfo.getInstance().setEntryEvent(event);\r\n        PlayerInfo.getInstance().setPlayerID(event.PlayerID);\r\n        HiloGameConnection.getInstance().init();\r\n        HiloGameLogic.getInstance().init(event);\r\n        if (!event.Event) \r\n        {\r\n            return;\r\n        }\r\n        if (event.Event.Players)\r\n        {\r\n            PlayerInfo.getInstance().setPlayers(Object.values(event.Event.Players));\r\n        }\r\n    }\r\n\r\n    private updateBalance(event: BalanceResponseData) \r\n    {\r\n        PlayerInfo.getInstance().setPlayerMoney(event.Balance);\r\n    }\r\n    \r\n    public attachMessageManager(messageManager: MessageManager) \r\n    {\r\n        this.messageManager = messageManager;\r\n    }\r\n\r\n    public closeGame()\r\n    {\r\n        if (Application.Instance.config.useIFrame) {\r\n            window.parent.postMessage({ event: 'close' }, '*');\r\n        } \r\n        else if (Application.Instance.config.homeURL) \r\n        {\r\n            document.location.href = Application.Instance.config.homeURL;\r\n        } \r\n        else \r\n        {\r\n            window.close();\r\n            window.history.back();\r\n        }\r\n    }\r\n}\r\n","import { warn } from 'cc';\r\nimport Application from '../../Application/Application';\r\n\r\nexport enum StoragePath {\r\n    AudioSetting = 'AudioSetting',\r\n}\r\n\r\nnamespace StorageHelper {\r\n    export function saveToLocal(key: StoragePath, data: Object) {\r\n        try {\r\n            localStorage.setItem(`${Application.Instance.config.gameName}/${key}`, JSON.stringify(data));\r\n        } catch (error) {\r\n            warn(error);\r\n        }\r\n    }\r\n\r\n    export function loadFromLocal(key: StoragePath): any {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(`${Application.Instance.config.gameName}/${key}`));\r\n        } catch (error) {\r\n            warn(error);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default StorageHelper;\r\n","enum SupportLanguage {\r\n    EN = 'en',\r\n    SCH = 'sch',\r\n    TCH = 'tch',\r\n    VI = 'vi',\r\n    JA = 'ja',\r\n    ES = 'es',\r\n    PT = 'pt',\r\n    KO = 'ko',\r\n    ID = 'id',\r\n    TH = 'th',\r\n}\r\n\r\n// eslint-disable-next-line no-redeclare\r\nnamespace SupportLanguage {\r\n    export function contains(language: string): language is SupportLanguage {\r\n        return Object.values(SupportLanguage).includes(language as SupportLanguage);\r\n    }\r\n}\r\n\r\nObject.defineProperty(SupportLanguage, 'contains', {\r\n    enumerable: false,\r\n});\r\n\r\nexport { SupportLanguage };\r\n","import { PlayerResponseData } from \"./Player.dto\";\r\nimport { ResultResponseData } from \"./Result.dto\";\r\n\r\nexport enum TableState {\r\n    Init = 'init', // 初始化\r\n    Waiting = 'waiting', // 等待新局開始\r\n    Start = 'start', // 遊戲開始\r\n    Betting = 'betting', // 等待玩家下注\r\n    Receiving = 'receiving', // 結束下注\r\n    Increasing = 'increasing', // 增長中\r\n    Showing = 'showing', // 開獎\r\n    Cancel = 'cancel', // 取消當局\r\n    Finish = 'finish', // - 遊戲暫停，等待服務人員處理\r\n}\r\n\r\nexport enum PayType {\r\n    Odd = 'odd',\r\n    Even = 'even',\r\n    Count0 = 'count0',\r\n    Count1 = 'count1',\r\n    Count3 = 'count3',\r\n    Count4 = 'count4',\r\n}\r\n\r\nexport enum TableType {\r\n    Casual = 'casual',\r\n    Novice = 'novice',\r\n    Advance = 'advance',\r\n    Expert = 'expert',\r\n}\r\n\r\nexport type TableLimitData = {\r\n    /** useless ??? */\r\n    Min: number;\r\n    /** max total bet */\r\n    Max: number; // max total bet\r\n};\r\n\r\nexport type BetLimitData = {\r\n    /** min bet on single bet option ( = min total bet) */\r\n    Min: number;\r\n    /** max bet on single bet option */\r\n    Max: number;\r\n    /** available clip denom index list */\r\n    Bets: number[];\r\n    Default: number;\r\n};\r\n\r\n// type ReconnectTableInfo = {\r\n//     Bets: BetData[];\r\n//     Denom: number;\r\n//     BetLimit: number;\r\n//     Balance: number;\r\n// };\r\n\r\nexport type ChipDenomList = {\r\n    Default: number;\r\n    /** denominations */\r\n    Values: number[];\r\n};\r\n\r\nexport type BettingOptionBetInfo = {\r\n    Bet: number;\r\n    PlayerID: number;\r\n    Wager: number;\r\n    Multiplier?: number;\r\n};\r\n\r\ntype DetailedTableStatusData = {\r\n    TableID: string;\r\n    Confirming?: boolean;\r\n    Stopped?: boolean;\r\n    Bets?: { [key: number]: BettingOptionBetInfo };\r\n    Players?: { [key: number]: PlayerResponseData };\r\n\r\n    // generate by front-end to determine if event is received when enter table\r\n    EnteringTable: boolean;\r\n\r\n    Hash?: string;\r\n};\r\n\r\nexport type TableTemporalStatusData = {\r\n    Time: number;\r\n    NextStateTime: number;\r\n    State: TableState;\r\n    StateDuration: number;\r\n    StateElapsed: number;\r\n};\r\n\r\nexport type PreviewTableStatusData = {\r\n    OnlinePlayer: number;\r\n    PlayerID: number;\r\n    RoundID?: number;\r\n    RoundCount?: number;\r\n    // front-end define\r\n    ClientReceiveTime: number;\r\n    leftTime: () => number;\r\n    currentTime: () => number;\r\n} & TableTemporalStatusData;\r\n\r\ntype DetailedTableInfoData = {\r\n    PayTable: { [value in PayType]: number };\r\n    WagerToPayType: { [key: string]: PayType };\r\n\r\n    /** reconnect data */\r\n    // BetData?: ReconnectTableInfo;\r\n\r\n    /** init table status */\r\n    Event: TableStatusData;\r\n};\r\n\r\nexport type PreviewTableInfoData = {\r\n    GameID: string;\r\n    ID: string;\r\n    Hall: TableType;\r\n    /** all chip denom list */\r\n    Bets: ChipDenomList;\r\n    Denoms: number[];\r\n    BetLimits: BetLimitData[];\r\n    TableLimit: TableLimitData;\r\n    History: number[];\r\n    MaxSeatCount: number;\r\n};\r\n\r\nexport type TableInfoData = PreviewTableInfoData & DetailedTableInfoData;\r\nexport type TableStatusData = PreviewTableStatusData & DetailedTableStatusData;\r\nexport type PreviewTableData = PreviewTableInfoData & PreviewTableStatusData;\r\n\r\nexport type EnterTableRequestData = {\r\n    HallType: string;\r\n    ID: string;\r\n};\r\n\r\nexport type EnterTableResponseData = TableInfoData &\r\n    PreviewTableStatusData\r\n    & {\r\n        Result?: ResultResponseData;\r\n    };\r\n","import { _decorator, Component, Button, Label } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum EMsgCode\r\n{\r\n\r\n}\r\n\r\n@ccclass('TipsManager')\r\nexport class TipsManager extends Component \r\n{\r\n    @property(Button)\r\n    private btnConfirm: Button = null;\r\n    @property(Label)\r\n    private msg: Label = null;\r\n\r\n    private static instance: TipsManager = null;\r\n    public static getInstance(): TipsManager\r\n    {\r\n        return TipsManager.instance;\r\n    }\r\n    \r\n    protected start() \r\n    {\r\n        TipsManager.instance = this;\r\n        this.close();\r\n        this.btnConfirm.node.on(Button.EventType.CLICK, this.onBtnConfirm.bind(this));\r\n    }\r\n\r\n    private onBtnConfirm()\r\n    {\r\n\r\n    }\r\n\r\n    public setMsg(msgCode: EMsgCode)\r\n    { \r\n        this.msg.string = \"\";\r\n    }\r\n\r\n    public open()\r\n    {\r\n        this.node.active = true;\r\n    }\r\n    \r\n    private close()\r\n    {\r\n        this.node.active = false;\r\n    }\r\n}\r\n","import { Tween } from 'cc';\r\n\r\ndeclare module 'cc' {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    interface Tween<T> {\r\n        promisifyStart(startTime?: number): Promise<void>;\r\n        /** set tween state to specific timing */\r\n        setTime(time: number): void;\r\n    }\r\n}\r\n\r\nTween.prototype.promisifyStart = function promisifyStart(this: Tween<any>, startTime: number = 0) {\r\n    return new Promise((resolve) => this.call(resolve).start().setTime(startTime));\r\n};\r\n\r\nTween.prototype.setTime = function setTime(time: number) {\r\n    this._finalAction._firstTick = false;\r\n    this._finalAction._elapsed = time;\r\n};\r\n","\r\nimport { _decorator, Component, Node, WebView } from 'cc';\r\nimport Application from '../../Application/Application';\r\nimport I18n from '../../I18n/I18n';\r\nimport AudioManager from '../AudioManager';\r\nimport { SoundEffect } from '../Config/audio.config';\r\nimport { StartUp } from '../StartUp';\r\nimport { PlayerInfo } from '../PlayerInfo';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('UserWebview')\r\nexport class UserWebview extends Component {\r\n    @property(WebView)\r\n    private webview: WebView = null;\r\n\r\n    protected onLoad() {\r\n        window.addEventListener(\"message\", (event) => {\r\n            if (event.source == this.webview.nativeWebView?.contentWindow) {\r\n                const data: { Path: string; Data: string } = JSON.parse(event.data);\r\n                if (data.Path == \"history.loaded\" && data.Data == \"\") {\r\n                    this.webview.nativeWebView.parentElement.style.overflow = \"hidden\";\r\n                }\r\n                if (data.Path == \"history.close\" && data.Data == \"\") {\r\n                    this.webview.url = \"\";\r\n                    this.node.active = false;\r\n                    AudioManager.Instance.playEffect(SoundEffect.BUTTON_CLICK);\r\n                }\r\n            }\r\n        });\r\n\r\n        let disableRecordWebView = () => {\r\n            this.node.active = false;\r\n        };\r\n        window.addEventListener(\"offline\", disableRecordWebView);\r\n        window.addEventListener(\"error\", disableRecordWebView);\r\n    }\r\n\r\n    public openUserRecord() {\r\n        this.openWebview(`${PlayerInfo.getInstance().getAccountInfoUrl()}/daily?token=${Application.Instance.config.token}&lang=${I18n.Instance.currentLanguageForWebview}&volume=${AudioManager.Instance.effectVolume}&theme=gray`);\r\n    }\r\n\r\n    public openUserStatistics() {\r\n        this.openWebview(`${PlayerInfo.getInstance().getAccountInfoUrl()}/daily-player?token=${Application.Instance.config.token}&lang=${I18n.Instance.currentLanguageForWebview}&volume=${AudioManager.Instance.effectVolume}&theme=gray`);\r\n    }\r\n\r\n    public openWebview(url: string) {\r\n        this.node.active = true;\r\n        this.webview.url = url;\r\n    }\r\n}","import { UITransform } from 'cc';\r\nimport { Node } from 'cc';\r\n\r\n/**\r\n * 根據提供的 frame數和 fps，計算出時間\r\n * @param frame 格數\r\n * @param fps 預設值為動畫素材的 fps\r\n * @returns 跑完幀數所需時間(in second)\r\n */\r\nexport function calculateFrameTime(frame: number, fps: number = 30): number {\r\n    return frame / fps;\r\n}\r\n\r\n/**\r\n * 將參數填入字串中，參數位置以 {n}表示，ex. 'You won {0} on extra'\r\n * @param text 目標字串\r\n * @param args 目標參數\r\n */\r\nexport function fillTextArgument(text: string, args: string[]): string {\r\n    args.forEach((value, idx) => {\r\n        text = text.replace(new RegExp(`\\\\{${idx}\\\\}`, 'g'), value);\r\n    });\r\n    text = text.replace(/\\{\\d+\\}/g, '');\r\n    return text;\r\n}\r\n\r\n/**\r\n * 設置父節點且不更改位置\r\n * @param child 子節點\r\n * @param parent 父節點\r\n */\r\nexport function setParentWithoutPositionChange(child: Node, parent: Node) {\r\n    const originWorldPosition = child.parent.getComponent(UITransform).convertToWorldSpaceAR(child.position);\r\n    child.parent = parent;\r\n    child.position = parent.getComponent(UITransform).convertToNodeSpaceAR(originWorldPosition);\r\n}\r\n\r\n/**\r\n * 根據傳入的 host和 args組成 URL\r\n */\r\nexport function joinURL(host: string, ...args: string[]): string {\r\n    let url: string = host;\r\n    args.forEach((arg) => {\r\n        // 判斷是否需要補 '/'\r\n        url += arg.slice(-1) === '/' ? '' : '/';\r\n        // 補上參數\r\n        url += arg[0] === '/' ? arg.slice(1) : arg;\r\n    });\r\n    return url;\r\n}\r\n\r\nexport function breakValueToSmallerValues(value: number, smallerValues: number[]): number[] {\r\n    const result: number[] = new Array(smallerValues.length).fill(0);\r\n    const originValue = value;\r\n    for (let i = smallerValues.length - 1; i >= 0; i--) {\r\n        if (!smallerValues[i]) {\r\n            continue;\r\n        }\r\n        while (value >= smallerValues[i]) {\r\n            value -= smallerValues[i];\r\n            result[i]++;\r\n        }\r\n        if (value === 0) {\r\n            break;\r\n        }\r\n    }\r\n    // eslint-disable-next-line no-console\r\n    console.assert(\r\n        originValue === result.reduce((pre, cur, idx) => pre + cur * smallerValues[idx], 0),\r\n        `breakValueToSmallerValues failed, originValues: ${originValue}, smallerValues: ${smallerValues}`\r\n    );\r\n    return result;\r\n}\r\n\r\nexport function deIdentification(str: string, displayLength: number, replaceWith: string) {\r\n    return str\r\n        .split('')\r\n        .map((char) => {\r\n            if (displayLength > 0) {\r\n                if (char.match(/[\\u4E00-\\u9FFF]/)) {\r\n                    displayLength -= 2;\r\n                } else {\r\n                    displayLength--;\r\n                }\r\n                return char;\r\n            }\r\n            return replaceWith;\r\n        })\r\n        .join('');\r\n}\r\n\r\nexport function shorten(str: string, displayLength: number) {\r\n    if (getLocaleStringLength(str) <= displayLength) {\r\n        return str;\r\n    }\r\n    displayLength--;\r\n    return `${str\r\n        .split('')\r\n        .map((char) => {\r\n            if (displayLength > 0) {\r\n                if (char.match(/[\\u4E00-\\u9FFF]/)) {\r\n                    displayLength -= 2;\r\n                    if (displayLength < 0) {\r\n                        return '';\r\n                    }\r\n                } else {\r\n                    displayLength--;\r\n                }\r\n                return char;\r\n            }\r\n            return '';\r\n        })\r\n        .join('')}...`;\r\n}\r\n\r\nexport function getLocaleStringLength(str: string): number {\r\n    return str.split('').reduce((pre, cur) => pre + (cur.match(/[\\u4E00-\\u9FFF]/) ? 2 : 1), 0);\r\n}\r\n","\r\nimport { _decorator, Component, Node, Button, Slider, Sprite } from 'cc';\r\nimport AnimatedPage from '../../Toolkit/Components/Page/AnimatedPage';\r\nimport AudioManager from '../AudioManager';\r\nimport StorageHelper, { StoragePath } from '../Helper/StorageHelper';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport interface IAudioSetting {\r\n    musicVolume: number;\r\n    effectVolume: number;\r\n    musicMute: boolean;\r\n    effectMute: boolean;\r\n}\r\n\r\n@ccclass('VolumeSetting')\r\nexport class VolumeSetting extends AnimatedPage {\r\n    @property(Button)\r\n    private soundMuteButton: Button = null;\r\n    @property(Button)\r\n    private BGMMuteButton: Button = null;\r\n    @property(Slider)\r\n    private soundVolumeSlider: Slider = null;\r\n    @property(Sprite)\r\n    private soundVolumeSliderFill: Sprite = null;\r\n    @property(Slider)\r\n    private BGMVolumeSlider: Slider = null;\r\n    @property(Sprite)\r\n    private BGMVolumeSliderFill: Sprite = null;\r\n\r\n    private static readonly defaultAudioSetting: IAudioSetting = {\r\n        musicVolume: 1,\r\n        effectVolume: 1,\r\n        musicMute: false,\r\n        effectMute: false,\r\n    };\r\n\r\n    private currentAudioSetting: IAudioSetting;\r\n\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n        this.handleVolumeSlider();\r\n\r\n        this.soundMuteButton.node.on(Button.EventType.CLICK, this.switchSoundMute.bind(this));\r\n        this.BGMMuteButton.node.on(Button.EventType.CLICK, this.switchBGMMute.bind(this));\r\n    }\r\n\r\n    protected start() {\r\n        this.loadAndApplyAudioSetting();\r\n        this.initUI();\r\n    }\r\n\r\n    private initUI() {\r\n        // volume and mute\r\n        this.updateVolumeSlider();\r\n    }\r\n\r\n    private updateVolumeSlider() {\r\n        if (AudioManager.Instance.effectMute) {\r\n            this.soundVolumeSlider.progress = 0;\r\n            this.soundVolumeSliderFill.fillRange = 0;\r\n        } else {\r\n            this.soundVolumeSlider.progress = AudioManager.Instance.effectVolume;\r\n            this.soundVolumeSliderFill.fillRange = this.soundVolumeSlider.progress;\r\n        }\r\n        if (AudioManager.Instance.musicMute) {\r\n            this.BGMVolumeSlider.progress = 0;\r\n            this.BGMVolumeSliderFill.fillRange = 0;\r\n        } else {\r\n            this.BGMVolumeSlider.progress = AudioManager.Instance.musicVolume;\r\n            this.BGMVolumeSliderFill.fillRange = this.BGMVolumeSlider.progress;\r\n        }\r\n    }\r\n\r\n    private handleVolumeSlider() {\r\n        this.soundVolumeSlider.node.on('slide', () => {\r\n            const volume = this.soundVolumeSlider.progress;\r\n            AudioManager.Instance.effectMute = false;\r\n            AudioManager.Instance.effectVolume = volume;\r\n            this.currentAudioSetting.effectMute = false;\r\n            this.currentAudioSetting.effectVolume = volume;\r\n            this.soundVolumeSliderFill.fillRange = volume;\r\n            this.saveAudioSetting();\r\n        });\r\n        this.BGMVolumeSlider.node.on('slide', () => {\r\n            const volume = this.BGMVolumeSlider.progress;\r\n            AudioManager.Instance.musicMute = false;\r\n            AudioManager.Instance.musicVolume = volume;\r\n            this.currentAudioSetting.musicMute = false;\r\n            this.currentAudioSetting.musicVolume = volume;\r\n            this.BGMVolumeSliderFill.fillRange = volume;\r\n            this.saveAudioSetting();\r\n        });\r\n    }\r\n\r\n    // 切換音效 靜音/50%音量\r\n    private switchSoundMute() {\r\n        if (!AudioManager.Instance.effectMute) {\r\n            AudioManager.Instance.effectMute = true;\r\n            this.currentAudioSetting.effectMute = true;\r\n            this.soundVolumeSlider.progress = 0;\r\n            this.soundVolumeSliderFill.fillRange = 0;\r\n        } else {\r\n            AudioManager.Instance.effectMute = false;\r\n            this.currentAudioSetting.effectMute = false;\r\n            this.soundVolumeSlider.progress = AudioManager.Instance.effectVolume;\r\n            this.soundVolumeSliderFill.fillRange = this.soundVolumeSlider.progress;\r\n        }\r\n        this.saveAudioSetting();\r\n    }\r\n\r\n    // 切換BGM 靜音/50%音量\r\n    private switchBGMMute() {\r\n        if (!AudioManager.Instance.musicMute) {\r\n            AudioManager.Instance.musicMute = true;\r\n            this.currentAudioSetting.musicMute = true;\r\n            this.BGMVolumeSlider.progress = 0;\r\n            this.BGMVolumeSliderFill.fillRange = 0;\r\n        } else {\r\n            AudioManager.Instance.musicMute = false;\r\n            this.currentAudioSetting.musicMute = false;\r\n            this.BGMVolumeSlider.progress = AudioManager.Instance.musicVolume;\r\n            this.BGMVolumeSliderFill.fillRange = this.BGMVolumeSlider.progress;\r\n        }\r\n        this.saveAudioSetting();\r\n    }\r\n\r\n    // model operation\r\n    private saveAudioSetting() {\r\n        StorageHelper.saveToLocal(StoragePath.AudioSetting, this.currentAudioSetting);\r\n    }\r\n\r\n    private loadAndApplyAudioSetting() {\r\n        this.currentAudioSetting = StorageHelper.loadFromLocal(StoragePath.AudioSetting) ?? VolumeSetting.defaultAudioSetting;\r\n        const { effectVolume, musicVolume, effectMute, musicMute }: IAudioSetting = this.currentAudioSetting;\r\n\r\n        // volume and mute\r\n        AudioManager.Instance.effectVolume = effectVolume;\r\n        AudioManager.Instance.musicVolume = musicVolume;\r\n        AudioManager.Instance.effectMute = effectMute;\r\n        AudioManager.Instance.musicMute = musicMute;\r\n    }\r\n}"]}